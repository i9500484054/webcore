(()=>{var e={1370:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}},2170:()=>{document.addEventListener("DOMContentLoaded",(function(){document.querySelectorAll(".service-list__link").forEach((function(e){e.addEventListener("click",(function(e){const t=e.currentTarget.dataset.path;document.querySelectorAll(".service-item").forEach((function(e){e.classList.remove("services-item--active")})),document.querySelectorAll(".service-list__link").forEach((function(e){e.classList.remove("service-list__link--active")})),document.querySelector(`[data-path="${t}"]`).classList.add("service-list__link--active"),document.querySelector(`[data-target="${t}"]`).classList.add("services-item--active")}))})),document.querySelectorAll(".button-js-open").forEach((function(e){e.addEventListener("click",(function(e){let t=e.currentTarget.dataset.path;document.querySelectorAll(".blok-js-active").forEach((function(e){e.classList.remove("btn--active","btn--menu")})),"six-btn"===document.querySelector(`[data-target="${t}"]`).getAttribute("data-target")?document.querySelector(`[data-target="${t}"]`).classList.add("btn--menu"):document.querySelector(`[data-target="${t}"]`).classList.add("btn--active")})),document.querySelectorAll(".cps-js-bg").forEach((function(e){e.addEventListener("click",(function(){document.querySelectorAll(".blok-js-active").forEach((function(e){e.classList.remove("btn--active","btn--menu")}))}))}))})),document.querySelectorAll(".service-brands__link").forEach((function(e){e.addEventListener("click",(function(t){let i=t.currentTarget.dataset.path;"three-allopen"===document.querySelector(`[data-target="${i}"]`).getAttribute("data-target")?(document.querySelector(`[data-target="${i}"]`).classList.toggle("all-open-content--active"),e.classList.toggle("qqoo")):(document.querySelector(`[data-target="${i}"]`).classList.toggle("all-open--active"),e.classList.toggle("qqoo"))}))})),document.querySelectorAll(".nav-menu__link").forEach((function(e){e.addEventListener("click",(function(){document.querySelectorAll(".nav-menu__link").forEach((function(e){e.classList.remove("nav-menu__link--active")})),e.classList.add("nav-menu__link--active")}))}))}))},6730:(e,t,i)=>{"use strict";e.exports=i.p+"78ed35d545d8cb9b72da.css"},374:(e,t,i)=>{"use strict";e.exports=i.p+"f59d2a8b9b2c51f6d144.avif"},32:(e,t,i)=>{"use strict";e.exports=i.p+"780f32374a43f985aad5.jpg"},7873:(e,t,i)=>{"use strict";e.exports=i.p+"54f7b0b2fe981b946e22.webp"},8796:(e,t,i)=>{"use strict";e.exports=i.p+"b3dac61eb3d70ee5ca67.avif"},3127:(e,t,i)=>{"use strict";e.exports=i.p+"debe58c9baee44984e52.jpg"},2953:(e,t,i)=>{"use strict";e.exports=i.p+"cd6e56ad4ee2f109ca8b.webp"},7805:(e,t,i)=>{"use strict";e.exports=i.p+"e81be35baabb2ef75dd6.avif"},7599:(e,t,i)=>{"use strict";e.exports=i.p+"5bb9a38c34e8cf2509d6.jpg"},5387:(e,t,i)=>{"use strict";e.exports=i.p+"1c3ac63ab19ea7355463.webp"},6066:(e,t,i)=>{"use strict";e.exports=i.p+"92003dac2f694626906d.avif"},1899:(e,t,i)=>{"use strict";e.exports=i.p+"009735a46eeea9688def.webp"},2279:(e,t,i)=>{"use strict";e.exports=i.p+"e571ea5cdeae32507648.avif"},3957:(e,t,i)=>{"use strict";e.exports=i.p+"4669b6f359b8d9a1a5ca.jpg"},6711:(e,t,i)=>{"use strict";e.exports=i.p+"920f4b328f8fae2f6259.webp"},7392:(e,t,i)=>{"use strict";e.exports=i.p+"56e6f5693944ae4ddffa.avif"},4732:(e,t,i)=>{"use strict";e.exports=i.p+"f2ccabbde077dca7dcf9.webp"},2574:(e,t,i)=>{"use strict";e.exports=i.p+"3ba6e8635cfe7aee7260.avif"},257:(e,t,i)=>{"use strict";e.exports=i.p+"252210150a4ae82e4221.jpg"},6064:(e,t,i)=>{"use strict";e.exports=i.p+"14f426019d9df3796476.webp"},7565:(e,t,i)=>{"use strict";e.exports=i.p+"376255220b92cbd3db0b.avif"},2410:(e,t,i)=>{"use strict";e.exports=i.p+"d4d610f4d26d43971927.jpg"},7267:(e,t,i)=>{"use strict";e.exports=i.p+"ca72274a2ff77d72aa5a.webp"},6688:(e,t,i)=>{"use strict";e.exports=i.p+"c16747d9f2a2ed9d7479.avif"},5521:(e,t,i)=>{"use strict";e.exports=i.p+"b6b0e4fec9e967ce8c5a.jpg"},6359:(e,t,i)=>{"use strict";e.exports=i.p+"17fab38c90c1a0bd7d9e.webp"},8342:(e,t,i)=>{"use strict";e.exports=i.p+"e744aebf0ac1d44e1833.jpg"},3485:(e,t,i)=>{"use strict";e.exports=i.p+"eec8745e842233d87a47.avif"},4998:(e,t,i)=>{"use strict";e.exports=i.p+"2d5e421068fe23a9f444.jpg"},1849:(e,t,i)=>{"use strict";e.exports=i.p+"0c268edb180020f661e7.webp"},2814:(e,t,i)=>{"use strict";e.exports=i.p+"37fe45c89eb2e80311c8.avif"},4901:(e,t,i)=>{"use strict";e.exports=i.p+"05ea743496f570992a92.jpg"},3090:(e,t,i)=>{"use strict";e.exports=i.p+"390072a2bb34f105ad17.webp"},9538:(e,t,i)=>{"use strict";e.exports=i.p+"b9181fafe90b2ff7faad.avif"},5291:(e,t,i)=>{"use strict";e.exports=i.p+"70edc0029efe0dfeb1c2.jpg"},4503:(e,t,i)=>{"use strict";e.exports=i.p+"edd750b4a84f87628a65.webp"},3330:(e,t,i)=>{"use strict";e.exports=i.p+"8f5e19161462954075a7.avif"},6513:(e,t,i)=>{"use strict";e.exports=i.p+"b4908f9f6466908cade5.jpg"},7409:(e,t,i)=>{"use strict";e.exports=i.p+"9a0da43fe95eb93dbd07.webp"},6193:(e,t,i)=>{"use strict";e.exports=i.p+"c0da493562b5f1d6fb27.avif"},4216:(e,t,i)=>{"use strict";e.exports=i.p+"9a46567a76ab186f29e1.jpg"},4808:(e,t,i)=>{"use strict";e.exports=i.p+"b9782f8d9c504cf12226.webp"},6953:(e,t,i)=>{"use strict";e.exports=i.p+"30d2d49f33a4e2c579a2.avif"},2714:(e,t,i)=>{"use strict";e.exports=i.p+"3dc0fd8d4acc1b65f406.jpg"},3724:(e,t,i)=>{"use strict";e.exports=i.p+"4d0909710bee102e2e5b.webp"},845:(e,t,i)=>{"use strict";e.exports=i.p+"0390b11f96eed4b87bb5.avif"},2751:(e,t,i)=>{"use strict";e.exports=i.p+"2047c2ce425f51075959.jpg"},6885:(e,t,i)=>{"use strict";e.exports=i.p+"6abf1590e0d66e2ae203.webp"},7188:(e,t,i)=>{"use strict";e.exports=i.p+"801e80449fc64ab3e571.avif"},4254:(e,t,i)=>{"use strict";e.exports=i.p+"4d4917a003d1e651bbf2.webp"},1886:(e,t,i)=>{"use strict";e.exports=i.p+"1ebe281af32f614146da.avif"},5037:(e,t,i)=>{"use strict";e.exports=i.p+"5f51b1a6cc710a74d9fe.jpg"},941:(e,t,i)=>{"use strict";e.exports=i.p+"481e924edd9ad3e3749f.webp"},4750:(e,t,i)=>{"use strict";e.exports=i.p+"49c7b50ffb129b36b921.png"},9430:(e,t,i)=>{"use strict";e.exports=i.p+"3c896aa53cdbd5b96393.png"},8566:(e,t,i)=>{"use strict";e.exports=i.p+"855cba088fda8bed3940.png"},3064:(e,t,i)=>{"use strict";e.exports=i.p+"f2c0477a81b9b2920566.png"},4959:(e,t,i)=>{"use strict";e.exports=i.p+"2480e5711f895a420665.png"},9183:(e,t,i)=>{"use strict";e.exports=i.p+"21bc8211db656d69b68f.png"},6141:(e,t,i)=>{"use strict";e.exports=i.p+"0ee2a38acbf05b09a5a6.png"},8169:(e,t,i)=>{"use strict";e.exports=i.p+"8a19a4f0983a366a004a.png"},3222:(e,t,i)=>{"use strict";e.exports=i.p+"bc5268554637645d6428.png"},6840:(e,t,i)=>{"use strict";e.exports=i.p+"1d8f9aff8d47d23370f6.svg"}},t={};function i(r){var s=t[r];if(void 0!==s)return s.exports;var n=t[r]={exports:{}};return e[r](n,n.exports,i),n.exports}i.m=e,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.p="",i.b=document.baseURI||self.location.href,(()=>{"use strict";function e(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function t(i,r){void 0===i&&(i={}),void 0===r&&(r={}),Object.keys(r).forEach((function(s){void 0===i[s]?i[s]=r[s]:e(r[s])&&e(i[s])&&Object.keys(r[s]).length>0&&t(i[s],r[s])}))}var r={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function s(){var e="undefined"!=typeof document?document:{};return t(e,r),e}var n={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function a(){var e="undefined"!=typeof window?window:{};return t(e,n),e}function o(e){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function c(e,t,i){return(c=d()?Reflect.construct:function(e,t,i){var r=[null];r.push.apply(r,t);var s=new(Function.bind.apply(e,r));return i&&l(s,i.prototype),s}).apply(null,arguments)}function p(e){var t="function"==typeof Map?new Map:void 0;return(p=function(e){if(null===e||(i=e,-1===Function.toString.call(i).indexOf("[native code]")))return e;var i;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return c(e,arguments,o(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),l(r,e)})(e)}var u=function(e){var t,i;function r(t){var i,r,s;return r=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(i=e.call.apply(e,[this].concat(t))||this),s=r.__proto__,Object.defineProperty(r,"__proto__",{get:function(){return s},set:function(e){s.__proto__=e}}),i}return i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,r}(p(Array));function v(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,v(e)):t.push(e)})),t}function f(e,t){return Array.prototype.filter.call(e,t)}function h(e,t){var i=a(),r=s(),n=[];if(!t&&e instanceof u)return e;if(!e)return new u(n);if("string"==typeof e){var o=e.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){var l="div";0===o.indexOf("<li")&&(l="ul"),0===o.indexOf("<tr")&&(l="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(l="tr"),0===o.indexOf("<tbody")&&(l="table"),0===o.indexOf("<option")&&(l="select");var d=r.createElement(l);d.innerHTML=o;for(var c=0;c<d.childNodes.length;c+=1)n.push(d.childNodes[c])}else n=function(e,t){if("string"!=typeof e)return[e];for(var i=[],r=t.querySelectorAll(e),s=0;s<r.length;s+=1)i.push(r[s]);return i}(e.trim(),t||r)}else if(e.nodeType||e===i||e===r)n.push(e);else if(Array.isArray(e)){if(e instanceof u)return e;n=e}return new u(function(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}(n))}h.fn=u.prototype;var m="resize scroll".split(" ");function g(e){return function(){for(var t=arguments.length,i=new Array(t),r=0;r<t;r++)i[r]=arguments[r];if(void 0===i[0]){for(var s=0;s<this.length;s+=1)m.indexOf(e)<0&&(e in this[s]?this[s][e]():h(this[s]).trigger(e));return this}return this.on.apply(this,[e].concat(i))}}g("click"),g("blur"),g("focus"),g("focusin"),g("focusout"),g("keyup"),g("keydown"),g("keypress"),g("submit"),g("change"),g("mousedown"),g("mousemove"),g("mouseup"),g("mouseenter"),g("mouseleave"),g("mouseout"),g("mouseover"),g("touchstart"),g("touchend"),g("touchmove"),g("resize"),g("scroll");var b={addClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=v(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,r)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=v(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,r)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=v(t.map((function(e){return e.split(" ")})));return f(this,(function(e){return r.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=v(t.map((function(e){return e.split(" ")})));this.forEach((function(e){r.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(var r in e)this[i][r]=e[r],this[i].setAttribute(r,e[r]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?e+"ms":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=t[0],s=t[1],n=t[2],a=t[3];function o(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),h(t).is(s))n.apply(t,i);else for(var r=h(t).parents(),a=0;a<r.length;a+=1)h(r[a]).is(s)&&n.apply(r[a],i)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),n.apply(this,t)}"function"==typeof t[1]&&(r=t[0],n=t[1],a=t[2],s=void 0),a||(a=!1);for(var d,c=r.split(" "),p=0;p<this.length;p+=1){var u=this[p];if(s)for(d=0;d<c.length;d+=1){var v=c[d];u.dom7LiveListeners||(u.dom7LiveListeners={}),u.dom7LiveListeners[v]||(u.dom7LiveListeners[v]=[]),u.dom7LiveListeners[v].push({listener:n,proxyListener:o}),u.addEventListener(v,o,a)}else for(d=0;d<c.length;d+=1){var f=c[d];u.dom7Listeners||(u.dom7Listeners={}),u.dom7Listeners[f]||(u.dom7Listeners[f]=[]),u.dom7Listeners[f].push({listener:n,proxyListener:l}),u.addEventListener(f,l,a)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=t[0],s=t[1],n=t[2],a=t[3];"function"==typeof t[1]&&(r=t[0],n=t[1],a=t[2],s=void 0),a||(a=!1);for(var o=r.split(" "),l=0;l<o.length;l+=1)for(var d=o[l],c=0;c<this.length;c+=1){var p=this[c],u=void 0;if(!s&&p.dom7Listeners?u=p.dom7Listeners[d]:s&&p.dom7LiveListeners&&(u=p.dom7LiveListeners[d]),u&&u.length)for(var v=u.length-1;v>=0;v-=1){var f=u[v];n&&f.listener===n||n&&f.listener&&f.listener.dom7proxy&&f.listener.dom7proxy===n?(p.removeEventListener(d,f.proxyListener,a),u.splice(v,1)):n||(p.removeEventListener(d,f.proxyListener,a),u.splice(v,1))}}return this},trigger:function(){for(var e=a(),t=arguments.length,i=new Array(t),r=0;r<t;r++)i[r]=arguments[r];for(var s=i[0].split(" "),n=i[1],o=0;o<s.length;o+=1)for(var l=s[o],d=0;d<this.length;d+=1){var c=this[d];if(e.CustomEvent){var p=new e.CustomEvent(l,{detail:n,bubbles:!0,cancelable:!0});c.dom7EventData=i.filter((function(e,t){return t>0})),c.dispatchEvent(p),c.dom7EventData=[],delete c.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on("transitionend",(function i(r){r.target===this&&(e.call(this,r),t.off("transitionend",i))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=a();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=a(),t=s(),i=this[0],r=i.getBoundingClientRect(),n=t.body,o=i.clientTop||n.clientTop||0,l=i.clientLeft||n.clientLeft||0,d=i===e?e.scrollY:i.scrollTop,c=i===e?e.scrollX:i.scrollLeft;return{top:r.top+d-o,left:r.left+c-l}}return null},css:function(e,t){var i,r=a();if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var s in e)this[i].style[s]=e[s];return this}if(this[0])return r.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,i){e.apply(t,[t,i])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,r=a(),n=s(),o=this[0];if(!o||void 0===e)return!1;if("string"==typeof e){if(o.matches)return o.matches(e);if(o.webkitMatchesSelector)return o.webkitMatchesSelector(e);if(o.msMatchesSelector)return o.msMatchesSelector(e);for(t=h(e),i=0;i<t.length;i+=1)if(t[i]===o)return!0;return!1}if(e===n)return o===n;if(e===r)return o===r;if(e.nodeType||e instanceof u){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===o)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return h([]);if(e<0){var i=t+e;return h(i<0?[]:[this[i]])}return h([this[e]])},append:function(){for(var e,t=s(),i=0;i<arguments.length;i+=1){e=i<0||arguments.length<=i?void 0:arguments[i];for(var r=0;r<this.length;r+=1)if("string"==typeof e){var n=t.createElement("div");for(n.innerHTML=e;n.firstChild;)this[r].appendChild(n.firstChild)}else if(e instanceof u)for(var a=0;a<e.length;a+=1)this[r].appendChild(e[a]);else this[r].appendChild(e)}return this},prepend:function(e){var t,i,r=s();for(t=0;t<this.length;t+=1)if("string"==typeof e){var n=r.createElement("div");for(n.innerHTML=e,i=n.childNodes.length-1;i>=0;i-=1)this[t].insertBefore(n.childNodes[i],this[t].childNodes[0])}else if(e instanceof u)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&h(this[0].nextElementSibling).is(e)?h([this[0].nextElementSibling]):h([]):this[0].nextElementSibling?h([this[0].nextElementSibling]):h([]):h([])},nextAll:function(e){var t=[],i=this[0];if(!i)return h([]);for(;i.nextElementSibling;){var r=i.nextElementSibling;e?h(r).is(e)&&t.push(r):t.push(r),i=r}return h(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&h(t.previousElementSibling).is(e)?h([t.previousElementSibling]):h([]):t.previousElementSibling?h([t.previousElementSibling]):h([])}return h([])},prevAll:function(e){var t=[],i=this[0];if(!i)return h([]);for(;i.previousElementSibling;){var r=i.previousElementSibling;e?h(r).is(e)&&t.push(r):t.push(r),i=r}return h(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?h(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return h(t)},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var r=this[i].parentNode;r;)e?h(r).is(e)&&t.push(r):t.push(r),r=r.parentNode;return h(t)},closest:function(e){var t=this;return void 0===e?h([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var r=this[i].querySelectorAll(e),s=0;s<r.length;s+=1)t.push(r[s]);return h(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var r=this[i].children,s=0;s<r.length;s+=1)e&&!h(r[s]).is(e)||t.push(r[s]);return h(t)},filter:function(e){return h(f(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};Object.keys(b).forEach((function(e){Object.defineProperty(h.fn,e,{value:b[e],writable:!0})}));const w=h;function C(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function x(){return Date.now()}function y(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function T(e){return"undefined"!=typeof window&&void 0!==window.HTMLElement?e instanceof HTMLElement:e&&(1===e.nodeType||11===e.nodeType)}function S(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"],i=1;i<arguments.length;i+=1){var r=i<0||arguments.length<=i?void 0:arguments[i];if(null!=r&&!T(r))for(var s=Object.keys(Object(r)).filter((function(e){return t.indexOf(e)<0})),n=0,a=s.length;n<a;n+=1){var o=s[n],l=Object.getOwnPropertyDescriptor(r,o);void 0!==l&&l.enumerable&&(y(e[o])&&y(r[o])?r[o].__swiper__?e[o]=r[o]:S(e[o],r[o]):!y(e[o])&&y(r[o])?(e[o]={},r[o].__swiper__?e[o]=r[o]:S(e[o],r[o])):e[o]=r[o])}}return e}function E(e,t){Object.keys(t).forEach((function(i){y(t[i])&&Object.keys(t[i]).forEach((function(r){"function"==typeof t[i][r]&&(t[i][r]=t[i][r].bind(e))})),e[i]=t[i]}))}function L(e){return void 0===e&&(e=""),"."+e.trim().replace(/([\.:\/])/g,"\\$1").replace(/ /g,".")}function M(e,t,i,r){var n=s();return i&&Object.keys(r).forEach((function(i){if(!t[i]&&!0===t.auto){var s=n.createElement("div");s.className=r[i],e.append(s),t[i]=s}})),t}var k,P,O;function A(){return k||(k=function(){var e=a(),t=s();return{touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&"maxTouchPoints"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:"MutationObserver"in e||"WebkitMutationObserver"in e,passiveListener:function(){var t=!1;try{var i=Object.defineProperty({},"passive",{get:function(){t=!0}});e.addEventListener("testPassiveListener",null,i)}catch(e){}return t}(),gestures:"ongesturestart"in e}}()),k}function z(e){return void 0===e&&(e={}),P||(P=function(e){var t=(void 0===e?{}:e).userAgent,i=A(),r=a(),s=r.navigator.platform,n=t||r.navigator.userAgent,o={ios:!1,android:!1},l=r.screen.width,d=r.screen.height,c=n.match(/(Android);?[\s\/]+([\d.]+)?/),p=n.match(/(iPad).*OS\s([\d_]+)/),u=n.match(/(iPod)(.*OS\s([\d_]+))?/),v=!p&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===s,h="MacIntel"===s;return!p&&h&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(l+"x"+d)>=0&&((p=n.match(/(Version)\/([\d.]+)/))||(p=[0,1,"13_0_0"]),h=!1),c&&!f&&(o.os="android",o.android=!0),(p||v||u)&&(o.os="ios",o.ios=!0),o}(e)),P}function I(){return O||(O=function(){var e,t=a();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),O}const R={name:"resize",create:function(){var e=this;S(e,{resize:{observer:null,createObserver:function(){e&&!e.destroyed&&e.initialized&&(e.resize.observer=new ResizeObserver((function(t){var i=e.width,r=e.height,s=i,n=r;t.forEach((function(t){var i=t.contentBoxSize,r=t.contentRect,a=t.target;a&&a!==e.el||(s=r?r.width:(i[0]||i).inlineSize,n=r?r.height:(i[0]||i).blockSize)})),s===i&&n===r||e.resize.resizeHandler()})),e.resize.observer.observe(e.el))},removeObserver:function(){e.resize.observer&&e.resize.observer.unobserve&&e.el&&(e.resize.observer.unobserve(e.el),e.resize.observer=null)},resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=a();e.params.resizeObserver&&void 0!==a().ResizeObserver?e.resize.createObserver():(t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler))},destroy:function(e){var t=a();e.resize.removeObserver(),t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}};function B(){return(B=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e}).apply(this,arguments)}var D={attach:function(e,t){void 0===t&&(t={});var i=a(),r=this,s=new(i.MutationObserver||i.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){r.emit("observerUpdate",e[0])};i.requestAnimationFrame?i.requestAnimationFrame(t):i.setTimeout(t,0)}else r.emit("observerUpdate",e[0])}));s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),r.observer.observers.push(s)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),i=0;i<t.length;i+=1)e.observer.attach(t[i]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}};const _={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){E(this,{observer:B({},D,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function G(e){var t=this,i=s(),r=a(),n=t.touchEventsData,o=t.params,l=t.touches;if(t.enabled&&(!t.animating||!o.preventInteractionOnTransition)){var d=e;d.originalEvent&&(d=d.originalEvent);var c=w(d.target);if(("wrapper"!==o.touchEventsTarget||c.closest(t.wrapperEl).length)&&(n.isTouchEvent="touchstart"===d.type,(n.isTouchEvent||!("which"in d)||3!==d.which)&&!(!n.isTouchEvent&&"button"in d&&d.button>0||n.isTouched&&n.isMoved))){o.noSwipingClass&&""!==o.noSwipingClass&&d.target&&d.target.shadowRoot&&e.path&&e.path[0]&&(c=w(e.path[0]));var p=o.noSwipingSelector?o.noSwipingSelector:"."+o.noSwipingClass,u=!(!d.target||!d.target.shadowRoot);if(o.noSwiping&&(u?function(e,t){return void 0===t&&(t=this),function t(i){return i&&i!==s()&&i!==a()?(i.assignedSlot&&(i=i.assignedSlot),i.closest(e)||t(i.getRootNode().host)):null}(t)}(p,d.target):c.closest(p)[0]))t.allowClick=!0;else if(!o.swipeHandler||c.closest(o.swipeHandler)[0]){l.currentX="touchstart"===d.type?d.targetTouches[0].pageX:d.pageX,l.currentY="touchstart"===d.type?d.targetTouches[0].pageY:d.pageY;var v=l.currentX,f=l.currentY,h=o.edgeSwipeDetection||o.iOSEdgeSwipeDetection,m=o.edgeSwipeThreshold||o.iOSEdgeSwipeThreshold;if(h&&(v<=m||v>=r.innerWidth-m)){if("prevent"!==h)return;e.preventDefault()}if(S(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=v,l.startY=f,n.touchStartTime=x(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,o.threshold>0&&(n.allowThresholdMove=!1),"touchstart"!==d.type){var g=!0;c.is(n.focusableElements)&&(g=!1),i.activeElement&&w(i.activeElement).is(n.focusableElements)&&i.activeElement!==c[0]&&i.activeElement.blur();var b=g&&t.allowTouchMove&&o.touchStartPreventDefault;!o.touchStartForcePreventDefault&&!b||c[0].isContentEditable||d.preventDefault()}t.emit("touchStart",d)}}}}function j(e){var t=s(),i=this,r=i.touchEventsData,n=i.params,a=i.touches,o=i.rtlTranslate;if(i.enabled){var l=e;if(l.originalEvent&&(l=l.originalEvent),r.isTouched){if(!r.isTouchEvent||"touchmove"===l.type){var d="touchmove"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),c="touchmove"===l.type?d.pageX:l.pageX,p="touchmove"===l.type?d.pageY:l.pageY;if(l.preventedByNestedSwiper)return a.startX=c,void(a.startY=p);if(!i.allowTouchMove)return i.allowClick=!1,void(r.isTouched&&(S(a,{startX:c,startY:p,currentX:c,currentY:p}),r.touchStartTime=x()));if(r.isTouchEvent&&n.touchReleaseOnEdges&&!n.loop)if(i.isVertical()){if(p<a.startY&&i.translate<=i.maxTranslate()||p>a.startY&&i.translate>=i.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(c<a.startX&&i.translate<=i.maxTranslate()||c>a.startX&&i.translate>=i.minTranslate())return;if(r.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&w(l.target).is(r.focusableElements))return r.isMoved=!0,void(i.allowClick=!1);if(r.allowTouchCallbacks&&i.emit("touchMove",l),!(l.targetTouches&&l.targetTouches.length>1)){a.currentX=c,a.currentY=p;var u,v=a.currentX-a.startX,f=a.currentY-a.startY;if(!(i.params.threshold&&Math.sqrt(Math.pow(v,2)+Math.pow(f,2))<i.params.threshold))if(void 0===r.isScrolling&&(i.isHorizontal()&&a.currentY===a.startY||i.isVertical()&&a.currentX===a.startX?r.isScrolling=!1:v*v+f*f>=25&&(u=180*Math.atan2(Math.abs(f),Math.abs(v))/Math.PI,r.isScrolling=i.isHorizontal()?u>n.touchAngle:90-u>n.touchAngle)),r.isScrolling&&i.emit("touchMoveOpposite",l),void 0===r.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(r.startMoving=!0)),r.isScrolling)r.isTouched=!1;else if(r.startMoving){i.allowClick=!1,!n.cssMode&&l.cancelable&&l.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&l.stopPropagation(),r.isMoved||(n.loop&&i.loopFix(),r.startTranslate=i.getTranslate(),i.setTransition(0),i.animating&&i.$wrapperEl.trigger("webkitTransitionEnd transitionend"),r.allowMomentumBounce=!1,!n.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",l)),i.emit("sliderMove",l),r.isMoved=!0;var h=i.isHorizontal()?v:f;a.diff=h,h*=n.touchRatio,o&&(h=-h),i.swipeDirection=h>0?"prev":"next",r.currentTranslate=h+r.startTranslate;var m=!0,g=n.resistanceRatio;if(n.touchReleaseOnEdges&&(g=0),h>0&&r.currentTranslate>i.minTranslate()?(m=!1,n.resistance&&(r.currentTranslate=i.minTranslate()-1+Math.pow(-i.minTranslate()+r.startTranslate+h,g))):h<0&&r.currentTranslate<i.maxTranslate()&&(m=!1,n.resistance&&(r.currentTranslate=i.maxTranslate()+1-Math.pow(i.maxTranslate()-r.startTranslate-h,g))),m&&(l.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),i.allowSlidePrev||i.allowSlideNext||(r.currentTranslate=r.startTranslate),n.threshold>0){if(!(Math.abs(h)>n.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,r.currentTranslate=r.startTranslate,void(a.diff=i.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}n.followFinger&&!n.cssMode&&((n.freeMode||n.watchSlidesProgress||n.watchSlidesVisibility)&&(i.updateActiveIndex(),i.updateSlidesClasses()),n.freeMode&&(0===r.velocities.length&&r.velocities.push({position:a[i.isHorizontal()?"startX":"startY"],time:r.touchStartTime}),r.velocities.push({position:a[i.isHorizontal()?"currentX":"currentY"],time:x()})),i.updateProgress(r.currentTranslate),i.setTranslate(r.currentTranslate))}}}}else r.startMoving&&r.isScrolling&&i.emit("touchMoveOpposite",l)}}function $(e){var t=this,i=t.touchEventsData,r=t.params,s=t.touches,n=t.rtlTranslate,a=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid;if(t.enabled){var d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&r.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);r.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c,p=x(),u=p-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap click",d),u<300&&p-i.lastClickTime<300&&t.emit("doubleTap doubleClick",d)),i.lastClickTime=x(),C((function(){t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===s.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,c=r.followFinger?n?t.translate:-t.translate:-i.currentTranslate,!r.cssMode)if(r.freeMode){if(c<-t.minTranslate())return void t.slideTo(t.activeIndex);if(c>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(r.freeModeMomentum){if(i.velocities.length>1){var v=i.velocities.pop(),f=i.velocities.pop(),h=v.position-f.position,m=v.time-f.time;t.velocity=h/m,t.velocity/=2,Math.abs(t.velocity)<r.freeModeMinimumVelocity&&(t.velocity=0),(m>150||x()-v.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=r.freeModeMomentumVelocityRatio,i.velocities.length=0;var g=1e3*r.freeModeMomentumRatio,b=t.velocity*g,w=t.translate+b;n&&(w=-w);var y,T,S=!1,E=20*Math.abs(t.velocity)*r.freeModeMomentumBounceRatio;if(w<t.maxTranslate())r.freeModeMomentumBounce?(w+t.maxTranslate()<-E&&(w=t.maxTranslate()-E),y=t.maxTranslate(),S=!0,i.allowMomentumBounce=!0):w=t.maxTranslate(),r.loop&&r.centeredSlides&&(T=!0);else if(w>t.minTranslate())r.freeModeMomentumBounce?(w-t.minTranslate()>E&&(w=t.minTranslate()+E),y=t.minTranslate(),S=!0,i.allowMomentumBounce=!0):w=t.minTranslate(),r.loop&&r.centeredSlides&&(T=!0);else if(r.freeModeSticky){for(var L,M=0;M<l.length;M+=1)if(l[M]>-w){L=M;break}w=-(w=Math.abs(l[L]-w)<Math.abs(l[L-1]-w)||"next"===t.swipeDirection?l[L]:l[L-1])}if(T&&t.once("transitionEnd",(function(){t.loopFix()})),0!==t.velocity){if(g=n?Math.abs((-w-t.translate)/t.velocity):Math.abs((w-t.translate)/t.velocity),r.freeModeSticky){var k=Math.abs((n?-w:w)-t.translate),P=t.slidesSizesGrid[t.activeIndex];g=k<P?r.speed:k<2*P?1.5*r.speed:2.5*r.speed}}else if(r.freeModeSticky)return void t.slideToClosest();r.freeModeMomentumBounce&&S?(t.updateProgress(y),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating=!0,a.transitionEnd((function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(r.speed),setTimeout((function(){t.setTranslate(y),a.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(w),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,a.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):(t.emit("_freeModeNoMomentumRelease"),t.updateProgress(w)),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(r.freeModeSticky)return void t.slideToClosest();r.freeMode&&t.emit("_freeModeNoMomentumRelease")}(!r.freeModeMomentum||u>=r.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var O=0,A=t.slidesSizesGrid[0],z=0;z<o.length;z+=z<r.slidesPerGroupSkip?1:r.slidesPerGroup){var I=z<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==o[z+I]?c>=o[z]&&c<o[z+I]&&(O=z,A=o[z+I]-o[z]):c>=o[z]&&(O=z,A=o[o.length-1]-o[o.length-2])}var R=(c-o[O])/A,B=O<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(u>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(R>=r.longSwipesRatio?t.slideTo(O+B):t.slideTo(O)),"prev"===t.swipeDirection&&(R>1-r.longSwipesRatio?t.slideTo(O+B):t.slideTo(O))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||d.target!==t.navigation.nextEl&&d.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(O+B),"prev"===t.swipeDirection&&t.slideTo(O)):d.target===t.navigation.nextEl?t.slideTo(O+B):t.slideTo(O)}}}}function N(){var e=this,t=e.params,i=e.el;if(!i||0!==i.offsetWidth){t.breakpoints&&e.setBreakpoint();var r=e.allowSlideNext,s=e.allowSlidePrev,n=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=s,e.allowSlideNext=r,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}}function U(e){var t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function H(){var e=this,t=e.wrapperEl,i=e.rtlTranslate;if(e.enabled){e.previousTranslate=e.translate,e.isHorizontal()?e.translate=i?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var r=e.maxTranslate()-e.minTranslate();(0===r?0:(e.translate-e.minTranslate())/r)!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}}var q=!1;function F(){}const V={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!1,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};function W(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var X={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var r=t.modules[i];r.params&&S(e,r.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var r=t.modules[i],s=e[i]||{};r.on&&t.on&&Object.keys(r.on).forEach((function(e){t.on(e,r.on[e])})),r.create&&r.create.bind(t)(s)}))}},eventsEmitter:{on:function(e,t,i){var r=this;if("function"!=typeof t)return r;var s=i?"unshift":"push";return e.split(" ").forEach((function(e){r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][s](t)})),r},once:function(e,t,i){var r=this;if("function"!=typeof t)return r;function s(){r.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var i=arguments.length,n=new Array(i),a=0;a<i;a++)n[a]=arguments[a];t.apply(r,n)}return s.__emitterProxy=t,r.on(e,s,i)},onAny:function(e,t){var i=this;if("function"!=typeof e)return i;var r=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[r](e),i},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off:function(e,t){var i=this;return i.eventsListeners?(e.split(" ").forEach((function(e){void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach((function(r,s){(r===t||r.__emitterProxy&&r.__emitterProxy===t)&&i.eventsListeners[e].splice(s,1)}))})),i):i},emit:function(){var e,t,i,r=this;if(!r.eventsListeners)return r;for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];"string"==typeof n[0]||Array.isArray(n[0])?(e=n[0],t=n.slice(1,n.length),i=r):(e=n[0].events,t=n[0].data,i=n[0].context||r),t.unshift(i);var o=Array.isArray(e)?e:e.split(" ");return o.forEach((function(e){r.eventsAnyListeners&&r.eventsAnyListeners.length&&r.eventsAnyListeners.forEach((function(r){r.apply(i,[e].concat(t))})),r.eventsListeners&&r.eventsListeners[e]&&r.eventsListeners[e].forEach((function(e){e.apply(i,t)}))})),r}},update:{updateSize:function(){var e,t,i=this,r=i.$el;e=void 0!==i.params.width&&null!==i.params.width?i.params.width:r[0].clientWidth,t=void 0!==i.params.height&&null!==i.params.height?i.params.height:r[0].clientHeight,0===e&&i.isHorizontal()||0===t&&i.isVertical()||(e=e-parseInt(r.css("padding-left")||0,10)-parseInt(r.css("padding-right")||0,10),t=t-parseInt(r.css("padding-top")||0,10)-parseInt(r.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),S(i,{width:e,height:t,size:i.isHorizontal()?e:t}))},updateSlides:function(){var e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function i(e,i){return parseFloat(e.getPropertyValue(t(i))||0)}var r=e.params,s=e.$wrapperEl,n=e.size,a=e.rtlTranslate,o=e.wrongRTL,l=e.virtual&&r.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,c=s.children("."+e.params.slideClass),p=l?e.virtual.slides.length:c.length,u=[],v=[],f=[],h=r.slidesOffsetBefore;"function"==typeof h&&(h=r.slidesOffsetBefore.call(e));var m=r.slidesOffsetAfter;"function"==typeof m&&(m=r.slidesOffsetAfter.call(e));var g=e.snapGrid.length,b=e.slidesGrid.length,w=r.spaceBetween,C=-h,x=0,y=0;if(void 0!==n){var T,E;"string"==typeof w&&w.indexOf("%")>=0&&(w=parseFloat(w.replace("%",""))/100*n),e.virtualSize=-w,a?c.css({marginLeft:"",marginBottom:"",marginTop:""}):c.css({marginRight:"",marginBottom:"",marginTop:""}),r.slidesPerColumn>1&&(T=Math.floor(p/r.slidesPerColumn)===p/e.params.slidesPerColumn?p:Math.ceil(p/r.slidesPerColumn)*r.slidesPerColumn,"auto"!==r.slidesPerView&&"row"===r.slidesPerColumnFill&&(T=Math.max(T,r.slidesPerView*r.slidesPerColumn)));for(var L,M,k,P=r.slidesPerColumn,O=T/P,A=Math.floor(p/r.slidesPerColumn),z=0;z<p;z+=1){E=0;var I=c.eq(z);if(r.slidesPerColumn>1){var R=void 0,B=void 0,D=void 0;if("row"===r.slidesPerColumnFill&&r.slidesPerGroup>1){var _=Math.floor(z/(r.slidesPerGroup*r.slidesPerColumn)),G=z-r.slidesPerColumn*r.slidesPerGroup*_,j=0===_?r.slidesPerGroup:Math.min(Math.ceil((p-_*P*r.slidesPerGroup)/P),r.slidesPerGroup);R=(B=G-(D=Math.floor(G/j))*j+_*r.slidesPerGroup)+D*T/P,I.css({"-webkit-box-ordinal-group":R,"-moz-box-ordinal-group":R,"-ms-flex-order":R,"-webkit-order":R,order:R})}else"column"===r.slidesPerColumnFill?(D=z-(B=Math.floor(z/P))*P,(B>A||B===A&&D===P-1)&&(D+=1)>=P&&(D=0,B+=1)):B=z-(D=Math.floor(z/O))*O;I.css(t("margin-top"),0!==D?r.spaceBetween&&r.spaceBetween+"px":"")}if("none"!==I.css("display")){if("auto"===r.slidesPerView){var $=getComputedStyle(I[0]),N=I[0].style.transform,U=I[0].style.webkitTransform;if(N&&(I[0].style.transform="none"),U&&(I[0].style.webkitTransform="none"),r.roundLengths)E=e.isHorizontal()?I.outerWidth(!0):I.outerHeight(!0);else{var H=i($,"width"),q=i($,"padding-left"),F=i($,"padding-right"),V=i($,"margin-left"),W=i($,"margin-right"),X=$.getPropertyValue("box-sizing");if(X&&"border-box"===X)E=H+V+W;else{var Y=I[0],K=Y.clientWidth;E=H+q+F+V+W+(Y.offsetWidth-K)}}N&&(I[0].style.transform=N),U&&(I[0].style.webkitTransform=U),r.roundLengths&&(E=Math.floor(E))}else E=(n-(r.slidesPerView-1)*w)/r.slidesPerView,r.roundLengths&&(E=Math.floor(E)),c[z]&&(c[z].style[t("width")]=E+"px");c[z]&&(c[z].swiperSlideSize=E),f.push(E),r.centeredSlides?(C=C+E/2+x/2+w,0===x&&0!==z&&(C=C-n/2-w),0===z&&(C=C-n/2-w),Math.abs(C)<.001&&(C=0),r.roundLengths&&(C=Math.floor(C)),y%r.slidesPerGroup==0&&u.push(C),v.push(C)):(r.roundLengths&&(C=Math.floor(C)),(y-Math.min(e.params.slidesPerGroupSkip,y))%e.params.slidesPerGroup==0&&u.push(C),v.push(C),C=C+E+w),e.virtualSize+=E+w,x=E,y+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+m,a&&o&&("slide"===r.effect||"coverflow"===r.effect)&&s.css({width:e.virtualSize+r.spaceBetween+"px"}),r.setWrapperSize&&s.css(((M={})[t("width")]=e.virtualSize+r.spaceBetween+"px",M)),r.slidesPerColumn>1&&(e.virtualSize=(E+r.spaceBetween)*T,e.virtualSize=Math.ceil(e.virtualSize/r.slidesPerColumn)-r.spaceBetween,s.css(((k={})[t("width")]=e.virtualSize+r.spaceBetween+"px",k)),r.centeredSlides)){L=[];for(var Q=0;Q<u.length;Q+=1){var J=u[Q];r.roundLengths&&(J=Math.floor(J)),u[Q]<e.virtualSize+u[0]&&L.push(J)}u=L}if(!r.centeredSlides){L=[];for(var Z=0;Z<u.length;Z+=1){var ee=u[Z];r.roundLengths&&(ee=Math.floor(ee)),u[Z]<=e.virtualSize-n&&L.push(ee)}u=L,Math.floor(e.virtualSize-n)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-n)}if(0===u.length&&(u=[0]),0!==r.spaceBetween){var te,ie=e.isHorizontal()&&a?"marginLeft":t("marginRight");c.filter((function(e,t){return!r.cssMode||t!==c.length-1})).css(((te={})[ie]=w+"px",te))}if(r.centeredSlides&&r.centeredSlidesBounds){var re=0;f.forEach((function(e){re+=e+(r.spaceBetween?r.spaceBetween:0)}));var se=(re-=r.spaceBetween)-n;u=u.map((function(e){return e<0?-h:e>se?se+m:e}))}if(r.centerInsufficientSlides){var ne=0;if(f.forEach((function(e){ne+=e+(r.spaceBetween?r.spaceBetween:0)})),(ne-=r.spaceBetween)<n){var ae=(n-ne)/2;u.forEach((function(e,t){u[t]=e-ae})),v.forEach((function(e,t){v[t]=e+ae}))}}S(e,{slides:c,snapGrid:u,slidesGrid:v,slidesSizesGrid:f}),p!==d&&e.emit("slidesLengthChange"),u.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),v.length!==b&&e.emit("slidesGridLengthChange"),(r.watchSlidesProgress||r.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i=this,r=[],s=i.virtual&&i.params.virtual.enabled,n=0;"number"==typeof e?i.setTransition(e):!0===e&&i.setTransition(i.params.speed);var a=function(e){return s?i.slides.filter((function(t){return parseInt(t.getAttribute("data-swiper-slide-index"),10)===e}))[0]:i.slides.eq(e)[0]};if("auto"!==i.params.slidesPerView&&i.params.slidesPerView>1)if(i.params.centeredSlides)i.visibleSlides.each((function(e){r.push(e)}));else for(t=0;t<Math.ceil(i.params.slidesPerView);t+=1){var o=i.activeIndex+t;if(o>i.slides.length&&!s)break;r.push(a(o))}else r.push(a(i.activeIndex));for(t=0;t<r.length;t+=1)if(void 0!==r[t]){var l=r[t].offsetHeight;n=l>n?l:n}n&&i.$wrapperEl.css("height",n+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,i=t.params,r=t.slides,s=t.rtlTranslate;if(0!==r.length){void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();var n=-e;s&&(n=e),r.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var a=0;a<r.length;a+=1){var o=r[a],l=(n+(i.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight){var d=-(n-o.swiperSlideOffset),c=d+t.slidesSizesGrid[a];(d>=0&&d<t.size-1||c>1&&c<=t.size||d<=0&&c>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(a),r.eq(a).addClass(i.slideVisibleClass))}o.progress=s?-l:l}t.visibleSlides=w(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}var r=t.params,s=t.maxTranslate()-t.minTranslate(),n=t.progress,a=t.isBeginning,o=t.isEnd,l=a,d=o;0===s?(n=0,a=!0,o=!0):(a=(n=(e-t.minTranslate())/s)<=0,o=n>=1),S(t,{progress:n,isBeginning:a,isEnd:o}),(r.watchSlidesProgress||r.watchSlidesVisibility||r.centeredSlides&&r.autoHeight)&&t.updateSlidesProgress(e),a&&!l&&t.emit("reachBeginning toEdge"),o&&!d&&t.emit("reachEnd toEdge"),(l&&!a||d&&!o)&&t.emit("fromEdge"),t.emit("progress",n)},updateSlidesClasses:function(){var e,t=this,i=t.slides,r=t.params,s=t.$wrapperEl,n=t.activeIndex,a=t.realIndex,o=t.virtual&&r.virtual.enabled;i.removeClass(r.slideActiveClass+" "+r.slideNextClass+" "+r.slidePrevClass+" "+r.slideDuplicateActiveClass+" "+r.slideDuplicateNextClass+" "+r.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+r.slideClass+'[data-swiper-slide-index="'+n+'"]'):i.eq(n)).addClass(r.slideActiveClass),r.loop&&(e.hasClass(r.slideDuplicateClass)?s.children("."+r.slideClass+":not(."+r.slideDuplicateClass+')[data-swiper-slide-index="'+a+'"]').addClass(r.slideDuplicateActiveClass):s.children("."+r.slideClass+"."+r.slideDuplicateClass+'[data-swiper-slide-index="'+a+'"]').addClass(r.slideDuplicateActiveClass));var l=e.nextAll("."+r.slideClass).eq(0).addClass(r.slideNextClass);r.loop&&0===l.length&&(l=i.eq(0)).addClass(r.slideNextClass);var d=e.prevAll("."+r.slideClass).eq(0).addClass(r.slidePrevClass);r.loop&&0===d.length&&(d=i.eq(-1)).addClass(r.slidePrevClass),r.loop&&(l.hasClass(r.slideDuplicateClass)?s.children("."+r.slideClass+":not(."+r.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicateNextClass):s.children("."+r.slideClass+"."+r.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicateNextClass),d.hasClass(r.slideDuplicateClass)?s.children("."+r.slideClass+":not(."+r.slideDuplicateClass+')[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicatePrevClass):s.children("."+r.slideClass+"."+r.slideDuplicateClass+'[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,i=this,r=i.rtlTranslate?i.translate:-i.translate,s=i.slidesGrid,n=i.snapGrid,a=i.params,o=i.activeIndex,l=i.realIndex,d=i.snapIndex,c=e;if(void 0===c){for(var p=0;p<s.length;p+=1)void 0!==s[p+1]?r>=s[p]&&r<s[p+1]-(s[p+1]-s[p])/2?c=p:r>=s[p]&&r<s[p+1]&&(c=p+1):r>=s[p]&&(c=p);a.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}if(n.indexOf(r)>=0)t=n.indexOf(r);else{var u=Math.min(a.slidesPerGroupSkip,c);t=u+Math.floor((c-u)/a.slidesPerGroup)}if(t>=n.length&&(t=n.length-1),c!==o){var v=parseInt(i.slides.eq(c).attr("data-swiper-slide-index")||c,10);S(i,{snapIndex:t,realIndex:v,previousIndex:o,activeIndex:c}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),l!==v&&i.emit("realIndexChange"),(i.initialized||i.params.runCallbacksOnInit)&&i.emit("slideChange")}else t!==d&&(i.snapIndex=t,i.emit("snapIndexChange"))},updateClickedSlide:function(e){var t,i=this,r=i.params,s=w(e.target).closest("."+r.slideClass)[0],n=!1;if(s)for(var a=0;a<i.slides.length;a+=1)if(i.slides[a]===s){n=!0,t=a;break}if(!s||!n)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=s,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(w(s).attr("data-swiper-slide-index"),10):i.clickedIndex=t,r.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this,i=t.params,r=t.rtlTranslate,s=t.translate,n=t.$wrapperEl;if(i.virtualTranslate)return r?-s:s;if(i.cssMode)return s;var o=function(e,t){void 0===t&&(t="x");var i,r,s,n=a(),o=function(e){var t,i=a();return i.getComputedStyle&&(t=i.getComputedStyle(e,null)),!t&&e.currentStyle&&(t=e.currentStyle),t||(t=e.style),t}(e);return n.WebKitCSSMatrix?((r=o.transform||o.webkitTransform).split(",").length>6&&(r=r.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),s=new n.WebKitCSSMatrix("none"===r?"":r)):i=(s=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(r=n.WebKitCSSMatrix?s.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(r=n.WebKitCSSMatrix?s.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}(n[0],e);return r&&(o=-o),o||0},setTranslate:function(e,t){var i=this,r=i.rtlTranslate,s=i.params,n=i.$wrapperEl,a=i.wrapperEl,o=i.progress,l=0,d=0;i.isHorizontal()?l=r?-e:e:d=e,s.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),s.cssMode?a[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-d:s.virtualTranslate||n.transform("translate3d("+l+"px, "+d+"px, 0px)"),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:d;var c=i.maxTranslate()-i.minTranslate();(0===c?0:(e-i.minTranslate())/c)!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,r,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===r&&(r=!0);var n=this,a=n.params,o=n.wrapperEl;if(n.animating&&a.preventInteractionOnTransition)return!1;var l,d=n.minTranslate(),c=n.maxTranslate();if(l=r&&e>d?d:r&&e<c?c:e,n.updateProgress(l),a.cssMode){var p,u=n.isHorizontal();return 0===t?o[u?"scrollLeft":"scrollTop"]=-l:o.scrollTo?o.scrollTo(((p={})[u?"left":"top"]=-l,p.behavior="smooth",p)):o[u?"scrollLeft":"scrollTop"]=-l,!0}return 0===t?(n.setTransition(0),n.setTranslate(l),i&&(n.emit("beforeTransitionStart",t,s),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(l),i&&(n.emit("beforeTransitionStart",t,s),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,i&&n.emit("transitionEnd"))}),n.$wrapperEl[0].addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){var i=this;i.params.cssMode||i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this,r=i.activeIndex,s=i.params,n=i.previousIndex;if(!s.cssMode){s.autoHeight&&i.updateAutoHeight();var a=t;if(a||(a=r>n?"next":r<n?"prev":"reset"),i.emit("transitionStart"),e&&r!==n){if("reset"===a)return void i.emit("slideResetTransitionStart");i.emit("slideChangeTransitionStart"),"next"===a?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this,r=i.activeIndex,s=i.previousIndex,n=i.params;if(i.animating=!1,!n.cssMode){i.setTransition(0);var a=t;if(a||(a=r>s?"next":r<s?"prev":"reset"),i.emit("transitionEnd"),e&&r!==s){if("reset"===a)return void i.emit("slideResetTransitionEnd");i.emit("slideChangeTransitionEnd"),"next"===a?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")}}}},slide:{slideTo:function(e,t,i,r,s){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),"number"!=typeof e&&"string"!=typeof e)throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. ["+typeof e+"] given.");if("string"==typeof e){var n=parseInt(e,10);if(!isFinite(n))throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. ["+e+"] given.");e=n}var a=this,o=e;o<0&&(o=0);var l=a.params,d=a.snapGrid,c=a.slidesGrid,p=a.previousIndex,u=a.activeIndex,v=a.rtlTranslate,f=a.wrapperEl,h=a.enabled;if(a.animating&&l.preventInteractionOnTransition||!h&&!r&&!s)return!1;var m=Math.min(a.params.slidesPerGroupSkip,o),g=m+Math.floor((o-m)/a.params.slidesPerGroup);g>=d.length&&(g=d.length-1),(u||l.initialSlide||0)===(p||0)&&i&&a.emit("beforeSlideChangeStart");var b,w=-d[g];if(a.updateProgress(w),l.normalizeSlideIndex)for(var C=0;C<c.length;C+=1){var x=-Math.floor(100*w),y=Math.floor(100*c[C]),T=Math.floor(100*c[C+1]);void 0!==c[C+1]?x>=y&&x<T-(T-y)/2?o=C:x>=y&&x<T&&(o=C+1):x>=y&&(o=C)}if(a.initialized&&o!==u){if(!a.allowSlideNext&&w<a.translate&&w<a.minTranslate())return!1;if(!a.allowSlidePrev&&w>a.translate&&w>a.maxTranslate()&&(u||0)!==o)return!1}if(b=o>u?"next":o<u?"prev":"reset",v&&-w===a.translate||!v&&w===a.translate)return a.updateActiveIndex(o),l.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==l.effect&&a.setTranslate(w),"reset"!==b&&(a.transitionStart(i,b),a.transitionEnd(i,b)),!1;if(l.cssMode){var S,E=a.isHorizontal(),L=-w;return v&&(L=f.scrollWidth-f.offsetWidth-L),0===t?f[E?"scrollLeft":"scrollTop"]=L:f.scrollTo?f.scrollTo(((S={})[E?"left":"top"]=L,S.behavior="smooth",S)):f[E?"scrollLeft":"scrollTop"]=L,!0}return 0===t?(a.setTransition(0),a.setTranslate(w),a.updateActiveIndex(o),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,r),a.transitionStart(i,b),a.transitionEnd(i,b)):(a.setTransition(t),a.setTranslate(w),a.updateActiveIndex(o),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,r),a.transitionStart(i,b),a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(i,b))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var s=this,n=e;return s.params.loop&&(n+=s.loopedSlides),s.slideTo(n,t,i,r)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var r=this,s=r.params,n=r.animating;if(!r.enabled)return r;var a=r.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(n&&s.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}return r.slideTo(r.activeIndex+a,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var r=this,s=r.params,n=r.animating,a=r.snapGrid,o=r.slidesGrid,l=r.rtlTranslate;if(!r.enabled)return r;if(s.loop){if(n&&s.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,p=d(l?r.translate:-r.translate),u=a.map((function(e){return d(e)})),v=a[u.indexOf(p)-1];return void 0===v&&s.cssMode&&a.forEach((function(e){!v&&p>=e&&(v=e)})),void 0!==v&&(c=o.indexOf(v))<0&&(c=r.activeIndex-1),r.slideTo(c,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,r){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===r&&(r=.5);var s=this,n=s.activeIndex,a=Math.min(s.params.slidesPerGroupSkip,n),o=a+Math.floor((n-a)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){var d=s.snapGrid[o];l-d>(s.snapGrid[o+1]-d)*r&&(n+=s.params.slidesPerGroup)}else{var c=s.snapGrid[o-1];l-c<=(s.snapGrid[o]-c)*r&&(n-=s.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,s.slidesGrid.length-1),s.slideTo(n,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,r=t.$wrapperEl,s="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,n=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(w(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?n<t.loopedSlides-s/2||n>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),n=r.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),C((function(){t.slideTo(n)}))):t.slideTo(n):n>t.slides.length-s?(t.loopFix(),n=r.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),C((function(){t.slideTo(n)}))):t.slideTo(n)}else t.slideTo(n)}},loop:{loopCreate:function(){var e=this,t=s(),i=e.params,r=e.$wrapperEl;r.children("."+i.slideClass+"."+i.slideDuplicateClass).remove();var n=r.children("."+i.slideClass);if(i.loopFillGroupWithBlank){var a=i.slidesPerGroup-n.length%i.slidesPerGroup;if(a!==i.slidesPerGroup){for(var o=0;o<a;o+=1){var l=w(t.createElement("div")).addClass(i.slideClass+" "+i.slideBlankClass);r.append(l)}n=r.children("."+i.slideClass)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=n.length),e.loopedSlides=Math.ceil(parseFloat(i.loopedSlides||i.slidesPerView,10)),e.loopedSlides+=i.loopAdditionalSlides,e.loopedSlides>n.length&&(e.loopedSlides=n.length);var d=[],c=[];n.each((function(t,i){var r=w(t);i<e.loopedSlides&&c.push(t),i<n.length&&i>=n.length-e.loopedSlides&&d.push(t),r.attr("data-swiper-slide-index",i)}));for(var p=0;p<c.length;p+=1)r.append(w(c[p].cloneNode(!0)).addClass(i.slideDuplicateClass));for(var u=d.length-1;u>=0;u-=1)r.prepend(w(d[u].cloneNode(!0)).addClass(i.slideDuplicateClass))},loopFix:function(){var e=this;e.emit("beforeLoopFix");var t,i=e.activeIndex,r=e.slides,s=e.loopedSlides,n=e.allowSlidePrev,a=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d=-o[i]-e.getTranslate();i<s?(t=r.length-3*s+i,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)):i>=r.length-s&&(t=-r.length+i+s,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)),e.allowSlidePrev=n,e.allowSlideNext=a,e.emit("loopFix")},loopDestroy:function(){var e=this,t=e.$wrapperEl,i=e.params,r=e.slides;t.children("."+i.slideClass+"."+i.slideDuplicateClass+",."+i.slideClass+"."+i.slideBlankClass).remove(),r.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){var i=t.el;i.style.cursor="move",i.style.cursor=e?"-webkit-grabbing":"-webkit-grab",i.style.cursor=e?"-moz-grabbin":"-moz-grab",i.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor="")}},manipulation:{appendSlide:function(e){var t=this,i=t.$wrapperEl,r=t.params;if(r.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&i.append(e[s]);else i.append(e);r.loop&&t.loopCreate(),r.observer&&t.support.observer||t.update()},prependSlide:function(e){var t=this,i=t.params,r=t.$wrapperEl,s=t.activeIndex;i.loop&&t.loopDestroy();var n=s+1;if("object"==typeof e&&"length"in e){for(var a=0;a<e.length;a+=1)e[a]&&r.prepend(e[a]);n=s+e.length}else r.prepend(e);i.loop&&t.loopCreate(),i.observer&&t.support.observer||t.update(),t.slideTo(n,0,!1)},addSlide:function(e,t){var i=this,r=i.$wrapperEl,s=i.params,n=i.activeIndex;s.loop&&(n-=i.loopedSlides,i.loopDestroy(),i.slides=r.children("."+s.slideClass));var a=i.slides.length;if(e<=0)i.prependSlide(t);else if(e>=a)i.appendSlide(t);else{for(var o=n>e?n+1:n,l=[],d=a-1;d>=e;d-=1){var c=i.slides.eq(d);c.remove(),l.unshift(c)}if("object"==typeof t&&"length"in t){for(var p=0;p<t.length;p+=1)t[p]&&r.append(t[p]);o=n>e?n+t.length:n}else r.append(t);for(var u=0;u<l.length;u+=1)r.append(l[u]);s.loop&&i.loopCreate(),s.observer&&i.support.observer||i.update(),s.loop?i.slideTo(o+i.loopedSlides,0,!1):i.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,i=t.params,r=t.$wrapperEl,s=t.activeIndex;i.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=r.children("."+i.slideClass));var n,a=s;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)n=e[o],t.slides[n]&&t.slides.eq(n).remove(),n<a&&(a-=1);a=Math.max(a,0)}else n=e,t.slides[n]&&t.slides.eq(n).remove(),n<a&&(a-=1),a=Math.max(a,0);i.loop&&t.loopCreate(),i.observer&&t.support.observer||t.update(),i.loop?t.slideTo(a+t.loopedSlides,0,!1):t.slideTo(a,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=s(),i=e.params,r=e.touchEvents,n=e.el,a=e.wrapperEl,o=e.device,l=e.support;e.onTouchStart=G.bind(e),e.onTouchMove=j.bind(e),e.onTouchEnd=$.bind(e),i.cssMode&&(e.onScroll=H.bind(e)),e.onClick=U.bind(e);var d=!!i.nested;if(!l.touch&&l.pointerEvents)n.addEventListener(r.start,e.onTouchStart,!1),t.addEventListener(r.move,e.onTouchMove,d),t.addEventListener(r.end,e.onTouchEnd,!1);else{if(l.touch){var c=!("touchstart"!==r.start||!l.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};n.addEventListener(r.start,e.onTouchStart,c),n.addEventListener(r.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:d}:d),n.addEventListener(r.end,e.onTouchEnd,c),r.cancel&&n.addEventListener(r.cancel,e.onTouchEnd,c),q||(t.addEventListener("touchstart",F),q=!0)}(i.simulateTouch&&!o.ios&&!o.android||i.simulateTouch&&!l.touch&&o.ios)&&(n.addEventListener("mousedown",e.onTouchStart,!1),t.addEventListener("mousemove",e.onTouchMove,d),t.addEventListener("mouseup",e.onTouchEnd,!1))}(i.preventClicks||i.preventClicksPropagation)&&n.addEventListener("click",e.onClick,!0),i.cssMode&&a.addEventListener("scroll",e.onScroll),i.updateOnWindowResize?e.on(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",N,!0):e.on("observerUpdate",N,!0)},detachEvents:function(){var e=this,t=s(),i=e.params,r=e.touchEvents,n=e.el,a=e.wrapperEl,o=e.device,l=e.support,d=!!i.nested;if(!l.touch&&l.pointerEvents)n.removeEventListener(r.start,e.onTouchStart,!1),t.removeEventListener(r.move,e.onTouchMove,d),t.removeEventListener(r.end,e.onTouchEnd,!1);else{if(l.touch){var c=!("onTouchStart"!==r.start||!l.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};n.removeEventListener(r.start,e.onTouchStart,c),n.removeEventListener(r.move,e.onTouchMove,d),n.removeEventListener(r.end,e.onTouchEnd,c),r.cancel&&n.removeEventListener(r.cancel,e.onTouchEnd,c)}(i.simulateTouch&&!o.ios&&!o.android||i.simulateTouch&&!l.touch&&o.ios)&&(n.removeEventListener("mousedown",e.onTouchStart,!1),t.removeEventListener("mousemove",e.onTouchMove,d),t.removeEventListener("mouseup",e.onTouchEnd,!1))}(i.preventClicks||i.preventClicksPropagation)&&n.removeEventListener("click",e.onClick,!0),i.cssMode&&a.removeEventListener("scroll",e.onScroll),e.off(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",N)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,i=e.initialized,r=e.loopedSlides,s=void 0===r?0:r,n=e.params,a=e.$el,o=n.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o,e.params.breakpointsBase,e.el);if(l&&e.currentBreakpoint!==l){var d=l in o?o[l]:void 0;d&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach((function(e){var t=d[e];void 0!==t&&(d[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}));var c=d||e.originalParams,p=n.slidesPerColumn>1,u=c.slidesPerColumn>1,v=n.enabled;p&&!u?(a.removeClass(n.containerModifierClass+"multirow "+n.containerModifierClass+"multirow-column"),e.emitContainerClasses()):!p&&u&&(a.addClass(n.containerModifierClass+"multirow"),(c.slidesPerColumnFill&&"column"===c.slidesPerColumnFill||!c.slidesPerColumnFill&&"column"===n.slidesPerColumnFill)&&a.addClass(n.containerModifierClass+"multirow-column"),e.emitContainerClasses());var f=c.direction&&c.direction!==n.direction,h=n.loop&&(c.slidesPerView!==n.slidesPerView||f);f&&i&&e.changeDirection(),S(e.params,c);var m=e.params.enabled;S(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),v&&!m?e.disable():!v&&m&&e.enable(),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",c),h&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-s+e.loopedSlides,0,!1)),e.emit("breakpoint",c)}}},getBreakpoint:function(e,t,i){if(void 0===t&&(t="window"),e&&("container"!==t||i)){var r=!1,s=a(),n="window"===t?s.innerHeight:i.clientHeight,o=Object.keys(e).map((function(e){if("string"==typeof e&&0===e.indexOf("@")){var t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));o.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var l=0;l<o.length;l+=1){var d=o[l],c=d.point,p=d.value;"window"===t?s.matchMedia("(min-width: "+p+"px)").matches&&(r=c):p<=i.clientWidth&&(r=c)}return r||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,i=e.isLocked,r=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&r?e.isLocked=r<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,i!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),i&&i!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var e,t,i,r=this,s=r.classNames,n=r.params,a=r.rtl,o=r.$el,l=r.device,d=r.support,c=(e=["initialized",n.direction,{"pointer-events":d.pointerEvents&&!d.touch},{"free-mode":n.freeMode},{autoheight:n.autoHeight},{rtl:a},{multirow:n.slidesPerColumn>1},{"multirow-column":n.slidesPerColumn>1&&"column"===n.slidesPerColumnFill},{android:l.android},{ios:l.ios},{"css-mode":n.cssMode}],t=n.containerModifierClass,i=[],e.forEach((function(e){"object"==typeof e?Object.keys(e).forEach((function(r){e[r]&&i.push(t+r)})):"string"==typeof e&&i.push(t+e)})),i);s.push.apply(s,c),o.addClass([].concat(s).join(" ")),r.emitContainerClasses()},removeClasses:function(){var e=this,t=e.$el,i=e.classNames;t.removeClass(i.join(" ")),e.emitContainerClasses()}},images:{loadImage:function(e,t,i,r,s,n){var o,l=a();function d(){n&&n()}w(e).parent("picture")[0]||e.complete&&s?d():t?((o=new l.Image).onload=d,o.onerror=d,r&&(o.sizes=r),i&&(o.srcset=i),t&&(o.src=t)):d()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var r=e.imagesToLoad[i];e.loadImage(r,r.currentSrc||r.getAttribute("src"),r.srcset||r.getAttribute("srcset"),r.sizes||r.getAttribute("sizes"),!0,t)}}}},Y={},K=function(){function e(){for(var t,i,r=arguments.length,s=new Array(r),n=0;n<r;n++)s[n]=arguments[n];if(1===s.length&&s[0].constructor&&"Object"===Object.prototype.toString.call(s[0]).slice(8,-1)?i=s[0]:(t=s[0],i=s[1]),i||(i={}),i=S({},i),t&&!i.el&&(i.el=t),i.el&&w(i.el).length>1){var a=[];return w(i.el).each((function(t){var r=S({},i,{el:t});a.push(new e(r))})),a}var o=this;o.__swiper__=!0,o.support=A(),o.device=z({userAgent:i.userAgent}),o.browser=I(),o.eventsListeners={},o.eventsAnyListeners=[],void 0===o.modules&&(o.modules={}),Object.keys(o.modules).forEach((function(e){var t=o.modules[e];if(t.params){var r=Object.keys(t.params)[0],s=t.params[r];if("object"!=typeof s||null===s)return;if(["navigation","pagination","scrollbar"].indexOf(r)>=0&&!0===i[r]&&(i[r]={auto:!0}),!(r in i)||!("enabled"in s))return;!0===i[r]&&(i[r]={enabled:!0}),"object"!=typeof i[r]||"enabled"in i[r]||(i[r].enabled=!0),i[r]||(i[r]={enabled:!1})}}));var l,d,c=S({},V);return o.useParams(c),o.params=S({},c,Y,i),o.originalParams=S({},o.params),o.passedParams=S({},i),o.params&&o.params.on&&Object.keys(o.params.on).forEach((function(e){o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),o.$=w,S(o,{enabled:o.params.enabled,el:t,classNames:[],slides:w(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===o.params.direction},isVertical:function(){return"vertical"===o.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEvents:(l=["touchstart","touchmove","touchend","touchcancel"],d=["mousedown","mousemove","mouseup"],o.support.pointerEvents&&(d=["pointerdown","pointermove","pointerup"]),o.touchEventsTouch={start:l[0],move:l[1],end:l[2],cancel:l[3]},o.touchEventsDesktop={start:d[0],move:d[1],end:d[2]},o.support.touch||!o.params.simulateTouch?o.touchEventsTouch:o.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:x(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.useModules(),o.emit("_swiper"),o.params.init&&o.init(),o}var t,i,r=e.prototype;return r.enable=function(){var e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))},r.disable=function(){var e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))},r.setProgress=function(e,t){var i=this;e=Math.min(Math.max(e,0),1);var r=i.minTranslate(),s=(i.maxTranslate()-r)*e+r;i.translateTo(s,void 0===t?0:t),i.updateActiveIndex(),i.updateSlidesClasses()},r.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(" ").filter((function(t){return 0===t.indexOf("swiper-container")||0===t.indexOf(e.params.containerModifierClass)}));e.emit("_containerClasses",t.join(" "))}},r.getSlideClasses=function(e){var t=this;return e.className.split(" ").filter((function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)})).join(" ")},r.emitSlidesClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=[];e.slides.each((function(i){var r=e.getSlideClasses(i);t.push({slideEl:i,classNames:r}),e.emit("_slideClass",i,r)})),e.emit("_slideClasses",t)}},r.slidesPerViewDynamic=function(){var e=this,t=e.params,i=e.slides,r=e.slidesGrid,s=e.size,n=e.activeIndex,a=1;if(t.centeredSlides){for(var o,l=i[n].swiperSlideSize,d=n+1;d<i.length;d+=1)i[d]&&!o&&(a+=1,(l+=i[d].swiperSlideSize)>s&&(o=!0));for(var c=n-1;c>=0;c-=1)i[c]&&!o&&(a+=1,(l+=i[c].swiperSlideSize)>s&&(o=!0))}else for(var p=n+1;p<i.length;p+=1)r[p]-r[n]<s&&(a+=1);return a},r.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,i=e.params;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(r(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||r(),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}function r(){var t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}},r.changeDirection=function(e,t){void 0===t&&(t=!0);var i=this,r=i.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(i.$el.removeClass(""+i.params.containerModifierClass+r).addClass(""+i.params.containerModifierClass+e),i.emitContainerClasses(),i.params.direction=e,i.slides.each((function(t){"vertical"===e?t.style.width="":t.style.height=""})),i.emit("changeDirection"),t&&i.update()),i},r.mount=function(e){var t=this;if(t.mounted)return!0;var i=w(e||t.params.el);if(!(e=i[0]))return!1;e.swiper=t;var r=function(){return"."+(t.params.wrapperClass||"").trim().split(" ").join(".")},n=function(){if(e&&e.shadowRoot&&e.shadowRoot.querySelector){var t=w(e.shadowRoot.querySelector(r()));return t.children=function(e){return i.children(e)},t}return i.children(r())}();if(0===n.length&&t.params.createElements){var a=s().createElement("div");n=w(a),a.className=t.params.wrapperClass,i.append(a),i.children("."+t.params.slideClass).each((function(e){n.append(e)}))}return S(t,{$el:i,el:e,$wrapperEl:n,wrapperEl:n[0],mounted:!0,rtl:"rtl"===e.dir.toLowerCase()||"rtl"===i.css("direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===i.css("direction")),wrongRTL:"-webkit-box"===n.css("display")}),!0},r.init=function(e){var t=this;return t.initialized||!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.attachEvents(),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t},r.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i,r=this,s=r.params,n=r.$el,a=r.$wrapperEl,o=r.slides;return void 0===r.params||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),s.loop&&r.loopDestroy(),t&&(r.removeClasses(),n.removeAttr("style"),a.removeAttr("style"),o&&o.length&&o.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),r.emit("destroy"),Object.keys(r.eventsListeners).forEach((function(e){r.off(e)})),!1!==e&&(r.$el[0].swiper=null,i=r,Object.keys(i).forEach((function(e){try{i[e]=null}catch(e){}try{delete i[e]}catch(e){}}))),r.destroyed=!0),null},e.extendDefaults=function(e){S(Y,e)},e.installModule=function(t){e.prototype.modules||(e.prototype.modules={});var i=t.name||Object.keys(e.prototype.modules).length+"_"+x();e.prototype.modules[i]=t},e.use=function(t){return Array.isArray(t)?(t.forEach((function(t){return e.installModule(t)})),e):(e.installModule(t),e)},t=e,i=[{key:"extendedDefaults",get:function(){return Y}},{key:"defaults",get:function(){return V}}],null&&W(t.prototype,null),i&&W(t,i),e}();Object.keys(X).forEach((function(e){Object.keys(X[e]).forEach((function(t){K.prototype[t]=X[e][t]}))})),K.use([R,_]);const Q=K;function J(){return(J=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e}).apply(this,arguments)}var Z={toggleEl:function(e,t){e[t?"addClass":"removeClass"](this.params.navigation.disabledClass),e[0]&&"BUTTON"===e[0].tagName&&(e[0].disabled=t)},update:function(){var e=this,t=e.params.navigation,i=e.navigation.toggleEl;if(!e.params.loop){var r=e.navigation,s=r.$nextEl,n=r.$prevEl;n&&n.length>0&&(e.isBeginning?i(n,!0):i(n,!1),e.params.watchOverflow&&e.enabled&&n[e.isLocked?"addClass":"removeClass"](t.lockClass)),s&&s.length>0&&(e.isEnd?i(s,!0):i(s,!1),e.params.watchOverflow&&e.enabled&&s[e.isLocked?"addClass":"removeClass"](t.lockClass))}},onPrevClick:function(e){var t=this;e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()},onNextClick:function(e){var t=this;e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()},init:function(){var e,t,i=this,r=i.params.navigation;i.params.navigation=M(i.$el,i.params.navigation,i.params.createElements,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),(r.nextEl||r.prevEl)&&(r.nextEl&&(e=w(r.nextEl),i.params.uniqueNavElements&&"string"==typeof r.nextEl&&e.length>1&&1===i.$el.find(r.nextEl).length&&(e=i.$el.find(r.nextEl))),r.prevEl&&(t=w(r.prevEl),i.params.uniqueNavElements&&"string"==typeof r.prevEl&&t.length>1&&1===i.$el.find(r.prevEl).length&&(t=i.$el.find(r.prevEl))),e&&e.length>0&&e.on("click",i.navigation.onNextClick),t&&t.length>0&&t.on("click",i.navigation.onPrevClick),S(i.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}),i.enabled||(e&&e.addClass(r.lockClass),t&&t.addClass(r.lockClass)))},destroy:function(){var e=this,t=e.navigation,i=t.$nextEl,r=t.$prevEl;i&&i.length&&(i.off("click",e.navigation.onNextClick),i.removeClass(e.params.navigation.disabledClass)),r&&r.length&&(r.off("click",e.navigation.onPrevClick),r.removeClass(e.params.navigation.disabledClass))}};const ee={name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){E(this,{navigation:J({},Z)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},"enable disable":function(e){var t=e.navigation,i=t.$nextEl,r=t.$prevEl;i&&i[e.enabled?"removeClass":"addClass"](e.params.navigation.lockClass),r&&r[e.enabled?"removeClass":"addClass"](e.params.navigation.lockClass)},click:function(e,t){var i=e.navigation,r=i.$nextEl,s=i.$prevEl,n=t.target;if(e.params.navigation.hideOnClick&&!w(n).is(s)&&!w(n).is(r)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===n||e.pagination.el.contains(n)))return;var a;r?a=r.hasClass(e.params.navigation.hiddenClass):s&&(a=s.hasClass(e.params.navigation.hiddenClass)),!0===a?e.emit("navigationShow"):e.emit("navigationHide"),r&&r.toggleClass(e.params.navigation.hiddenClass),s&&s.toggleClass(e.params.navigation.hiddenClass)}}}};function te(){return(te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e}).apply(this,arguments)}var ie={update:function(){var e=this,t=e.rtl,i=e.params.pagination;if(i.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var r,s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,a=e.params.loop?Math.ceil((s-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((r=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>s-1-2*e.loopedSlides&&(r-=s-2*e.loopedSlides),r>a-1&&(r-=a),r<0&&"bullets"!==e.params.paginationType&&(r=a+r)):r=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){var o,l,d,c=e.pagination.bullets;if(i.dynamicBullets&&(e.pagination.bulletSize=c.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),n.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=r-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=r-e.pagination.dynamicBulletIndex,d=((l=o+(Math.min(c.length,i.dynamicMainBullets)-1))+o)/2),c.removeClass(i.bulletActiveClass+" "+i.bulletActiveClass+"-next "+i.bulletActiveClass+"-next-next "+i.bulletActiveClass+"-prev "+i.bulletActiveClass+"-prev-prev "+i.bulletActiveClass+"-main"),n.length>1)c.each((function(e){var t=w(e),s=t.index();s===r&&t.addClass(i.bulletActiveClass),i.dynamicBullets&&(s>=o&&s<=l&&t.addClass(i.bulletActiveClass+"-main"),s===o&&t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),s===l&&t.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))}));else{var p=c.eq(r),u=p.index();if(p.addClass(i.bulletActiveClass),i.dynamicBullets){for(var v=c.eq(o),f=c.eq(l),h=o;h<=l;h+=1)c.eq(h).addClass(i.bulletActiveClass+"-main");if(e.params.loop)if(u>=c.length-i.dynamicMainBullets){for(var m=i.dynamicMainBullets;m>=0;m-=1)c.eq(c.length-m).addClass(i.bulletActiveClass+"-main");c.eq(c.length-i.dynamicMainBullets-1).addClass(i.bulletActiveClass+"-prev")}else v.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),f.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next");else v.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),f.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}}if(i.dynamicBullets){var g=Math.min(c.length,i.dynamicMainBullets+4),b=(e.pagination.bulletSize*g-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,C=t?"right":"left";c.css(e.isHorizontal()?C:"top",b+"px")}}if("fraction"===i.type&&(n.find(L(i.currentClass)).text(i.formatFractionCurrent(r+1)),n.find(L(i.totalClass)).text(i.formatFractionTotal(a))),"progressbar"===i.type){var x;x=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var y=(r+1)/a,T=1,S=1;"horizontal"===x?T=y:S=y,n.find(L(i.progressbarFillClass)).transform("translate3d(0,0,0) scaleX("+T+") scaleY("+S+")").transition(e.params.speed)}"custom"===i.type&&i.renderCustom?(n.html(i.renderCustom(e,r+1,a)),e.emit("paginationRender",n[0])):e.emit("paginationUpdate",n[0]),e.params.watchOverflow&&e.enabled&&n[e.isLocked?"addClass":"removeClass"](i.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el,s="";if("bullets"===t.type){var n=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&!e.params.loop&&n>i&&(n=i);for(var a=0;a<n;a+=1)t.renderBullet?s+=t.renderBullet.call(e,a,t.bulletClass):s+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";r.html(s),e.pagination.bullets=r.find(L(t.bulletClass))}"fraction"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',r.html(s)),"progressbar"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',r.html(s)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e=this;e.params.pagination=M(e.$el,e.params.pagination,e.params.createElements,{el:"swiper-pagination"});var t=e.params.pagination;if(t.el){var i=w(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click",L(t.bulletClass),(function(t){t.preventDefault();var i=w(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),S(e.pagination,{$el:i,el:i[0]}),e.enabled||i.addClass(t.lockClass))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.pagination.$el;i.removeClass(t.hiddenClass),i.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&i.off("click",L(t.bulletClass))}}};const re={name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){E(this,{pagination:te({dynamicBulletIndex:0},ie)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},"enable disable":function(e){var t=e.pagination.$el;t&&t[e.enabled?"removeClass":"addClass"](e.params.pagination.lockClass)},click:function(e,t){var i=t.target;if(e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!w(i).hasClass(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&i===e.navigation.nextEl||e.navigation.prevEl&&i===e.navigation.prevEl))return;!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass)}}}};i(2170);var se=i(1370),ne=i.n(se),ae=new URL(i(6730),i.b),oe=new URL(i(6840),i.b),le=new URL(i(9183),i.b),de=new URL(i(3330),i.b),ce=new URL(i(6953),i.b),pe=new URL(i(6193),i.b),ue=new URL(i(7409),i.b),ve=new URL(i(3724),i.b),fe=new URL(i(4808),i.b),he=new URL(i(6513),i.b),me=new URL(i(2714),i.b),ge=new URL(i(4216),i.b),be=new URL(i(374),i.b),we=new URL(i(7805),i.b),Ce=new URL(i(8796),i.b),xe=new URL(i(7873),i.b),ye=new URL(i(5387),i.b),Te=new URL(i(2953),i.b),Se=new URL(i(32),i.b),Ee=new URL(i(7599),i.b),Le=new URL(i(3127),i.b),Me=new URL(i(6066),i.b),ke=new URL(i(7392),i.b),Pe=new URL(i(2279),i.b),Oe=new URL(i(1899),i.b),Ae=new URL(i(4732),i.b),ze=new URL(i(6711),i.b),Ie=new URL(i(3957),i.b),Re=new URL(i(2574),i.b),Be=new URL(i(6688),i.b),De=new URL(i(7565),i.b),_e=new URL(i(6064),i.b),Ge=new URL(i(6359),i.b),je=new URL(i(7267),i.b),$e=new URL(i(257),i.b),Ne=new URL(i(5521),i.b),Ue=new URL(i(2410),i.b),He=new URL(i(845),i.b),qe=new URL(i(1886),i.b),Fe=new URL(i(7188),i.b),Ve=new URL(i(6885),i.b),We=new URL(i(941),i.b),Xe=new URL(i(4254),i.b),Ye=new URL(i(2751),i.b),Ke=new URL(i(5037),i.b),Qe=new URL(i(8342),i.b),Je=new URL(i(3485),i.b),Ze=new URL(i(9538),i.b),et=new URL(i(2814),i.b),tt=new URL(i(1849),i.b),it=new URL(i(4503),i.b),rt=new URL(i(3090),i.b),st=new URL(i(4998),i.b),nt=new URL(i(5291),i.b),at=new URL(i(4901),i.b),ot=new URL(i(4959),i.b),lt=new URL(i(6141),i.b),dt=new URL(i(9430),i.b),ct=new URL(i(3222),i.b),pt=new URL(i(8566),i.b),ut=new URL(i(3064),i.b),vt=new URL(i(4750),i.b),ft=new URL(i(8169),i.b);ne()(ae),ne()(oe),ne()(le),ne()(de),ne()(ce),ne()(pe),ne()(ue),ne()(ve),ne()(fe),ne()(he),ne()(me),ne()(ge),ne()(be),ne()(we),ne()(Ce),ne()(xe),ne()(ye),ne()(Te),ne()(Se),ne()(Ee),ne()(Le),ne()(Me),ne()(ke),ne()(Pe),ne()(Oe),ne()(Ae),ne()(ze),ne()(Ie),ne()(Re),ne()(Be),ne()(De),ne()(_e),ne()(Ge),ne()(je),ne()($e),ne()(Ne),ne()(Ue),ne()(He),ne()(qe),ne()(Fe),ne()(Ve),ne()(We),ne()(Xe),ne()(Ye),ne()(Ke),ne()(Qe),ne()(Je),ne()(Ze),ne()(et),ne()(tt),ne()(it),ne()(rt),ne()(st),ne()(nt),ne()(at),ne()(ot),ne()(lt),ne()(dt),ne()(ct),ne()(pt),ne()(ut),ne()(vt),ne()(ft),Q.use([ee,re]),new Q(".swiper-container--service",{width:250,spaceBetween:10,centeredSlides:!0}),new Q(".swiper-container--brands",{width:240,spaceBetween:10,centeredSlides:!0,pagination:{el:".swiper-pagination",type:"bullets",clickable:"true"},scrollbar:{el:".swiper-scrollbar"}}),new Q(".swiper-container--type",{width:240,spaceBetween:10,centeredSlides:!0,pagination:{el:".swiper-pagination",type:"bullets",clickable:"true"},scrollbar:{el:".swiper-scrollbar"}}),new Q(".swiper-container--price",{width:260,spaceBetween:40,centeredSlides:!0,pagination:{el:".swiper-pagination",type:"bullets",clickable:"true"},scrollbar:{el:".swiper-scrollbar"}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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c291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Nzci13aW5kb3cvc3NyLXdpbmRvdy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kb203L2RvbTcuZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS91dGlscy9kb20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS91dGlscy9nZXQtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZ2V0LWRldmljZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZ2V0LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL21vZHVsZXMvcmVzaXplL3Jlc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vblRvdWNoU3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25Ub3VjaE1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25Ub3VjaEVuZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vblJlc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vbkNsaWNrLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uU2Nyb2xsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY2hlY2stb3ZlcmZsb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2NvcmUtY2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tb2R1bGFyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzLWVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQXV0b0hlaWdodC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNPZmZzZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVBY3RpdmVJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVDbGlja2VkU2xpZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvZ2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL3NldFRyYW5zbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS9taW5UcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvbWF4VHJhbnNsYXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL3RyYW5zbGF0ZVRvLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vc2V0VHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvblN0YXJ0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNpdGlvbi90cmFuc2l0aW9uRW5kLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVUb0xvb3AuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZU5leHQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVByZXYuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVJlc2V0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVUb0Nsb3Nlc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvQ2xpY2tlZFNsaWRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbG9vcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2xvb3AvbG9vcENyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2xvb3AvbG9vcEZpeC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2xvb3AvbG9vcERlc3Ryb3kuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ncmFiLWN1cnNvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2dyYWItY3Vyc29yL3NldEdyYWJDdXJzb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ncmFiLWN1cnNvci91bnNldEdyYWJDdXJzb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vYXBwZW5kU2xpZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vcHJlcGVuZFNsaWRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL2FkZFNsaWRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL3JlbW92ZVNsaWRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL3JlbW92ZUFsbFNsaWRlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2JyZWFrcG9pbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvYnJlYWtwb2ludHMvc2V0QnJlYWtwb2ludC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2JyZWFrcG9pbnRzL2dldEJyZWFrcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9jbGFzc2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY2xhc3Nlcy9hZGRDbGFzc2VzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY2xhc3Nlcy9yZW1vdmVDbGFzc2VzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL2xvYWRJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2ltYWdlcy9wcmVsb2FkSW1hZ2VzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguaHRtbCIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICBpZiAob3B0aW9ucy5tYXliZU5lZWRRdW90ZXMgJiYgL1tcXHRcXG5cXGZcXHIgXCInPTw+YF0vLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XHJcblx0Ly/QotCw0LHRi1xyXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZXJ2aWNlLWxpc3RfX2xpbmsnKS5mb3JFYWNoKGZ1bmN0aW9uKHRhYnNCdG4pIHtcclxuXHRcdHRhYnNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG5cdFx0XHRjb25zdCBwYXRoID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnBhdGhcclxuXHRcclxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlcnZpY2UtaXRlbScpLmZvckVhY2goZnVuY3Rpb24odGFiQ29udGVudCkge1xyXG5cdFx0XHRcdHRhYkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2VydmljZXMtaXRlbS0tYWN0aXZlJylcclxuXHRcdFx0fSlcclxuXHRcclxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlcnZpY2UtbGlzdF9fbGluaycpLmZvckVhY2goZnVuY3Rpb24odGFiQ29udGVudCkge1xyXG5cdFx0XHRcdHRhYkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2VydmljZS1saXN0X19saW5rLS1hY3RpdmUnKVxyXG5cdFx0XHR9KVxyXG5cdFxyXG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wYXRoPVwiJHtwYXRofVwiXWApLmNsYXNzTGlzdC5hZGQoJ3NlcnZpY2UtbGlzdF9fbGluay0tYWN0aXZlJylcclxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdGFyZ2V0PVwiJHtwYXRofVwiXWApLmNsYXNzTGlzdC5hZGQoJ3NlcnZpY2VzLWl0ZW0tLWFjdGl2ZScpXHJcblx0XHRcdH0pXHJcblx0XHR9KVxyXG5cclxuXHQvLyDQmtC90L7Qv9C60Lgg0J/QvtC/0LDQv1xyXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idXR0b24tanMtb3BlbicpLmZvckVhY2goZnVuY3Rpb24odGFic0J0bikge1xyXG5cdFx0dGFic0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHRcdGxldCBwYXRoID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnBhdGhcclxuXHRcdFx0XHJcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ibG9rLWpzLWFjdGl2ZScpLmZvckVhY2goZnVuY3Rpb24odGFiQ29udGVudCkge1xyXG5cdFx0XHRcdHRhYkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnYnRuLS1hY3RpdmUnLCdidG4tLW1lbnUnKVxyXG5cdFx0XHR9KVxyXG5cdFxyXG5cdFx0XHRsZXQgdGVzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhcmdldD1cIiR7cGF0aH1cIl1gKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0JylcclxuXHRcdFx0XHJcblx0XHRcdGlmICh0ZXN0ID09PSAnc2l4LWJ0bicpIHtcclxuXHRcdFx0XHRsZXQgYWN0aXZlQXNhaWQgPVx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdGFyZ2V0PVwiJHtwYXRofVwiXWApXHJcblx0XHRcdFx0YWN0aXZlQXNhaWQuY2xhc3NMaXN0LmFkZCgnYnRuLS1tZW51JylcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsZXQgYWN0aXZlUG9wdXAgPVx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdGFyZ2V0PVwiJHtwYXRofVwiXWApXHJcblx0XHRcdFx0YWN0aXZlUG9wdXAuY2xhc3NMaXN0LmFkZCgnYnRuLS1hY3RpdmUnKVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cclxuXHRcdH0pXHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY3BzLWpzLWJnJykuZm9yRWFjaChmdW5jdGlvbihjbG9zZUVsZW0pIHtcclxuXHRcdFx0Y2xvc2VFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJsb2stanMtYWN0aXZlJykuZm9yRWFjaChmdW5jdGlvbih0YWJDb250ZW50KSB7XHJcblx0XHRcdFx0XHR0YWJDb250ZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2J0bi0tYWN0aXZlJywnYnRuLS1tZW51JylcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9KVxyXG5cdFx0fSlcclxuXHR9KVxyXG5cclxuXHJcblx0Ly8g0JrQvdC+0L/QutC4INCf0L7QutCw0LfQsNGC0Ywg0LLRgdC1XHJcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlcnZpY2UtYnJhbmRzX19saW5rJykuZm9yRWFjaChmdW5jdGlvbih0YWJzQnRuKSB7XHJcblx0XHR0YWJzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdFx0bGV0IHBhdGggPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQucGF0aFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRsZXQgdGVzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhcmdldD1cIiR7cGF0aH1cIl1gKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0JylcclxuXHRcdFx0XHJcblx0XHRcdGlmICh0ZXN0ID09PSAndGhyZWUtYWxsb3BlbicpIHtcclxuXHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS10YXJnZXQ9XCIke3BhdGh9XCJdYCkuY2xhc3NMaXN0LnRvZ2dsZSgnYWxsLW9wZW4tY29udGVudC0tYWN0aXZlJylcclxuXHRcdFx0XHR0YWJzQnRuLmNsYXNzTGlzdC50b2dnbGUoJ3Fxb28nKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhcmdldD1cIiR7cGF0aH1cIl1gKS5jbGFzc0xpc3QudG9nZ2xlKCdhbGwtb3Blbi0tYWN0aXZlJylcclxuXHRcdFx0XHR0YWJzQnRuLmNsYXNzTGlzdC50b2dnbGUoJ3Fxb28nKVxyXG5cdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHR9KVxyXG5cclxuXHQvLyDQodGB0YvQu9C60Lgg0J/QvtC60LDQt9Cw0YLRjCDQstGB0LVcclxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmF2LW1lbnVfX2xpbmsnKS5mb3JFYWNoKGZ1bmN0aW9uKHRhYnNCdG4pIHtcclxuXHRcdHRhYnNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHJcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXYtbWVudV9fbGluaycpLmZvckVhY2goZnVuY3Rpb24odGFiQ29udGVudCkge1xyXG5cdFx0XHRcdHRhYkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnbmF2LW1lbnVfX2xpbmstLWFjdGl2ZScpXHJcblx0XHRcdH0pXHJcblxyXG5cdFx0XHR0YWJzQnRuLmNsYXNzTGlzdC5hZGQoJ25hdi1tZW51X19saW5rLS1hY3RpdmUnKVxyXG5cdFx0XHR9KVxyXG5cdFx0fSlcclxuXHRcclxufSlcclxuXHRcclxuXHJcblxyXG5cclxuXHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ4MjY6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvKipcbiAqIFNTUiBXaW5kb3cgMy4wLjBcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDIwLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBOb3ZlbWJlciA5LCAyMDIwXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgICByZXR1cm4gKG9iaiAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAnY29uc3RydWN0b3InIGluIG9iaiAmJlxuICAgICAgICBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdCk7XG59XG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHsgdGFyZ2V0ID0ge307IH1cbiAgICBpZiAoc3JjID09PSB2b2lkIDApIHsgc3JjID0ge307IH1cbiAgICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJlxuICAgICAgICAgICAgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxudmFyIHNzckRvY3VtZW50ID0ge1xuICAgIGJvZHk6IHt9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgYWN0aXZlRWxlbWVudDoge1xuICAgICAgICBibHVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIG5vZGVOYW1lOiAnJyxcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIGdldEVsZW1lbnRCeUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgY3JlYXRlRXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRFdmVudDogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnROUzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICBpbXBvcnROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHZhciBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTtcbiAgICBleHRlbmQoZG9jLCBzc3JEb2N1bWVudCk7XG4gICAgcmV0dXJuIGRvYztcbn1cblxudmFyIHNzcldpbmRvdyA9IHtcbiAgICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gICAgbmF2aWdhdG9yOiB7XG4gICAgICAgIHVzZXJBZ2VudDogJycsXG4gICAgfSxcbiAgICBsb2NhdGlvbjoge1xuICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgaG9zdDogJycsXG4gICAgICAgIGhvc3RuYW1lOiAnJyxcbiAgICAgICAgaHJlZjogJycsXG4gICAgICAgIG9yaWdpbjogJycsXG4gICAgICAgIHBhdGhuYW1lOiAnJyxcbiAgICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgICBzZWFyY2g6ICcnLFxuICAgIH0sXG4gICAgaGlzdG9yeToge1xuICAgICAgICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgcHVzaFN0YXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIGdvOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIGJhY2s6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICB9LFxuICAgIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIGdldENvbXB1dGVkU3R5bGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgSW1hZ2U6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBEYXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgc2NyZWVuOiB7fSxcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgbWF0Y2hNZWRpYTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgIH0sXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgICB2YXIgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuICAgIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGV4dGVuZCwgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgc3NyRG9jdW1lbnQsIHNzcldpbmRvdyB9O1xuIiwiLyoqXG4gKiBEb203IDMuMC4wXG4gKiBNaW5pbWFsaXN0aWMgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBET00gbWFuaXB1bGF0aW9uLCB3aXRoIGEgalF1ZXJ5LWNvbXBhdGlibGUgQVBJXG4gKiBodHRwczovL2ZyYW1ld29yazcuaW8vZG9jcy9kb203Lmh0bWxcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogTm92ZW1iZXIgOSwgMjAyMFxuICovXG5pbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbmZ1bmN0aW9uIG1ha2VSZWFjdGl2ZShvYmopIHtcbiAgdmFyIHByb3RvID0gb2JqLl9fcHJvdG9fXztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ19fcHJvdG9fXycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBwcm90bztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICBwcm90by5fX3Byb3RvX18gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgRG9tNyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FycmF5KSB7XG4gIF9pbmhlcml0c0xvb3NlKERvbTcsIF9BcnJheSk7XG5cbiAgZnVuY3Rpb24gRG9tNyhpdGVtcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0FycmF5LmNhbGwuYXBwbHkoX0FycmF5LCBbdGhpc10uY29uY2F0KGl0ZW1zKSkgfHwgdGhpcztcbiAgICBtYWtlUmVhY3RpdmUoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBEb203O1xufSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoQXJyYXkpKTtcblxuZnVuY3Rpb24gYXJyYXlGbGF0KGFycikge1xuICBpZiAoYXJyID09PSB2b2lkIDApIHtcbiAgICBhcnIgPSBbXTtcbiAgfVxuXG4gIHZhciByZXMgPSBbXTtcbiAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgICByZXMucHVzaC5hcHBseShyZXMsIGFycmF5RmxhdChlbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMucHVzaChlbCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFyciwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChhcnIsIGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGFycmF5VW5pcXVlKGFycikge1xuICB2YXIgdW5pcXVlQXJyYXkgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh1bmlxdWVBcnJheS5pbmRleE9mKGFycltpXSkgPT09IC0xKSB1bmlxdWVBcnJheS5wdXNoKGFycltpXSk7XG4gIH1cblxuICByZXR1cm4gdW5pcXVlQXJyYXk7XG59XG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgZnVuY3Rpb24gKG1hdGNoLCBncm91cCkge1xuICAgIHJldHVybiBncm91cC50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcXNhKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIFtzZWxlY3Rvcl07XG4gIH1cblxuICB2YXIgYSA9IFtdO1xuICB2YXIgcmVzID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGEucHVzaChyZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uICQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgYXJyID0gW107XG5cbiAgaWYgKCFjb250ZXh0ICYmIHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfVxuXG4gIGlmICghc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbmV3IERvbTcoYXJyKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGh0bWwgPSBzZWxlY3Rvci50cmltKCk7XG5cbiAgICBpZiAoaHRtbC5pbmRleE9mKCc8JykgPj0gMCAmJiBodG1sLmluZGV4T2YoJz4nKSA+PSAwKSB7XG4gICAgICB2YXIgdG9DcmVhdGUgPSAnZGl2JztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB0b0NyZWF0ZSA9ICd1bCc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dHInKSA9PT0gMCkgdG9DcmVhdGUgPSAndGJvZHknO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRkJykgPT09IDAgfHwgaHRtbC5pbmRleE9mKCc8dGgnKSA9PT0gMCkgdG9DcmVhdGUgPSAndHInO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHRvQ3JlYXRlID0gJ3RhYmxlJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzxvcHRpb24nKSA9PT0gMCkgdG9DcmVhdGUgPSAnc2VsZWN0JztcbiAgICAgIHZhciB0ZW1wUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0b0NyZWF0ZSk7XG4gICAgICB0ZW1wUGFyZW50LmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcFBhcmVudC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFyci5wdXNoKHRlbXBQYXJlbnQuY2hpbGROb2Rlc1tpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyciA9IHFzYShzZWxlY3Rvci50cmltKCksIGNvbnRleHQgfHwgZG9jdW1lbnQpO1xuICAgIH0gLy8gYXJyID0gcXNhKHNlbGVjdG9yLCBkb2N1bWVudCk7XG5cbiAgfSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciA9PT0gd2luZG93IHx8IHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgIGFyci5wdXNoKHNlbGVjdG9yKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdG9yKSkge1xuICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHJldHVybiBzZWxlY3RvcjtcbiAgICBhcnIgPSBzZWxlY3RvcjtcbiAgfVxuXG4gIHJldHVybiBuZXcgRG9tNyhhcnJheVVuaXF1ZShhcnIpKTtcbn1cblxuJC5mbiA9IERvbTcucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBhZGRDbGFzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3Nlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgfSkpO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgdmFyIF9lbCRjbGFzc0xpc3Q7XG5cbiAgICAoX2VsJGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdCkuYWRkLmFwcGx5KF9lbCRjbGFzc0xpc3QsIGNsYXNzTmFtZXMpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBjbGFzc2VzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBfZWwkY2xhc3NMaXN0MjtcblxuICAgIChfZWwkY2xhc3NMaXN0MiA9IGVsLmNsYXNzTGlzdCkucmVtb3ZlLmFwcGx5KF9lbCRjbGFzc0xpc3QyLCBjbGFzc05hbWVzKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcygpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgY2xhc3Nlc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5zcGxpdCgnICcpO1xuICB9KSk7XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBjbGFzc05hbWVzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgZWwuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGFzQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGNsYXNzZXNbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgfSkpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIodGhpcywgZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgICB9KS5sZW5ndGggPiAwO1xuICB9KS5sZW5ndGggPiAwO1xufVxuXG5mdW5jdGlvbiBhdHRyKGF0dHJzLCB2YWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gR2V0IGF0dHJcbiAgICBpZiAodGhpc1swXSkgcmV0dXJuIHRoaXNbMF0uZ2V0QXR0cmlidXRlKGF0dHJzKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IC8vIFNldCBhdHRyc1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIC8vIFN0cmluZ1xuICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0cnMsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0XG4gICAgICBmb3IgKHZhciBhdHRyTmFtZSBpbiBhdHRycykge1xuICAgICAgICB0aGlzW2ldW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF0dHIoYXR0cikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcm9wKHByb3BzLCB2YWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gR2V0IHByb3BcbiAgICBpZiAodGhpc1swXSkgcmV0dXJuIHRoaXNbMF1bcHJvcHNdO1xuICB9IGVsc2Uge1xuICAgIC8vIFNldCBwcm9wc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgIHRoaXNbaV1bcHJvcHNdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPYmplY3RcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICB0aGlzW2ldW3Byb3BOYW1lXSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGRhdGEoa2V5LCB2YWx1ZSkge1xuICB2YXIgZWw7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDsgLy8gR2V0IHZhbHVlXG5cbiAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiBrZXkgaW4gZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkge1xuICAgICAgcmV0dXJuIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGF0YUtleSA9IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtXCIgKyBrZXkpO1xuXG4gICAgaWYgKGRhdGFLZXkpIHtcbiAgICAgIHJldHVybiBkYXRhS2V5O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gLy8gU2V0IHZhbHVlXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBlbCA9IHRoaXNbaV07XG4gICAgaWYgKCFlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlID0ge307XG4gICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGF0YShrZXkpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSkge1xuICAgICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gbnVsbDtcbiAgICAgIGRlbGV0ZSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGFzZXQoKSB7XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBkYXRhc2V0ID0ge307IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBpZiAoZWwuZGF0YXNldCkge1xuICAgIGZvciAodmFyIGRhdGFLZXkgaW4gZWwuZGF0YXNldCkge1xuICAgICAgZGF0YXNldFtkYXRhS2V5XSA9IGVsLmRhdGFzZXRbZGF0YUtleV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuYXR0cmlidXRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIF9hdHRyID0gZWwuYXR0cmlidXRlc1tpXTtcblxuICAgICAgaWYgKF9hdHRyLm5hbWUuaW5kZXhPZignZGF0YS0nKSA+PSAwKSB7XG4gICAgICAgIGRhdGFzZXRbdG9DYW1lbENhc2UoX2F0dHIubmFtZS5zcGxpdCgnZGF0YS0nKVsxXSldID0gX2F0dHIudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGRhdGFzZXQpIHtcbiAgICBpZiAoZGF0YXNldFtrZXldID09PSAnZmFsc2UnKSBkYXRhc2V0W2tleV0gPSBmYWxzZTtlbHNlIGlmIChkYXRhc2V0W2tleV0gPT09ICd0cnVlJykgZGF0YXNldFtrZXldID0gdHJ1ZTtlbHNlIGlmIChwYXJzZUZsb2F0KGRhdGFzZXRba2V5XSkgPT09IGRhdGFzZXRba2V5XSAqIDEpIGRhdGFzZXRba2V5XSAqPSAxO1xuICB9XG5cbiAgcmV0dXJuIGRhdGFzZXQ7XG59XG5cbmZ1bmN0aW9uIHZhbCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGdldCB2YWx1ZVxuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGlmIChlbC5tdWx0aXBsZSAmJiBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLnNlbGVjdGVkT3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YWx1ZXMucHVzaChlbC5zZWxlY3RlZE9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIHJldHVybiBlbC52YWx1ZTtcbiAgfSAvLyBzZXQgdmFsdWVcblxuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGlzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgIHZhciBfZWwgPSB0aGlzW19pXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBfZWwubXVsdGlwbGUgJiYgX2VsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9lbC5vcHRpb25zLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIF9lbC5vcHRpb25zW2pdLnNlbGVjdGVkID0gdmFsdWUuaW5kZXhPZihfZWwub3B0aW9uc1tqXS52YWx1ZSkgPj0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgX2VsLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnZhbCh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbihkdXJhdGlvbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3N0cmluZycgPyBkdXJhdGlvbiArIFwibXNcIiA6IGR1cmF0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG9uKCkge1xuICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICB2YXIgZXZlbnRUeXBlID0gYXJnc1swXSxcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXSxcbiAgICAgIGxpc3RlbmVyID0gYXJnc1syXSxcbiAgICAgIGNhcHR1cmUgPSBhcmdzWzNdO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VHlwZSA9IGFyZ3NbMF07XG4gICAgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgIGNhcHR1cmUgPSBhcmdzWzJdO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlTGl2ZUV2ZW50KGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgaWYgKCF0YXJnZXQpIHJldHVybjtcbiAgICB2YXIgZXZlbnREYXRhID0gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXTtcblxuICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHtcbiAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgIH1cblxuICAgIGlmICgkKHRhcmdldCkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGV2ZW50RGF0YSk7ZWxzZSB7XG4gICAgICB2YXIgX3BhcmVudHMgPSAkKHRhcmdldCkucGFyZW50cygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cblxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBfcGFyZW50cy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICBpZiAoJChfcGFyZW50c1trXSkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseShfcGFyZW50c1trXSwgZXZlbnREYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVFdmVudChlKSB7XG4gICAgdmFyIGV2ZW50RGF0YSA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdIDogW107XG5cbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudERhdGEpO1xuICB9XG5cbiAgdmFyIGV2ZW50cyA9IGV2ZW50VHlwZS5zcGxpdCgnICcpO1xuICB2YXIgajtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKCF0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBldmVudHNbal07XG4gICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVycykgZWwuZG9tN0xpc3RlbmVycyA9IHt9O1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdKSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICBlbC5kb203TGlzdGVuZXJzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlRXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGl2ZSBldmVudHNcbiAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdmFyIF9ldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVycykgZWwuZG9tN0xpdmVMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVyc1tfZXZlbnRdKSBlbC5kb203TGl2ZUxpc3RlbmVyc1tfZXZlbnRdID0gW107XG5cbiAgICAgICAgZWwuZG9tN0xpdmVMaXN0ZW5lcnNbX2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlTGl2ZUV2ZW50XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoX2V2ZW50LCBoYW5kbGVMaXZlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvZmYoKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiksIF9rZXk2ID0gMDsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuXG4gIHZhciBldmVudFR5cGUgPSBhcmdzWzBdLFxuICAgICAgdGFyZ2V0U2VsZWN0b3IgPSBhcmdzWzFdLFxuICAgICAgbGlzdGVuZXIgPSBhcmdzWzJdLFxuICAgICAgY2FwdHVyZSA9IGFyZ3NbM107XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnRUeXBlID0gYXJnc1swXTtcbiAgICBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgY2FwdHVyZSA9IGFyZ3NbMl07XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoIWNhcHR1cmUpIGNhcHR1cmUgPSBmYWxzZTtcbiAgdmFyIGV2ZW50cyA9IGV2ZW50VHlwZS5zcGxpdCgnICcpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGV2ZW50ID0gZXZlbnRzW2ldO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzW2pdO1xuICAgICAgdmFyIGhhbmRsZXJzID0gdm9pZCAwO1xuXG4gICAgICBpZiAoIXRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF07XG4gICAgICB9XG5cbiAgICAgIGlmIChoYW5kbGVycyAmJiBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgayA9IGhhbmRsZXJzLmxlbmd0aCAtIDE7IGsgPj0gMDsgayAtPSAxKSB7XG4gICAgICAgICAgdmFyIGhhbmRsZXIgPSBoYW5kbGVyc1trXTtcblxuICAgICAgICAgIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvbmNlKCkge1xuICB2YXIgZG9tID0gdGhpcztcblxuICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjcpLCBfa2V5NyA9IDA7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gYXJnc1swXSxcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXSxcbiAgICAgIGxpc3RlbmVyID0gYXJnc1syXSxcbiAgICAgIGNhcHR1cmUgPSBhcmdzWzNdO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50TmFtZSA9IGFyZ3NbMF07XG4gICAgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgIGNhcHR1cmUgPSBhcmdzWzJdO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBldmVudEFyZ3MgPSBuZXcgQXJyYXkoX2xlbjgpLCBfa2V5OCA9IDA7IF9rZXk4IDwgX2xlbjg7IF9rZXk4KyspIHtcbiAgICAgIGV2ZW50QXJnc1tfa2V5OF0gPSBhcmd1bWVudHNbX2tleThdO1xuICAgIH1cblxuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50QXJncyk7XG4gICAgZG9tLm9mZihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG5cbiAgICBpZiAob25jZUhhbmRsZXIuZG9tN3Byb3h5KSB7XG4gICAgICBkZWxldGUgb25jZUhhbmRsZXIuZG9tN3Byb3h5O1xuICAgIH1cbiAgfVxuXG4gIG9uY2VIYW5kbGVyLmRvbTdwcm94eSA9IGxpc3RlbmVyO1xuICByZXR1cm4gZG9tLm9uKGV2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOSksIF9rZXk5ID0gMDsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xuICAgIGFyZ3NbX2tleTldID0gYXJndW1lbnRzW19rZXk5XTtcbiAgfVxuXG4gIHZhciBldmVudHMgPSBhcmdzWzBdLnNwbGl0KCcgJyk7XG4gIHZhciBldmVudERhdGEgPSBhcmdzWzFdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGV2ZW50ID0gZXZlbnRzW2ldO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzW2pdO1xuXG4gICAgICBpZiAod2luZG93LkN1c3RvbUV2ZW50KSB7XG4gICAgICAgIHZhciBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgZGV0YWlsOiBldmVudERhdGEsXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBlbC5kb203RXZlbnREYXRhID0gYXJncy5maWx0ZXIoZnVuY3Rpb24gKGRhdGEsIGRhdGFJbmRleCkge1xuICAgICAgICAgIHJldHVybiBkYXRhSW5kZXggPiAwO1xuICAgICAgICB9KTtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICBlbC5kb203RXZlbnREYXRhID0gW107XG4gICAgICAgIGRlbGV0ZSBlbC5kb203RXZlbnREYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGRvbS5vbigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9tLm9uKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHdpZHRoKCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgfVxuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLmNzcygnd2lkdGgnKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb3V0ZXJXaWR0aChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICB2YXIgX3N0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG5cbiAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoICsgcGFyc2VGbG9hdChfc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKSArIHBhcnNlRmxvYXQoX3N0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tbGVmdCcpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoZWlnaHQoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgfVxuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLmNzcygnaGVpZ2h0JykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG91dGVySGVpZ2h0KGluY2x1ZGVNYXJnaW5zKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgIHZhciBfc3R5bGVzMiA9IHRoaXMuc3R5bGVzKCk7XG5cbiAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQoX3N0eWxlczIuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQoX3N0eWxlczIuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWJvdHRvbScpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KCkge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgdmFyIGVsID0gdGhpc1swXTtcbiAgICB2YXIgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgICB2YXIgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gICAgdmFyIHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgICB2YXIgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcCxcbiAgICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGhpZGUoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzaG93KCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICB9XG5cbiAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7XG4gICAgICAvLyBTdGlsbCBub3QgdmlzaWJsZVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHN0eWxlcygpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBpZiAodGhpc1swXSkgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpO1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIGNzcyhwcm9wcywgdmFsdWUpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgaTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyAuY3NzKCd3aWR0aCcpXG4gICAgICBpZiAodGhpc1swXSkgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAuY3NzKHsgd2lkdGg6ICcxMDBweCcgfSlcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGZvciAodmFyIF9wcm9wIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXS5zdHlsZVtfcHJvcF0gPSBwcm9wc1tfcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgIC8vIC5jc3MoJ3dpZHRoJywgJzEwMHB4JylcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdGhpc1tpXS5zdHlsZVtwcm9wc10gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBlYWNoKGNhbGxiYWNrKSB7XG4gIGlmICghY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgIGNhbGxiYWNrLmFwcGx5KGVsLCBbZWwsIGluZGV4XSk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrKSB7XG4gIHZhciByZXN1bHQgPSBhcnJheUZpbHRlcih0aGlzLCBjYWxsYmFjayk7XG4gIHJldHVybiAkKHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGh0bWwoaHRtbCkge1xuICBpZiAodHlwZW9mIGh0bWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLmlubmVySFRNTCA6IG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLmlubmVySFRNTCA9IGh0bWw7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdGV4dCh0ZXh0KSB7XG4gIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0udGV4dENvbnRlbnQudHJpbSgpIDogbnVsbDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGlzKHNlbGVjdG9yKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIGVsID0gdGhpc1swXTtcbiAgdmFyIGNvbXBhcmVXaXRoO1xuICB2YXIgaTtcbiAgaWYgKCFlbCB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZWwubWF0Y2hlcykgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIGlmIChlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGlmIChlbC5tc01hdGNoZXNTZWxlY3RvcikgcmV0dXJuIGVsLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBjb21wYXJlV2l0aCA9ICQoc2VsZWN0b3IpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgPT09IGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGVsID09PSBkb2N1bWVudDtcbiAgfVxuXG4gIGlmIChzZWxlY3RvciA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIGVsID09PSB3aW5kb3c7XG4gIH1cblxuICBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgY29tcGFyZVdpdGggPSBzZWxlY3Rvci5ub2RlVHlwZSA/IFtzZWxlY3Rvcl0gOiBzZWxlY3RvcjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpbmRleCgpIHtcbiAgdmFyIGNoaWxkID0gdGhpc1swXTtcbiAgdmFyIGk7XG5cbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXEoaW5kZXgpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0aGlzO1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4ID4gbGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICB2YXIgcmV0dXJuSW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBpZiAocmV0dXJuSW5kZXggPCAwKSByZXR1cm4gJChbXSk7XG4gICAgcmV0dXJuICQoW3RoaXNbcmV0dXJuSW5kZXhdXSk7XG4gIH1cblxuICByZXR1cm4gJChbdGhpc1tpbmRleF1dKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKCkge1xuICB2YXIgbmV3Q2hpbGQ7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBhcmd1bWVudHMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICBuZXdDaGlsZCA9IGsgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gayA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1trXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgICB3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZCh0ZW1wRGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRUbyhwYXJlbnQpIHtcbiAgJChwYXJlbnQpLmFwcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmQobmV3Q2hpbGQpIHtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIGk7XG4gIHZhciBqO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkO1xuXG4gICAgICBmb3IgKGogPSB0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUodGVtcERpdi5jaGlsZE5vZGVzW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGRbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5wcmVwZW5kKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKHNlbGVjdG9yKSB7XG4gIHZhciBiZWZvcmUgPSAkKHNlbGVjdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYmVmb3JlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYmVmb3JlWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGJlZm9yZVswXSk7XG4gICAgfSBlbHNlIGlmIChiZWZvcmUubGVuZ3RoID4gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBiZWZvcmUubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYmVmb3JlW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBiZWZvcmVbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRBZnRlcihzZWxlY3Rvcikge1xuICB2YXIgYWZ0ZXIgPSAkKHNlbGVjdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYWZ0ZXIubGVuZ3RoID09PSAxKSB7XG4gICAgICBhZnRlclswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBhZnRlclswXS5uZXh0U2libGluZyk7XG4gICAgfSBlbHNlIGlmIChhZnRlci5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFmdGVyLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGFmdGVyW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBhZnRlcltqXS5uZXh0U2libGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQoc2VsZWN0b3IpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nICYmICQodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gJChbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoW10pO1xuICAgIH1cblxuICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykgcmV0dXJuICQoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgcmV0dXJuICQoW10pO1xufVxuXG5mdW5jdGlvbiBuZXh0QWxsKHNlbGVjdG9yKSB7XG4gIHZhciBuZXh0RWxzID0gW107XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiAkKFtdKTtcblxuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgdmFyIF9uZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKF9uZXh0KS5pcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChfbmV4dCk7XG4gICAgfSBlbHNlIG5leHRFbHMucHVzaChfbmV4dCk7XG5cbiAgICBlbCA9IF9uZXh0O1xuICB9XG5cbiAgcmV0dXJuICQobmV4dEVscyk7XG59XG5cbmZ1bmN0aW9uIHByZXYoc2VsZWN0b3IpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICQoZWwucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKFtdKTtcbiAgICB9XG5cbiAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykgcmV0dXJuICQoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICByZXR1cm4gJChbXSk7XG59XG5cbmZ1bmN0aW9uIHByZXZBbGwoc2VsZWN0b3IpIHtcbiAgdmFyIHByZXZFbHMgPSBbXTtcbiAgdmFyIGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuICQoW10pO1xuXG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgdmFyIF9wcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoJChfcHJldikuaXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2goX3ByZXYpO1xuICAgIH0gZWxzZSBwcmV2RWxzLnB1c2goX3ByZXYpO1xuXG4gICAgZWwgPSBfcHJldjtcbiAgfVxuXG4gIHJldHVybiAkKHByZXZFbHMpO1xufVxuXG5mdW5jdGlvbiBzaWJsaW5ncyhzZWxlY3Rvcikge1xuICByZXR1cm4gdGhpcy5uZXh0QWxsKHNlbGVjdG9yKS5hZGQodGhpcy5wcmV2QWxsKHNlbGVjdG9yKSk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudChzZWxlY3Rvcikge1xuICB2YXIgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKHRoaXNbaV0ucGFyZW50Tm9kZSkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKHBhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnRzKHNlbGVjdG9yKSB7XG4gIHZhciBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgX3BhcmVudCA9IHRoaXNbaV0ucGFyZW50Tm9kZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgd2hpbGUgKF9wYXJlbnQpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJChfcGFyZW50KS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaChfcGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaChfcGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgX3BhcmVudCA9IF9wYXJlbnQucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChwYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gY2xvc2VzdChzZWxlY3Rvcikge1xuICB2YXIgY2xvc2VzdCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIGlmICghY2xvc2VzdC5pcyhzZWxlY3RvcikpIHtcbiAgICBjbG9zZXN0ID0gY2xvc2VzdC5wYXJlbnRzKHNlbGVjdG9yKS5lcSgwKTtcbiAgfVxuXG4gIHJldHVybiBjbG9zZXN0O1xufVxuXG5mdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG4gIHZhciBmb3VuZEVsZW1lbnRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgZm91bmQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGZvdW5kRWxlbWVudHMucHVzaChmb3VuZFtqXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQoZm91bmRFbGVtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gIHZhciBjaGlsZHJlbiA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSB0aGlzW2ldLmNoaWxkcmVuO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBjaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yIHx8ICQoY2hpbGROb2Rlc1tqXSkuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGROb2Rlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQoY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUpIHRoaXNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkZXRhY2goKSB7XG4gIHJldHVybiB0aGlzLnJlbW92ZSgpO1xufVxuXG5mdW5jdGlvbiBhZGQoKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuICB2YXIgaTtcbiAgdmFyIGo7XG5cbiAgZm9yICh2YXIgX2xlbjEwID0gYXJndW1lbnRzLmxlbmd0aCwgZWxzID0gbmV3IEFycmF5KF9sZW4xMCksIF9rZXkxMCA9IDA7IF9rZXkxMCA8IF9sZW4xMDsgX2tleTEwKyspIHtcbiAgICBlbHNbX2tleTEwXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciB0b0FkZCA9ICQoZWxzW2ldKTtcblxuICAgIGZvciAoaiA9IDA7IGogPCB0b0FkZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgZG9tLnB1c2godG9BZGRbal0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkb207XG59XG5cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGVsLmNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbC5jaGlsZE5vZGVzW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbC50ZXh0Q29udGVudCA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxUbygpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgbGVmdCA9IGFyZ3NbMF0sXG4gICAgICB0b3AgPSBhcmdzWzFdLFxuICAgICAgZHVyYXRpb24gPSBhcmdzWzJdLFxuICAgICAgZWFzaW5nID0gYXJnc1szXSxcbiAgICAgIGNhbGxiYWNrID0gYXJnc1s0XTtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZWFzaW5nO1xuICAgIGxlZnQgPSBhcmdzWzBdO1xuICAgIHRvcCA9IGFyZ3NbMV07XG4gICAgZHVyYXRpb24gPSBhcmdzWzJdO1xuICAgIGNhbGxiYWNrID0gYXJnc1szXTtcbiAgICBlYXNpbmcgPSBhcmdzWzRdO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICd1bmRlZmluZWQnKSBlYXNpbmcgPSAnc3dpbmcnO1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgdmFyIGVsID0gdGhpcztcbiAgICB2YXIgY3VycmVudFRvcDtcbiAgICB2YXIgY3VycmVudExlZnQ7XG4gICAgdmFyIG1heFRvcDtcbiAgICB2YXIgbWF4TGVmdDtcbiAgICB2YXIgbmV3VG9wO1xuICAgIHZhciBuZXdMZWZ0O1xuICAgIHZhciBzY3JvbGxUb3A7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHZhciBzY3JvbGxMZWZ0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB2YXIgYW5pbWF0ZVRvcCA9IHRvcCA+IDAgfHwgdG9wID09PSAwO1xuICAgIHZhciBhbmltYXRlTGVmdCA9IGxlZnQgPiAwIHx8IGxlZnQgPT09IDA7XG5cbiAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVhc2luZyA9ICdzd2luZyc7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVUb3ApIHtcbiAgICAgIGN1cnJlbnRUb3AgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgY3VycmVudExlZnQgPSBlbC5zY3JvbGxMZWZ0O1xuXG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZHVyYXRpb24pIHJldHVybjtcblxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBtYXhUb3AgPSBlbC5zY3JvbGxIZWlnaHQgLSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdUb3AgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIG1heFRvcCksIDApO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgbWF4TGVmdCA9IGVsLnNjcm9sbFdpZHRoIC0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICBuZXdMZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4obGVmdCwgbWF4TGVmdCksIDApO1xuICAgIH1cblxuICAgIHZhciBzdGFydFRpbWUgPSBudWxsO1xuICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA9PT0gY3VycmVudFRvcCkgYW5pbWF0ZVRvcCA9IGZhbHNlO1xuICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID09PSBjdXJyZW50TGVmdCkgYW5pbWF0ZUxlZnQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlcih0aW1lKSB7XG4gICAgICBpZiAodGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgICAgdmFyIGVhc2VQcm9ncmVzcyA9IGVhc2luZyA9PT0gJ2xpbmVhcicgPyBwcm9ncmVzcyA6IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgICAgdmFyIGRvbmU7XG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgc2Nyb2xsVG9wID0gY3VycmVudFRvcCArIGVhc2VQcm9ncmVzcyAqIChuZXdUb3AgLSBjdXJyZW50VG9wKTtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgc2Nyb2xsTGVmdCA9IGN1cnJlbnRMZWZ0ICsgZWFzZVByb2dyZXNzICogKG5ld0xlZnQgLSBjdXJyZW50TGVmdCk7XG5cbiAgICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA+IGN1cnJlbnRUb3AgJiYgc2Nyb2xsVG9wID49IG5ld1RvcCkge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPCBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA8PSBuZXdUb3ApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPiBjdXJyZW50TGVmdCAmJiBzY3JvbGxMZWZ0ID49IG5ld0xlZnQpIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA8IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPD0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgZWwuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBlbC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICB9XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH0pO1xufSAvLyBzY3JvbGxUb3AodG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjaykge1xuXG5cbmZ1bmN0aW9uIHNjcm9sbFRvcCgpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgdmFyIHRvcCA9IGFyZ3NbMF0sXG4gICAgICBkdXJhdGlvbiA9IGFyZ3NbMV0sXG4gICAgICBlYXNpbmcgPSBhcmdzWzJdLFxuICAgICAgY2FsbGJhY2sgPSBhcmdzWzNdO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdG9wID0gYXJnc1swXTtcbiAgICBkdXJhdGlvbiA9IGFyZ3NbMV07XG4gICAgY2FsbGJhY2sgPSBhcmdzWzJdO1xuICAgIGVhc2luZyA9IGFyZ3NbM107XG4gIH1cblxuICB2YXIgZG9tID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsVG9wO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRvbS5zY3JvbGxUbyh1bmRlZmluZWQsIHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxMZWZ0KCkge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICB2YXIgbGVmdCA9IGFyZ3NbMF0sXG4gICAgICBkdXJhdGlvbiA9IGFyZ3NbMV0sXG4gICAgICBlYXNpbmcgPSBhcmdzWzJdLFxuICAgICAgY2FsbGJhY2sgPSBhcmdzWzNdO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbGVmdCA9IGFyZ3NbMF07XG4gICAgZHVyYXRpb24gPSBhcmdzWzFdO1xuICAgIGNhbGxiYWNrID0gYXJnc1syXTtcbiAgICBlYXNpbmcgPSBhcmdzWzNdO1xuICB9XG5cbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChkb20ubGVuZ3RoID4gMCkgcmV0dXJuIGRvbVswXS5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRvbS5zY3JvbGxUbyhsZWZ0LCB1bmRlZmluZWQsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0ZShpbml0aWFsUHJvcHMsIGluaXRpYWxQYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZWxzID0gdGhpcztcbiAgdmFyIGEgPSB7XG4gICAgcHJvcHM6IE9iamVjdC5hc3NpZ24oe30sIGluaXRpYWxQcm9wcyksXG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHtcbiAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICBlYXNpbmc6ICdzd2luZycgLy8gb3IgJ2xpbmVhcidcblxuICAgICAgLyogQ2FsbGJhY2tzXG4gICAgICBiZWdpbihlbGVtZW50cylcbiAgICAgIGNvbXBsZXRlKGVsZW1lbnRzKVxuICAgICAgcHJvZ3Jlc3MoZWxlbWVudHMsIGNvbXBsZXRlLCByZW1haW5pbmcsIHN0YXJ0LCB0d2VlblZhbHVlKVxuICAgICAgKi9cblxuICAgIH0sIGluaXRpYWxQYXJhbXMpLFxuICAgIGVsZW1lbnRzOiBlbHMsXG4gICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICBxdWU6IFtdLFxuICAgIGVhc2luZ1Byb2dyZXNzOiBmdW5jdGlvbiBlYXNpbmdQcm9ncmVzcyhlYXNpbmcsIHByb2dyZXNzKSB7XG4gICAgICBpZiAoZWFzaW5nID09PSAnc3dpbmcnKSB7XG4gICAgICAgIHJldHVybiAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGVhc2luZyhwcm9ncmVzcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9ncmVzcztcbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICBpZiAoYS5mcmFtZUlkKSB7XG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhLmZyYW1lSWQpO1xuICAgICAgfVxuXG4gICAgICBhLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgYS5lbGVtZW50cy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGVsO1xuICAgICAgICBkZWxldGUgZWxlbWVudC5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgICAgfSk7XG4gICAgICBhLnF1ZSA9IFtdO1xuICAgIH0sXG4gICAgZG9uZTogZnVuY3Rpb24gZG9uZShjb21wbGV0ZSkge1xuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGNvbXBsZXRlKSBjb21wbGV0ZShlbHMpO1xuXG4gICAgICBpZiAoYS5xdWUubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcXVlID0gYS5xdWUuc2hpZnQoKTtcbiAgICAgICAgYS5hbmltYXRlKHF1ZVswXSwgcXVlWzFdKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFuaW1hdGU6IGZ1bmN0aW9uIGFuaW1hdGUocHJvcHMsIHBhcmFtcykge1xuICAgICAgaWYgKGEuYW5pbWF0aW5nKSB7XG4gICAgICAgIGEucXVlLnB1c2goW3Byb3BzLCBwYXJhbXNdKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50cyA9IFtdOyAvLyBEZWZpbmUgJiBDYWNoZSBJbml0aWFscyAmIFVuaXRzXG5cbiAgICAgIGEuZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgIHZhciBpbml0aWFsRnVsbFZhbHVlO1xuICAgICAgICB2YXIgaW5pdGlhbFZhbHVlO1xuICAgICAgICB2YXIgdW5pdDtcbiAgICAgICAgdmFyIGZpbmFsVmFsdWU7XG4gICAgICAgIHZhciBmaW5hbEZ1bGxWYWx1ZTtcbiAgICAgICAgaWYgKCFlbC5kb203QW5pbWF0ZUluc3RhbmNlKSBhLmVsZW1lbnRzW2luZGV4XS5kb203QW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgICAgICAgZWxlbWVudHNbaW5kZXhdID0ge1xuICAgICAgICAgIGNvbnRhaW5lcjogZWxcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICBpbml0aWFsRnVsbFZhbHVlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcCkucmVwbGFjZSgnLCcsICcuJyk7XG4gICAgICAgICAgaW5pdGlhbFZhbHVlID0gcGFyc2VGbG9hdChpbml0aWFsRnVsbFZhbHVlKTtcbiAgICAgICAgICB1bml0ID0gaW5pdGlhbEZ1bGxWYWx1ZS5yZXBsYWNlKGluaXRpYWxWYWx1ZSwgJycpO1xuICAgICAgICAgIGZpbmFsVmFsdWUgPSBwYXJzZUZsb2F0KHByb3BzW3Byb3BdKTtcbiAgICAgICAgICBmaW5hbEZ1bGxWYWx1ZSA9IHByb3BzW3Byb3BdICsgdW5pdDtcbiAgICAgICAgICBlbGVtZW50c1tpbmRleF1bcHJvcF0gPSB7XG4gICAgICAgICAgICBpbml0aWFsRnVsbFZhbHVlOiBpbml0aWFsRnVsbFZhbHVlLFxuICAgICAgICAgICAgaW5pdGlhbFZhbHVlOiBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICB1bml0OiB1bml0LFxuICAgICAgICAgICAgZmluYWxWYWx1ZTogZmluYWxWYWx1ZSxcbiAgICAgICAgICAgIGZpbmFsRnVsbFZhbHVlOiBmaW5hbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZTogaW5pdGlhbFZhbHVlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBzdGFydFRpbWUgPSBudWxsO1xuICAgICAgdmFyIHRpbWU7XG4gICAgICB2YXIgZWxlbWVudHNEb25lID0gMDtcbiAgICAgIHZhciBwcm9wc0RvbmUgPSAwO1xuICAgICAgdmFyIGRvbmU7XG4gICAgICB2YXIgYmVnYW4gPSBmYWxzZTtcbiAgICAgIGEuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHZhciBwcm9ncmVzcztcbiAgICAgICAgdmFyIGVhc2VQcm9ncmVzczsgLy8gbGV0IGVsO1xuXG4gICAgICAgIGlmICghYmVnYW4pIHtcbiAgICAgICAgICBiZWdhbiA9IHRydWU7XG4gICAgICAgICAgaWYgKHBhcmFtcy5iZWdpbikgcGFyYW1zLmJlZ2luKGVscyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3MpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBwYXJhbXMucHJvZ3Jlc3MoZWxzLCBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKSwgc3RhcnRUaW1lICsgcGFyYW1zLmR1cmF0aW9uIC0gdGltZSA8IDAgPyAwIDogc3RhcnRUaW1lICsgcGFyYW1zLmR1cmF0aW9uIC0gdGltZSwgc3RhcnRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgZWwgPSBlbGVtZW50O1xuICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgICAgICAgIGVhc2VQcm9ncmVzcyA9IGEuZWFzaW5nUHJvZ3Jlc3MocGFyYW1zLmVhc2luZywgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgdmFyIF9lbCRwcm9wID0gZWxbcHJvcF0sXG4gICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gX2VsJHByb3AuaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgICAgIGZpbmFsVmFsdWUgPSBfZWwkcHJvcC5maW5hbFZhbHVlLFxuICAgICAgICAgICAgICAgIHVuaXQgPSBfZWwkcHJvcC51bml0O1xuICAgICAgICAgICAgZWxbcHJvcF0uY3VycmVudFZhbHVlID0gaW5pdGlhbFZhbHVlICsgZWFzZVByb2dyZXNzICogKGZpbmFsVmFsdWUgLSBpbml0aWFsVmFsdWUpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IGVsW3Byb3BdLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKGZpbmFsVmFsdWUgPiBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlID49IGZpbmFsVmFsdWUgfHwgZmluYWxWYWx1ZSA8IGluaXRpYWxWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPD0gZmluYWxWYWx1ZSkge1xuICAgICAgICAgICAgICBlbC5jb250YWluZXIuc3R5bGVbcHJvcF0gPSBmaW5hbFZhbHVlICsgdW5pdDtcbiAgICAgICAgICAgICAgcHJvcHNEb25lICs9IDE7XG5cbiAgICAgICAgICAgICAgaWYgKHByb3BzRG9uZSA9PT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVsLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzRG9uZSArPSAxO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzRG9uZSA9PT0gZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgYS5kb25lKHBhcmFtcy5jb21wbGV0ZSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gY3VycmVudFZhbHVlICsgdW5pdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47IC8vIFRoZW4gY2FsbFxuXG4gICAgICAgIGEuZnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIH1cblxuICAgICAgYS5mcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICB9O1xuXG4gIGlmIChhLmVsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBlbHM7XG4gIH1cblxuICB2YXIgYW5pbWF0ZUluc3RhbmNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5lbGVtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGFuaW1hdGVJbnN0YW5jZSA9IGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICB9IGVsc2UgYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuXG4gIGlmICghYW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuXG4gIGlmIChpbml0aWFsUHJvcHMgPT09ICdzdG9wJykge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlLmFuaW1hdGUoYS5wcm9wcywgYS5wYXJhbXMpO1xuICB9XG5cbiAgcmV0dXJuIGVscztcbn1cblxuZnVuY3Rpb24gc3RvcCgpIHtcbiAgdmFyIGVscyA9IHRoaXM7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZWxzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlLnN0b3AoKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIG5vVHJpZ2dlciA9ICdyZXNpemUgc2Nyb2xsJy5zcGxpdCgnICcpO1xuXG5mdW5jdGlvbiBzaG9ydGN1dChuYW1lKSB7XG4gIGZ1bmN0aW9uIGV2ZW50SGFuZGxlcigpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChub1RyaWdnZXIuaW5kZXhPZihuYW1lKSA8IDApIHtcbiAgICAgICAgICBpZiAobmFtZSBpbiB0aGlzW2ldKSB0aGlzW2ldW25hbWVdKCk7ZWxzZSB7XG4gICAgICAgICAgICAkKHRoaXNbaV0pLnRyaWdnZXIobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm9uLmFwcGx5KHRoaXMsIFtuYW1lXS5jb25jYXQoYXJncykpO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50SGFuZGxlcjtcbn1cblxudmFyIGNsaWNrID0gc2hvcnRjdXQoJ2NsaWNrJyk7XG52YXIgYmx1ciA9IHNob3J0Y3V0KCdibHVyJyk7XG52YXIgZm9jdXMgPSBzaG9ydGN1dCgnZm9jdXMnKTtcbnZhciBmb2N1c2luID0gc2hvcnRjdXQoJ2ZvY3VzaW4nKTtcbnZhciBmb2N1c291dCA9IHNob3J0Y3V0KCdmb2N1c291dCcpO1xudmFyIGtleXVwID0gc2hvcnRjdXQoJ2tleXVwJyk7XG52YXIga2V5ZG93biA9IHNob3J0Y3V0KCdrZXlkb3duJyk7XG52YXIga2V5cHJlc3MgPSBzaG9ydGN1dCgna2V5cHJlc3MnKTtcbnZhciBzdWJtaXQgPSBzaG9ydGN1dCgnc3VibWl0Jyk7XG52YXIgY2hhbmdlID0gc2hvcnRjdXQoJ2NoYW5nZScpO1xudmFyIG1vdXNlZG93biA9IHNob3J0Y3V0KCdtb3VzZWRvd24nKTtcbnZhciBtb3VzZW1vdmUgPSBzaG9ydGN1dCgnbW91c2Vtb3ZlJyk7XG52YXIgbW91c2V1cCA9IHNob3J0Y3V0KCdtb3VzZXVwJyk7XG52YXIgbW91c2VlbnRlciA9IHNob3J0Y3V0KCdtb3VzZWVudGVyJyk7XG52YXIgbW91c2VsZWF2ZSA9IHNob3J0Y3V0KCdtb3VzZWxlYXZlJyk7XG52YXIgbW91c2VvdXQgPSBzaG9ydGN1dCgnbW91c2VvdXQnKTtcbnZhciBtb3VzZW92ZXIgPSBzaG9ydGN1dCgnbW91c2VvdmVyJyk7XG52YXIgdG91Y2hzdGFydCA9IHNob3J0Y3V0KCd0b3VjaHN0YXJ0Jyk7XG52YXIgdG91Y2hlbmQgPSBzaG9ydGN1dCgndG91Y2hlbmQnKTtcbnZhciB0b3VjaG1vdmUgPSBzaG9ydGN1dCgndG91Y2htb3ZlJyk7XG52YXIgcmVzaXplID0gc2hvcnRjdXQoJ3Jlc2l6ZScpO1xudmFyIHNjcm9sbCA9IHNob3J0Y3V0KCdzY3JvbGwnKTtcblxuZXhwb3J0IGRlZmF1bHQgJDtcbmV4cG9ydCB7ICQsIGFkZCwgYWRkQ2xhc3MsIGFuaW1hdGUsIGFuaW1hdGlvbkVuZCwgYXBwZW5kLCBhcHBlbmRUbywgYXR0ciwgYmx1ciwgY2hhbmdlLCBjaGlsZHJlbiwgY2xpY2ssIGNsb3Nlc3QsIGNzcywgZGF0YSwgZGF0YXNldCwgZGV0YWNoLCBlYWNoLCBlbXB0eSwgZXEsIGZpbHRlciwgZmluZCwgZm9jdXMsIGZvY3VzaW4sIGZvY3Vzb3V0LCBoYXNDbGFzcywgaGVpZ2h0LCBoaWRlLCBodG1sLCBpbmRleCwgaW5zZXJ0QWZ0ZXIsIGluc2VydEJlZm9yZSwgaXMsIGtleWRvd24sIGtleXByZXNzLCBrZXl1cCwgbW91c2Vkb3duLCBtb3VzZWVudGVyLCBtb3VzZWxlYXZlLCBtb3VzZW1vdmUsIG1vdXNlb3V0LCBtb3VzZW92ZXIsIG1vdXNldXAsIG5leHQsIG5leHRBbGwsIG9mZiwgb2Zmc2V0LCBvbiwgb25jZSwgb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGgsIHBhcmVudCwgcGFyZW50cywgcHJlcGVuZCwgcHJlcGVuZFRvLCBwcmV2LCBwcmV2QWxsLCBwcm9wLCByZW1vdmUsIHJlbW92ZUF0dHIsIHJlbW92ZUNsYXNzLCByZW1vdmVEYXRhLCByZXNpemUsIHNjcm9sbCwgc2Nyb2xsTGVmdCwgc2Nyb2xsVG8sIHNjcm9sbFRvcCwgc2hvdywgc2libGluZ3MsIHN0b3AsIHN0eWxlcywgc3VibWl0LCB0ZXh0LCB0b2dnbGVDbGFzcywgdG91Y2hlbmQsIHRvdWNobW92ZSwgdG91Y2hzdGFydCwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCB0cmFuc2l0aW9uRW5kLCB0cmlnZ2VyLCB2YWwsIHZhbHVlLCB3aWR0aCB9O1xuIiwiaW1wb3J0IHsgJCwgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBoYXNDbGFzcywgdG9nZ2xlQ2xhc3MsIGF0dHIsIHJlbW92ZUF0dHIsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgb24sIG9mZiwgdHJpZ2dlciwgdHJhbnNpdGlvbkVuZCwgb3V0ZXJXaWR0aCwgb3V0ZXJIZWlnaHQsIHN0eWxlcywgb2Zmc2V0LCBjc3MsIGVhY2gsIGh0bWwsIHRleHQsIGlzLCBpbmRleCwgZXEsIGFwcGVuZCwgcHJlcGVuZCwgbmV4dCwgbmV4dEFsbCwgcHJldiwgcHJldkFsbCwgcGFyZW50LCBwYXJlbnRzLCBjbG9zZXN0LCBmaW5kLCBjaGlsZHJlbiwgZmlsdGVyLCByZW1vdmUgfSBmcm9tICdkb203JztcbnZhciBNZXRob2RzID0ge1xuICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcbiAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxuICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gIGF0dHI6IGF0dHIsXG4gIHJlbW92ZUF0dHI6IHJlbW92ZUF0dHIsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICBvbjogb24sXG4gIG9mZjogb2ZmLFxuICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLFxuICBvdXRlcldpZHRoOiBvdXRlcldpZHRoLFxuICBvdXRlckhlaWdodDogb3V0ZXJIZWlnaHQsXG4gIHN0eWxlczogc3R5bGVzLFxuICBvZmZzZXQ6IG9mZnNldCxcbiAgY3NzOiBjc3MsXG4gIGVhY2g6IGVhY2gsXG4gIGh0bWw6IGh0bWwsXG4gIHRleHQ6IHRleHQsXG4gIGlzOiBpcyxcbiAgaW5kZXg6IGluZGV4LFxuICBlcTogZXEsXG4gIGFwcGVuZDogYXBwZW5kLFxuICBwcmVwZW5kOiBwcmVwZW5kLFxuICBuZXh0OiBuZXh0LFxuICBuZXh0QWxsOiBuZXh0QWxsLFxuICBwcmV2OiBwcmV2LFxuICBwcmV2QWxsOiBwcmV2QWxsLFxuICBwYXJlbnQ6IHBhcmVudCxcbiAgcGFyZW50czogcGFyZW50cyxcbiAgY2xvc2VzdDogY2xvc2VzdCxcbiAgZmluZDogZmluZCxcbiAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICBmaWx0ZXI6IGZpbHRlcixcbiAgcmVtb3ZlOiByZW1vdmVcbn07XG5PYmplY3Qua2V5cyhNZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSgkLmZuLCBtZXRob2ROYW1lLCB7XG4gICAgdmFsdWU6IE1ldGhvZHNbbWV0aG9kTmFtZV0sXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSk7XG59KTtcbmV4cG9ydCBkZWZhdWx0ICQ7IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgdmFyIG9iamVjdCA9IG9iajtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkgey8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICBkZWxheSA9IDA7XG4gIH1cblxuICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xufVxuXG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufVxuXG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIHN0eWxlO1xuXG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICB9XG5cbiAgaWYgKCFzdHlsZSAmJiBlbC5jdXJyZW50U3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLmN1cnJlbnRTdHlsZTtcbiAgfVxuXG4gIGlmICghc3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLnN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUoZWwsIGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSAneCc7XG4gIH1cblxuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBtYXRyaXg7XG4gIHZhciBjdXJUcmFuc2Zvcm07XG4gIHZhciB0cmFuc2Zvcm1NYXRyaXg7XG4gIHZhciBjdXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuXG4gIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgY3VyVHJhbnNmb3JtID0gY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLndlYmtpdFRyYW5zZm9ybTtcblxuICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBhLnJlcGxhY2UoJywnLCAnLicpO1xuICAgICAgfSkuam9pbignLCAnKTtcbiAgICB9IC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIFdlYmtpdCBjaG9rZSB3aGVuICdub25lJyBpcyBwYXNzZWQ7IHBhc3NcbiAgICAvLyBlbXB0eSBzdHJpbmcgaW5zdGVhZCBpbiB0aGlzIGNhc2VcblxuXG4gICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgfVxuXG4gIGlmIChheGlzID09PSAneCcpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQxOyAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pOyAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICB9XG5cbiAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDI7IC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7IC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gIH1cblxuICByZXR1cm4gY3VyVHJhbnNmb3JtIHx8IDA7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT09IDEgfHwgbm9kZS5ub2RlVHlwZSA9PT0gMTEpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gIHZhciB0byA9IE9iamVjdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pO1xuICB2YXIgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuXG4gICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsICYmICFpc05vZGUobmV4dFNvdXJjZSkpIHtcbiAgICAgIHZhciBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBub0V4dGVuZC5pbmRleE9mKGtleSkgPCAwO1xuICAgICAgfSk7XG5cbiAgICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4ICs9IDEpIHtcbiAgICAgICAgdmFyIG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuXG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcblxuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG5mdW5jdGlvbiBiaW5kTW9kdWxlTWV0aG9kcyhpbnN0YW5jZSwgb2JqKSB7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KG9ialtrZXldKSkge1xuICAgICAgT2JqZWN0LmtleXMob2JqW2tleV0pLmZvckVhY2goZnVuY3Rpb24gKHN1YktleSkge1xuICAgICAgICBpZiAodHlwZW9mIG9ialtrZXldW3N1YktleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvYmpba2V5XVtzdWJLZXldID0gb2JqW2tleV1bc3ViS2V5XS5iaW5kKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Vba2V5XSA9IG9ialtrZXldO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG5cbiAgcmV0dXJuIFwiLlwiICsgY2xhc3Nlcy50cmltKCkucmVwbGFjZSgvKFtcXC46XFwvXSkvZywgJ1xcXFwkMScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgLnJlcGxhY2UoLyAvZywgJy4nKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCgkY29udGFpbmVyLCBwYXJhbXMsIGNyZWF0ZUVsZW1lbnRzLCBjaGVja1Byb3BzKSB7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG5cbiAgaWYgKGNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgT2JqZWN0LmtleXMoY2hlY2tQcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoIXBhcmFtc1trZXldICYmIHBhcmFtcy5hdXRvID09PSB0cnVlKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2hlY2tQcm9wc1trZXldO1xuICAgICAgICAkY29udGFpbmVyLmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgcGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IHsgZGVsZXRlUHJvcHMsIG5leHRUaWNrLCBub3csIGdldFRyYW5zbGF0ZSwgaXNPYmplY3QsIGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMsIGdldENvbXB1dGVkU3R5bGUsIGNsYXNzZXNUb1NlbGVjdG9yLCBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIH07IiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xudmFyIHN1cHBvcnQ7XG5cbmZ1bmN0aW9uIGNhbGNTdXBwb3J0KCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHJldHVybiB7XG4gICAgdG91Y2g6ICEhKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKSxcbiAgICBwb2ludGVyRXZlbnRzOiAhIXdpbmRvdy5Qb2ludGVyRXZlbnQgJiYgJ21heFRvdWNoUG9pbnRzJyBpbiB3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPj0gMCxcbiAgICBvYnNlcnZlcjogZnVuY3Rpb24gY2hlY2tPYnNlcnZlcigpIHtcbiAgICAgIHJldHVybiAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93IHx8ICdXZWJraXRNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3c7XG4gICAgfSgpLFxuICAgIHBhc3NpdmVMaXN0ZW5lcjogZnVuY3Rpb24gY2hlY2tQYXNzaXZlTGlzdGVuZXIoKSB7XG4gICAgICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlTGlzdGVuZXInLCBudWxsLCBvcHRzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsvLyBObyBzdXBwb3J0XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgfSgpLFxuICAgIGdlc3R1cmVzOiBmdW5jdGlvbiBjaGVja0dlc3R1cmVzKCkge1xuICAgICAgcmV0dXJuICdvbmdlc3R1cmVzdGFydCcgaW4gd2luZG93O1xuICAgIH0oKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRTdXBwb3J0KCkge1xuICBpZiAoIXN1cHBvcnQpIHtcbiAgICBzdXBwb3J0ID0gY2FsY1N1cHBvcnQoKTtcbiAgfVxuXG4gIHJldHVybiBzdXBwb3J0O1xufVxuXG5leHBvcnQgeyBnZXRTdXBwb3J0IH07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0IH0gZnJvbSAnLi9nZXQtc3VwcG9ydCc7XG52YXIgZGV2aWNlO1xuXG5mdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICB1c2VyQWdlbnQgPSBfcmVmLnVzZXJBZ2VudDtcblxuICB2YXIgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICB2YXIgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIHZhciBkZXZpY2UgPSB7XG4gICAgaW9zOiBmYWxzZSxcbiAgICBhbmRyb2lkOiBmYWxzZVxuICB9O1xuICB2YXIgc2NyZWVuV2lkdGggPSB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICB2YXIgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIHZhciBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgdmFyIGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICB2YXIgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIHZhciBpcGhvbmUgPSAhaXBhZCAmJiB1YS5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKTtcbiAgdmFyIHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgdmFyIG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7IC8vIGlQYWRPcyAxMyBmaXhcblxuICB2YXIgaVBhZFNjcmVlbnMgPSBbJzEwMjR4MTM2NicsICcxMzY2eDEwMjQnLCAnODM0eDExOTQnLCAnMTE5NHg4MzQnLCAnODM0eDExMTInLCAnMTExMng4MzQnLCAnNzY4eDEwMjQnLCAnMTAyNHg3NjgnLCAnODIweDExODAnLCAnMTE4MHg4MjAnLCAnODEweDEwODAnLCAnMTA4MHg4MTAnXTtcblxuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKHNjcmVlbldpZHRoICsgXCJ4XCIgKyBzY3JlZW5IZWlnaHQpID49IDApIHtcbiAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgIGlmICghaXBhZCkgaXBhZCA9IFswLCAxLCAnMTNfMF8wJ107XG4gICAgbWFjb3MgPSBmYWxzZTtcbiAgfSAvLyBBbmRyb2lkXG5cblxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gIH1cblxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9IC8vIEV4cG9ydCBvYmplY3RcblxuXG4gIHJldHVybiBkZXZpY2U7XG59XG5cbmZ1bmN0aW9uIGdldERldmljZShvdmVycmlkZXMpIHtcbiAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnJpZGVzID0ge307XG4gIH1cblxuICBpZiAoIWRldmljZSkge1xuICAgIGRldmljZSA9IGNhbGNEZXZpY2Uob3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHJldHVybiBkZXZpY2U7XG59XG5cbmV4cG9ydCB7IGdldERldmljZSB9OyIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xudmFyIGJyb3dzZXI7XG5cbmZ1bmN0aW9uIGNhbGNCcm93c2VyKCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNFZGdlOiAhIXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlL2cpLFxuICAgIGlzU2FmYXJpOiBpc1NhZmFyaSgpLFxuICAgIGlzV2ViVmlldzogLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRCcm93c2VyKCkge1xuICBpZiAoIWJyb3dzZXIpIHtcbiAgICBicm93c2VyID0gY2FsY0Jyb3dzZXIoKTtcbiAgfVxuXG4gIHJldHVybiBicm93c2VyO1xufVxuXG5leHBvcnQgeyBnZXRCcm93c2VyIH07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbnZhciBzdXBwb3J0c1Jlc2l6ZU9ic2VydmVyID0gZnVuY3Rpb24gc3VwcG9ydHNSZXNpemVPYnNlcnZlcigpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdy5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdyZXNpemUnLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICByZXNpemU6IHtcbiAgICAgICAgb2JzZXJ2ZXI6IG51bGwsXG4gICAgICAgIGNyZWF0ZU9ic2VydmVyOiBmdW5jdGlvbiBjcmVhdGVPYnNlcnZlcigpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIucmVzaXplLm9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBzd2lwZXIud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gc3dpcGVyLmhlaWdodDtcbiAgICAgICAgICAgIHZhciBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgdmFyIG5ld0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgICB2YXIgY29udGVudEJveFNpemUgPSBfcmVmLmNvbnRlbnRCb3hTaXplLFxuICAgICAgICAgICAgICAgICAgY29udGVudFJlY3QgPSBfcmVmLmNvbnRlbnRSZWN0LFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQ7XG4gICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgICAgICAgbmV3V2lkdGggPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LndpZHRoIDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5pbmxpbmVTaXplO1xuICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3dpcGVyLnJlc2l6ZS5vYnNlcnZlci5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZU9ic2VydmVyOiBmdW5jdGlvbiByZW1vdmVPYnNlcnZlcigpIHtcbiAgICAgICAgICBpZiAoc3dpcGVyLnJlc2l6ZS5vYnNlcnZlciAmJiBzd2lwZXIucmVzaXplLm9ic2VydmVyLnVub2JzZXJ2ZSAmJiBzd2lwZXIuZWwpIHtcbiAgICAgICAgICAgIHN3aXBlci5yZXNpemUub2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICAgICAgICBzd2lwZXIucmVzaXplLm9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdyZXNpemUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiBzdXBwb3J0c1Jlc2l6ZU9ic2VydmVyKCkpIHtcbiAgICAgICAgc3dpcGVyLnJlc2l6ZS5jcmVhdGVPYnNlcnZlcigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEVtaXQgcmVzaXplXG5cblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7IC8vIEVtaXQgb3JpZW50YXRpb25jaGFuZ2VcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICAgIHN3aXBlci5yZXNpemUucmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIE9ic2VydmVyID0ge1xuICBhdHRhY2g6IGZ1bmN0aW9uIGF0dGFjaCh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXJGdW5jKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGFcbiAgICB9KTtcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIgfHwgIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICB2YXIgY29udGFpbmVyUGFyZW50cyA9IHN3aXBlci4kZWwucGFyZW50cygpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vIE9ic2VydmUgY29udGFpbmVyXG5cblxuICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiRlbFswXSwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7IC8vIE9ic2VydmUgd3JhcHBlclxuXG4gICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJHdyYXBwZXJFbFswXSwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycyA9IFtdO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2JzZXJ2ZXInLFxuICBwYXJhbXM6IHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIG9ic2VydmVyOiBfZXh0ZW5kcyh7fSwgT2JzZXJ2ZXIsIHtcbiAgICAgICAgb2JzZXJ2ZXJzOiBbXVxuICAgICAgfSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm9ic2VydmVyLmluaXQoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufTsiLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3cgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7IC8vIE1vZGlmaWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTQ1MjA1NTQvY3VzdG9tLWVsZW1lbnQtZ2V0cm9vdG5vZGUtY2xvc2VzdC1mdW5jdGlvbi1jcm9zc2luZy1tdWx0aXBsZS1wYXJlbnQtc2hhZG93ZFxuXG5mdW5jdGlvbiBjbG9zZXN0RWxlbWVudChzZWxlY3RvciwgYmFzZSkge1xuICBpZiAoYmFzZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZSA9IHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBfX2Nsb3Nlc3RGcm9tKGVsKSB7XG4gICAgaWYgKCFlbCB8fCBlbCA9PT0gZ2V0RG9jdW1lbnQoKSB8fCBlbCA9PT0gZ2V0V2luZG93KCkpIHJldHVybiBudWxsO1xuICAgIGlmIChlbC5hc3NpZ25lZFNsb3QpIGVsID0gZWwuYXNzaWduZWRTbG90O1xuICAgIHZhciBmb3VuZCA9IGVsLmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICAgIHJldHVybiBmb3VuZCB8fCBfX2Nsb3Nlc3RGcm9tKGVsLmdldFJvb3ROb2RlKCkuaG9zdCk7XG4gIH1cblxuICByZXR1cm4gX19jbG9zZXN0RnJvbShiYXNlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB0b3VjaGVzID0gc3dpcGVyLnRvdWNoZXMsXG4gICAgICBlbmFibGVkID0gc3dpcGVyLmVuYWJsZWQ7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICB2YXIgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG5cbiAgaWYgKHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ3dyYXBwZXInKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChzd2lwZXIud3JhcHBlckVsKS5sZW5ndGgpIHJldHVybjtcbiAgfVxuXG4gIGRhdGEuaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hzdGFydCc7XG4gIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47IC8vIGNoYW5nZSB0YXJnZXQgZWwgZm9yIHNoYWRvdyByb290IGNvbXBvbmVudFxuXG4gIHZhciBzd2lwaW5nQ2xhc3NIYXNWYWx1ZSA9ICEhcGFyYW1zLm5vU3dpcGluZ0NsYXNzICYmIHBhcmFtcy5ub1N3aXBpbmdDbGFzcyAhPT0gJyc7XG5cbiAgaWYgKHN3aXBpbmdDbGFzc0hhc1ZhbHVlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgZXZlbnQucGF0aCAmJiBldmVudC5wYXRoWzBdKSB7XG4gICAgJHRhcmdldEVsID0gJChldmVudC5wYXRoWzBdKTtcbiAgfVxuXG4gIHZhciBub1N3aXBpbmdTZWxlY3RvciA9IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA/IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA6IFwiLlwiICsgcGFyYW1zLm5vU3dpcGluZ0NsYXNzO1xuICB2YXIgaXNUYXJnZXRTaGFkb3cgPSAhIShlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290KTsgLy8gdXNlIGNsb3Nlc3RFbGVtZW50IGZvciBzaGFkb3cgcm9vdCBlbGVtZW50IHRvIGdldCB0aGUgYWN0dWFsIGNsb3Nlc3QgZm9yIG5lc3RlZCBzaGFkb3cgcm9vdCBlbGVtZW50XG5cbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgKGlzVGFyZ2V0U2hhZG93ID8gY2xvc2VzdEVsZW1lbnQobm9Td2lwaW5nU2VsZWN0b3IsIGUudGFyZ2V0KSA6ICR0YXJnZXRFbC5jbG9zZXN0KG5vU3dpcGluZ1NlbGVjdG9yKVswXSkpIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoISR0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpWzBdKSByZXR1cm47XG4gIH1cblxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICB2YXIgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgdmFyIHN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7IC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIHZhciBlZGdlU3dpcGVEZXRlY3Rpb24gPSBwYXJhbXMuZWRnZVN3aXBlRGV0ZWN0aW9uIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVEZXRlY3Rpb247XG4gIHZhciBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7XG5cbiAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiAmJiAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LmlubmVyV2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiA9PT0gJ3ByZXZlbnQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgZXh0ZW5kKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuXG4gIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgaWYgKCR0YXJnZXRFbC5pcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcblxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gJHRhcmdldEVsWzBdKSB7XG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG5cbiAgICB2YXIgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcblxuICAgIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhJHRhcmdldEVsWzBdLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn0iLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgbm93IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB0b3VjaGVzID0gc3dpcGVyLnRvdWNoZXMsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgZW5hYmxlZCA9IHN3aXBlci5lbmFibGVkO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgdmFyIGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGUudHlwZSAhPT0gJ3RvdWNobW92ZScpIHJldHVybjtcbiAgdmFyIHRhcmdldFRvdWNoID0gZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMgJiYgKGUudGFyZ2V0VG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdKTtcbiAgdmFyIHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VYIDogZS5wYWdlWDtcbiAgdmFyIHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VZIDogZS5wYWdlWTtcblxuICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgIHRvdWNoZXMuc3RhcnRYID0gcGFnZVg7XG4gICAgdG91Y2hlcy5zdGFydFkgPSBwYWdlWTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIC8vIGlzTW92ZWQgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG5cbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIGV4dGVuZCh0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZXG4gICAgICB9KTtcbiAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgcGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGUudGFyZ2V0KS5pcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuXG4gIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG4gIHZhciBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgdmFyIGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KE1hdGgucG93KGRpZmZYLCAyKSArIE1hdGgucG93KGRpZmZZLCAyKSkgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuXG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgdG91Y2hBbmdsZTtcblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuXG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgfVxuXG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcblxuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmlnZ2VyKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnKTtcbiAgICB9XG5cbiAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSBmYWxzZTsgLy8gR3JhYiBDdXJzb3JcblxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKHRydWUpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIHZhciBkaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZGlmZlggOiBkaWZmWTtcbiAgdG91Y2hlcy5kaWZmID0gZGlmZjtcbiAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgaWYgKHJ0bCkgZGlmZiA9IC1kaWZmO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIHZhciBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgdmFyIHJlc2lzdGFuY2VSYXRpbyA9IHBhcmFtcy5yZXNpc3RhbmNlUmF0aW87XG5cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgfVxuXG4gIGlmIChkaWZmID4gMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxICsgTWF0aC5wb3coLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmLCByZXNpc3RhbmNlUmF0aW8pO1xuICB9IGVsc2UgaWYgKGRpZmYgPCAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSBNYXRoLnBvdyhzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBkYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZiwgcmVzaXN0YW5jZVJhdGlvKTtcbiAgfVxuXG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH0gLy8gRGlyZWN0aW9ucyBsb2Nrc1xuXG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9IC8vIFRocmVzaG9sZFxuXG5cbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcGFyYW1zLnRocmVzaG9sZCB8fCBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICB0b3VjaGVzLmRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoIXBhcmFtcy5mb2xsb3dGaW5nZXIgfHwgcGFyYW1zLmNzc01vZGUpIHJldHVybjsgLy8gVXBkYXRlIGFjdGl2ZSBpbmRleCBpbiBmcmVlIG1vZGVcblxuICBpZiAocGFyYW1zLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdjdXJyZW50WCcgOiAnY3VycmVudFknXSxcbiAgICAgIHRpbWU6IG5vdygpXG4gICAgfSk7XG4gIH0gLy8gVXBkYXRlIHByb2dyZXNzXG5cblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTsgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn0iLCJpbXBvcnQgeyBub3csIG5leHRUaWNrIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIHZhciBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG5cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICB9XG5cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG5cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLmlzTW92ZWQgJiYgcGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgICB9XG5cbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9IC8vIFJldHVybiBHcmFiIEN1cnNvclxuXG5cbiAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmlzVG91Y2hlZCAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gIH0gLy8gVGltZSBkaWZmXG5cblxuICB2YXIgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gIHZhciB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7IC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuXG4gIGlmIChzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUoZSk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuXG4gICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmIHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSA8IDMwMCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgIH1cbiAgfVxuXG4gIGRhdGEubGFzdENsaWNrVGltZSA9IG5vdygpO1xuICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIH0pO1xuXG4gIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCB8fCBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPT09IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICB2YXIgY3VycmVudFBvcztcblxuICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgaWYgKGN1cnJlbnRQb3MgPCAtc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50UG9zID4gLXN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoIDwgc25hcEdyaWQubGVuZ3RoKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNuYXBHcmlkLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSkge1xuICAgICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBsYXN0TW92ZUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICB2YXIgdmVsb2NpdHlFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gbGFzdE1vdmVFdmVudC5wb3NpdGlvbiAtIHZlbG9jaXR5RXZlbnQucG9zaXRpb247XG4gICAgICAgIHZhciB0aW1lID0gbGFzdE1vdmVFdmVudC50aW1lIC0gdmVsb2NpdHlFdmVudC50aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSBkaXN0YW5jZSAvIHRpbWU7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSAvPSAyO1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpIDwgcGFyYW1zLmZyZWVNb2RlTWluaW11bVZlbG9jaXR5KSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfSAvLyB0aGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBhIGZpbmdlciB0aGVuIHJlbGVhc2VkLlxuICAgICAgICAvLyBUaGVyZSB3b3VsZCBiZSBubyBldmVudHMgd2l0aCBkaXN0YW5jZSB6ZXJvLCBzbyB0aGUgbGFzdCBldmVudCBpcyBzdGFsZS5cblxuXG4gICAgICAgIGlmICh0aW1lID4gMTUwIHx8IG5vdygpIC0gbGFzdE1vdmVFdmVudC50aW1lID4gMzAwKSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLnZlbG9jaXR5ICo9IHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbztcbiAgICAgIGRhdGEudmVsb2NpdGllcy5sZW5ndGggPSAwO1xuICAgICAgdmFyIG1vbWVudHVtRHVyYXRpb24gPSAxMDAwICogcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1SYXRpbztcbiAgICAgIHZhciBtb21lbnR1bURpc3RhbmNlID0gc3dpcGVyLnZlbG9jaXR5ICogbW9tZW50dW1EdXJhdGlvbjtcbiAgICAgIHZhciBuZXdQb3NpdGlvbiA9IHN3aXBlci50cmFuc2xhdGUgKyBtb21lbnR1bURpc3RhbmNlO1xuICAgICAgaWYgKHJ0bCkgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICB2YXIgZG9Cb3VuY2UgPSBmYWxzZTtcbiAgICAgIHZhciBhZnRlckJvdW5jZVBvc2l0aW9uO1xuICAgICAgdmFyIGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICB2YXIgbmVlZHNMb29wRml4O1xuXG4gICAgICBpZiAobmV3UG9zaXRpb24gPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uICsgc3dpcGVyLm1heFRyYW5zbGF0ZSgpIDwgLWJvdW5jZUFtb3VudCkge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgICBkb0JvdW5jZSA9IHRydWU7XG4gICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIG5lZWRzTG9vcEZpeCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG5ld1Bvc2l0aW9uID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSA+IGJvdW5jZUFtb3VudCkge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICBkb0JvdW5jZSA9IHRydWU7XG4gICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIG5lZWRzTG9vcEZpeCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICB2YXIgbmV4dFNsaWRlO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAoc25hcEdyaWRbal0gPiAtbmV3UG9zaXRpb24pIHtcbiAgICAgICAgICAgIG5leHRTbGlkZSA9IGo7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlXSAtIG5ld1Bvc2l0aW9uKSA8IE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZSAtIDFdIC0gbmV3UG9zaXRpb24pIHx8IHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRzTG9vcEZpeCkge1xuICAgICAgICBzd2lwZXIub25jZSgndHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gRml4IGR1cmF0aW9uXG5cblxuICAgICAgaWYgKHN3aXBlci52ZWxvY2l0eSAhPT0gMCkge1xuICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKCgtbmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKChuZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgICAvLyBJZiBmcmVlTW9kZVN0aWNreSBpcyBhY3RpdmUgYW5kIHRoZSB1c2VyIGVuZHMgYSBzd2lwZSB3aXRoIGEgc2xvdy12ZWxvY2l0eVxuICAgICAgICAgIC8vIGV2ZW50LCB0aGVuIGR1cmF0aW9ucyBjYW4gYmUgMjArIHNlY29uZHMgdG8gc2xpZGUgb25lIChvciB6ZXJvISkgc2xpZGVzLlxuICAgICAgICAgIC8vIEl0J3MgZWFzeSB0byBzZWUgdGhpcyB3aGVuIHNpbXVsYXRpbmcgdG91Y2ggd2l0aCBtb3VzZSBldmVudHMuIFRvIGZpeCB0aGlzLFxuICAgICAgICAgIC8vIGxpbWl0IHNpbmdsZS1zbGlkZSBzd2lwZXMgdG8gdGhlIGRlZmF1bHQgc2xpZGUgZHVyYXRpb24uIFRoaXMgYWxzbyBoYXMgdGhlXG4gICAgICAgICAgLy8gbmljZSBzaWRlIGVmZmVjdCBvZiBtYXRjaGluZyBzbGlkZSBzcGVlZCBpZiB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBiZWZvcmVcbiAgICAgICAgICAvLyBsaWZ0aW5nIGZpbmdlciBvciBtb3VzZSB2cy4gbW92aW5nIHNsb3dseSBiZWZvcmUgbGlmdGluZyB0aGUgZmluZ2VyL21vdXNlLlxuICAgICAgICAgIC8vIEZvciBmYXN0ZXIgc3dpcGVzLCBhbHNvIGFwcGx5IGxpbWl0cyAoYWxiZWl0IGhpZ2hlciBvbmVzKS5cbiAgICAgICAgICB2YXIgbW92ZURpc3RhbmNlID0gTWF0aC5hYnMoKHJ0bCA/IC1uZXdQb3NpdGlvbiA6IG5ld1Bvc2l0aW9uKSAtIHN3aXBlci50cmFuc2xhdGUpO1xuICAgICAgICAgIHZhciBjdXJyZW50U2xpZGVTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuYWN0aXZlSW5kZXhdO1xuXG4gICAgICAgICAgaWYgKG1vdmVEaXN0YW5jZSA8IGN1cnJlbnRTbGlkZVNpemUpIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChtb3ZlRGlzdGFuY2UgPCAyICogY3VycmVudFNsaWRlU2l6ZSkge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZCAqIDEuNTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZCAqIDIuNTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSAmJiBkb0JvdW5jZSkge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnbW9tZW50dW1Cb3VuY2UnKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihwYXJhbXMuc3BlZWQpO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShhZnRlckJvdW5jZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnZlbG9jaXR5KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuXG4gICAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuZW1pdCgnX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgc3dpcGVyLmVtaXQoJ19mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJyk7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSB8fCB0aW1lRGlmZiA+PSBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0gLy8gRmluZCBjdXJyZW50IHNsaWRlXG5cblxuICB2YXIgc3RvcEluZGV4ID0gMDtcbiAgdmFyIGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICB2YXIgX2luY3JlbWVudCA9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIF9pbmNyZW1lbnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgX2luY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgX2luY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfSAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuXG5cbiAgdmFyIHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICB2YXIgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gIGlmICh0aW1lRGlmZiA+IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAvLyBMb25nIHRvdWNoZXNcbiAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcblxuICAgIGlmICghaXNOYXZCdXR0b25UYXJnZXQpIHtcbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIGVsID0gc3dpcGVyLmVsO1xuICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjsgLy8gQnJlYWtwb2ludHNcblxuICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgfSAvLyBTYXZlIGxvY2tzXG5cblxuICB2YXIgYWxsb3dTbGlkZU5leHQgPSBzd2lwZXIuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldiA9IHN3aXBlci5hbGxvd1NsaWRlUHJldixcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkOyAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuXG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICB9XG5cbiAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICB9IC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcblxuXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcblxuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG5cbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIGlmIChydGxUcmFuc2xhdGUpIHtcbiAgICAgIHN3aXBlci50cmFuc2xhdGUgPSB3cmFwcGVyRWwuc2Nyb2xsV2lkdGggLSB3cmFwcGVyRWwub2Zmc2V0V2lkdGggLSB3cmFwcGVyRWwuc2Nyb2xsTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsTGVmdDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5cbiAgaWYgKHN3aXBlci50cmFuc2xhdGUgPT09IC0wKSBzd2lwZXIudHJhbnNsYXRlID0gMDtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIHZhciBuZXdQcm9ncmVzcztcbiAgdmFyIHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9IChzd2lwZXIudHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG5cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBzd2lwZXIucHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCBvblRvdWNoU3RhcnQgZnJvbSAnLi9vblRvdWNoU3RhcnQnO1xuaW1wb3J0IG9uVG91Y2hNb3ZlIGZyb20gJy4vb25Ub3VjaE1vdmUnO1xuaW1wb3J0IG9uVG91Y2hFbmQgZnJvbSAnLi9vblRvdWNoRW5kJztcbmltcG9ydCBvblJlc2l6ZSBmcm9tICcuL29uUmVzaXplJztcbmltcG9ydCBvbkNsaWNrIGZyb20gJy4vb25DbGljayc7XG5pbXBvcnQgb25TY3JvbGwgZnJvbSAnLi9vblNjcm9sbCc7XG52YXIgZHVtbXlFdmVudEF0dGFjaGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGR1bW15RXZlbnRMaXN0ZW5lcigpIHt9XG5cbmZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hFdmVudHMgPSBzd2lwZXIudG91Y2hFdmVudHMsXG4gICAgICBlbCA9IHN3aXBlci5lbCxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlLFxuICAgICAgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5vblNjcm9sbCA9IG9uU2Nyb2xsLmJpbmQoc3dpcGVyKTtcbiAgfVxuXG4gIHN3aXBlci5vbkNsaWNrID0gb25DbGljay5iaW5kKHN3aXBlcik7XG4gIHZhciBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkOyAvLyBUb3VjaCBFdmVudHNcblxuICBpZiAoIXN1cHBvcnQudG91Y2ggJiYgc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3VwcG9ydC50b3VjaCkge1xuICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8ge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgY2FwdHVyZTogY2FwdHVyZVxuICAgICAgfSA6IGNhcHR1cmUpO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgICBpZiAodG91Y2hFdmVudHMuY2FuY2VsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuY2FuY2VsLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkdW1teUV2ZW50QXR0YWNoZWQpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGR1bW15RXZlbnRMaXN0ZW5lcik7XG4gICAgICAgIGR1bW15RXZlbnRBdHRhY2hlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFkZXZpY2UuaW9zICYmICFkZXZpY2UuYW5kcm9pZCB8fCBwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhc3VwcG9ydC50b3VjaCAmJiBkZXZpY2UuaW9zKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgfVxuICB9IC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG5cblxuICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH0gLy8gUmVzaXplIGhhbmRsZXJcblxuXG4gIGlmIChwYXJhbXMudXBkYXRlT25XaW5kb3dSZXNpemUpIHtcbiAgICBzd2lwZXIub24oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIub24oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hFdmVudHMgPSBzd2lwZXIudG91Y2hFdmVudHMsXG4gICAgICBlbCA9IHN3aXBlci5lbCxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlLFxuICAgICAgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDsgLy8gVG91Y2ggRXZlbnRzXG5cbiAgaWYgKCFzdXBwb3J0LnRvdWNoICYmIHN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ29uVG91Y2hTdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgICBpZiAodG91Y2hFdmVudHMuY2FuY2VsKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuY2FuY2VsLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIWRldmljZS5pb3MgJiYgIWRldmljZS5hbmRyb2lkIHx8IHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFzdXBwb3J0LnRvdWNoICYmIGRldmljZS5pb3MpIHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9XG4gIH0gLy8gUHJldmVudCBMaW5rcyBDbGlja3NcblxuXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfSAvLyBSZXNpemUgaGFuZGxlclxuXG5cbiAgc3dpcGVyLm9mZihkZXZpY2UuaW9zIHx8IGRldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJywgb25SZXNpemUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGF0dGFjaEV2ZW50czogYXR0YWNoRXZlbnRzLFxuICBkZXRhY2hFdmVudHM6IGRldGFjaEV2ZW50c1xufTsiLCJmdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciB3YXNMb2NrZWQgPSBzd2lwZXIuaXNMb2NrZWQ7XG4gIHZhciBsYXN0U2xpZGVQb3NpdGlvbiA9IHN3aXBlci5zbGlkZXMubGVuZ3RoID4gMCAmJiBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlICsgcGFyYW1zLnNwYWNlQmV0d2VlbiAqIChzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpICsgc3dpcGVyLnNsaWRlc1swXS5vZmZzZXRXaWR0aCAqIHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuXG4gIGlmIChwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlICYmIHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlciAmJiBsYXN0U2xpZGVQb3NpdGlvbikge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IGxhc3RTbGlkZVBvc2l0aW9uIDw9IHN3aXBlci5zaXplO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggPT09IDE7XG4gIH1cblxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkOyAvLyBldmVudHNcblxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcblxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uKSBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3dcbn07IiwiZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICdjb250YWluZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgcmVzaXplT2JzZXJ2ZXI6IGZhbHNlLFxuICBuZXN0ZWQ6IGZhbHNlLFxuICBjcmVhdGVFbGVtZW50czogZmFsc2UsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIGZvY3VzYWJsZUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbywgbGFiZWwnLFxuICAvLyBPdmVycmlkZXNcbiAgd2lkdGg6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcbiAgLy8gc3NyXG4gIHVzZXJBZ2VudDogbnVsbCxcbiAgdXJsOiBudWxsLFxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gIC8vIEZyZWUgbW9kZVxuICBmcmVlTW9kZTogZmFsc2UsXG4gIGZyZWVNb2RlTW9tZW50dW06IHRydWUsXG4gIGZyZWVNb2RlTW9tZW50dW1SYXRpbzogMSxcbiAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZTogdHJ1ZSxcbiAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvOiAxLFxuICBmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbzogMSxcbiAgZnJlZU1vZGVTdGlja3k6IGZhbHNlLFxuICBmcmVlTW9kZU1pbmltdW1WZWxvY2l0eTogMC4wMixcbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsXG4gIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgYnJlYWtwb2ludHNCYXNlOiAnd2luZG93JyxcbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gIHNsaWRlc1BlckNvbHVtbkZpbGw6ICdjb2x1bW4nLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgd2F0Y2hPdmVyZmxvdzogZmFsc2UsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDAsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gSW1hZ2VzXG4gIHByZWxvYWRJbWFnZXM6IHRydWUsXG4gIHVwZGF0ZU9uSW1hZ2VzUmVhZHk6IHRydWUsXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wZWRTbGlkZXM6IG51bGwsXG4gIGxvb3BGaWxsR3JvdXBXaXRoQmxhbms6IGZhbHNlLFxuICBsb29wUHJldmVudHNTbGlkZTogdHJ1ZSxcbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItJyxcbiAgLy8gTkVXXG4gIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVEdXBsaWNhdGVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUnLFxuICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIC8vIEludGVybmFsc1xuICBfZW1pdENsYXNzZXM6IGZhbHNlXG59OyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgbm93LCBkZWxldGVQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IGdldFN1cHBvcnQgfSBmcm9tICcuLi8uLi91dGlscy9nZXQtc3VwcG9ydCc7XG5pbXBvcnQgeyBnZXREZXZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9nZXQtZGV2aWNlJztcbmltcG9ydCB7IGdldEJyb3dzZXIgfSBmcm9tICcuLi8uLi91dGlscy9nZXQtYnJvd3Nlcic7XG5pbXBvcnQgUmVzaXplIGZyb20gJy4uLy4uL21vZHVsZXMvcmVzaXplL3Jlc2l6ZSc7XG5pbXBvcnQgT2JzZXJ2ZXIgZnJvbSAnLi4vLi4vbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlcic7XG5pbXBvcnQgbW9kdWxhciBmcm9tICcuL21vZHVsYXInO1xuaW1wb3J0IGV2ZW50c0VtaXR0ZXIgZnJvbSAnLi9ldmVudHMtZW1pdHRlcic7XG5pbXBvcnQgdXBkYXRlIGZyb20gJy4vdXBkYXRlL2luZGV4JztcbmltcG9ydCB0cmFuc2xhdGUgZnJvbSAnLi90cmFuc2xhdGUvaW5kZXgnO1xuaW1wb3J0IHRyYW5zaXRpb24gZnJvbSAnLi90cmFuc2l0aW9uL2luZGV4JztcbmltcG9ydCBzbGlkZSBmcm9tICcuL3NsaWRlL2luZGV4JztcbmltcG9ydCBsb29wIGZyb20gJy4vbG9vcC9pbmRleCc7XG5pbXBvcnQgZ3JhYkN1cnNvciBmcm9tICcuL2dyYWItY3Vyc29yL2luZGV4JztcbmltcG9ydCBtYW5pcHVsYXRpb24gZnJvbSAnLi9tYW5pcHVsYXRpb24vaW5kZXgnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICcuL2V2ZW50cy9pbmRleCc7XG5pbXBvcnQgYnJlYWtwb2ludHMgZnJvbSAnLi9icmVha3BvaW50cy9pbmRleCc7XG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL2NsYXNzZXMvaW5kZXgnO1xuaW1wb3J0IGltYWdlcyBmcm9tICcuL2ltYWdlcy9pbmRleCc7XG5pbXBvcnQgY2hlY2tPdmVyZmxvdyBmcm9tICcuL2NoZWNrLW92ZXJmbG93L2luZGV4JztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzJztcbnZhciBwcm90b3R5cGVzID0ge1xuICBtb2R1bGFyOiBtb2R1bGFyLFxuICBldmVudHNFbWl0dGVyOiBldmVudHNFbWl0dGVyLFxuICB1cGRhdGU6IHVwZGF0ZSxcbiAgdHJhbnNsYXRlOiB0cmFuc2xhdGUsXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gIHNsaWRlOiBzbGlkZSxcbiAgbG9vcDogbG9vcCxcbiAgZ3JhYkN1cnNvcjogZ3JhYkN1cnNvcixcbiAgbWFuaXB1bGF0aW9uOiBtYW5pcHVsYXRpb24sXG4gIGV2ZW50czogZXZlbnRzLFxuICBicmVha3BvaW50czogYnJlYWtwb2ludHMsXG4gIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3csXG4gIGNsYXNzZXM6IGNsYXNzZXMsXG4gIGltYWdlczogaW1hZ2VzXG59O1xudmFyIGV4dGVuZGVkRGVmYXVsdHMgPSB7fTtcblxudmFyIFN3aXBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN3aXBlcigpIHtcbiAgICB2YXIgZWw7XG4gICAgdmFyIHBhcmFtcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwgPSBhcmdzWzBdO1xuICAgICAgcGFyYW1zID0gYXJnc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcblxuICAgIGlmIChwYXJhbXMuZWwgJiYgJChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzd2lwZXJzID0gW107XG4gICAgICAkKHBhcmFtcy5lbCkuZWFjaChmdW5jdGlvbiAoY29udGFpbmVyRWwpIHtcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgZWw6IGNvbnRhaW5lckVsXG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN3aXBlcnM7XG4gICAgfSAvLyBTd2lwZXIgSW5zdGFuY2VcblxuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLl9fc3dpcGVyX18gPSB0cnVlO1xuICAgIHN3aXBlci5zdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICAgIHN3aXBlci5kZXZpY2UgPSBnZXREZXZpY2Uoe1xuICAgICAgdXNlckFnZW50OiBwYXJhbXMudXNlckFnZW50XG4gICAgfSk7XG4gICAgc3dpcGVyLmJyb3dzZXIgPSBnZXRCcm93c2VyKCk7XG4gICAgc3dpcGVyLmV2ZW50c0xpc3RlbmVycyA9IHt9O1xuICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygc3dpcGVyLm1vZHVsZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzd2lwZXIubW9kdWxlcyA9IHt9O1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHN3aXBlci5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gc3dpcGVyLm1vZHVsZXNbbW9kdWxlTmFtZV07XG5cbiAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgIHZhciBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhtb2R1bGUucGFyYW1zKVswXTtcbiAgICAgICAgdmFyIG1vZHVsZVBhcmFtcyA9IG1vZHVsZS5wYXJhbXNbbW9kdWxlUGFyYW1OYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChbJ25hdmlnYXRpb24nLCAncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5pbmRleE9mKG1vZHVsZVBhcmFtTmFtZSkgPj0gMCAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICAgICAgYXV0bzogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSkge1xuICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTsgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcblxuICAgIHZhciBzd2lwZXJQYXJhbXMgPSBleHRlbmQoe30sIGRlZmF1bHRzKTtcbiAgICBzd2lwZXIudXNlUGFyYW1zKHN3aXBlclBhcmFtcyk7IC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIHBhc3NlZCBwYXJhbXNcblxuICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7IC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcblxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub24pIHtcbiAgICAgIE9iamVjdC5rZXlzKHN3aXBlci5wYXJhbXMub24pLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbkFueSkge1xuICAgICAgc3dpcGVyLm9uQW55KHN3aXBlci5wYXJhbXMub25BbnkpO1xuICAgIH0gLy8gU2F2ZSBEb20gbGliXG5cblxuICAgIHN3aXBlci4kID0gJDsgLy8gRXh0ZW5kIFN3aXBlclxuXG4gICAgZXh0ZW5kKHN3aXBlciwge1xuICAgICAgZW5hYmxlZDogc3dpcGVyLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWw6IGVsLFxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogJCgpLFxuICAgICAgc2xpZGVzR3JpZDogW10sXG4gICAgICBzbmFwR3JpZDogW10sXG4gICAgICBzbGlkZXNTaXplc0dyaWQ6IFtdLFxuICAgICAgLy8gaXNEaXJlY3Rpb25cbiAgICAgIGlzSG9yaXpvbnRhbDogZnVuY3Rpb24gaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsOiBmdW5jdGlvbiBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50czogZnVuY3Rpb24gdG91Y2hFdmVudHMoKSB7XG4gICAgICAgIHZhciB0b3VjaCA9IFsndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnXTtcbiAgICAgICAgdmFyIGRlc2t0b3AgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCddO1xuXG4gICAgICAgIGlmIChzd2lwZXIuc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgICAgICAgZGVza3RvcCA9IFsncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJ107XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA9IHtcbiAgICAgICAgICBzdGFydDogdG91Y2hbMF0sXG4gICAgICAgICAgbW92ZTogdG91Y2hbMV0sXG4gICAgICAgICAgZW5kOiB0b3VjaFsyXSxcbiAgICAgICAgICBjYW5jZWw6IHRvdWNoWzNdXG4gICAgICAgIH07XG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7XG4gICAgICAgICAgc3RhcnQ6IGRlc2t0b3BbMF0sXG4gICAgICAgICAgbW92ZTogZGVza3RvcFsxXSxcbiAgICAgICAgICBlbmQ6IGRlc2t0b3BbMl1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA6IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3A7XG4gICAgICB9KCksXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBzd2lwZXIucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLFxuICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgbGFzdENsaWNrVGltZTogbm93KCksXG4gICAgICAgIGNsaWNrVGltZW91dDogdW5kZWZpbmVkLFxuICAgICAgICAvLyBWZWxvY2l0aWVzXG4gICAgICAgIHZlbG9jaXRpZXM6IFtdLFxuICAgICAgICBhbGxvd01vbWVudHVtQm91bmNlOiB1bmRlZmluZWQsXG4gICAgICAgIGlzVG91Y2hFdmVudDogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAgLy8gQ2xpY2tzXG4gICAgICBhbGxvd0NsaWNrOiB0cnVlLFxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDBcbiAgICAgIH0sXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDBcbiAgICB9KTsgLy8gSW5zdGFsbCBNb2R1bGVzXG5cbiAgICBzd2lwZXIudXNlTW9kdWxlcygpO1xuICAgIHN3aXBlci5lbWl0KCdfc3dpcGVyJyk7IC8vIEluaXRcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgfSAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG5cblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpcGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gdHJ1ZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9O1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci51bnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGlzYWJsZScpO1xuICB9O1xuXG4gIF9wcm90by5zZXRQcm9ncmVzcyA9IGZ1bmN0aW9uIHNldFByb2dyZXNzKHByb2dyZXNzLCBzcGVlZCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgocHJvZ3Jlc3MsIDApLCAxKTtcbiAgICB2YXIgbWluID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIHZhciBtYXggPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgdmFyIGN1cnJlbnQgPSAobWF4IC0gbWluKSAqIHByb2dyZXNzICsgbWluO1xuICAgIHN3aXBlci50cmFuc2xhdGVUbyhjdXJyZW50LCB0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnID8gMCA6IHNwZWVkKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9O1xuXG4gIF9wcm90by5lbWl0Q29udGFpbmVyQ2xhc3NlcyA9IGZ1bmN0aW9uIGVtaXRDb250YWluZXJDbGFzc2VzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIHZhciBjbGFzc2VzID0gc3dpcGVyLmVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1jb250YWluZXInKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpID09PSAwO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfY29udGFpbmVyQ2xhc3NlcycsIGNsYXNzZXMuam9pbignICcpKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0U2xpZGVDbGFzc2VzID0gZnVuY3Rpb24gZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXItc2xpZGUnKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpID09PSAwO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTtcblxuICBfcHJvdG8uZW1pdFNsaWRlc0NsYXNzZXMgPSBmdW5jdGlvbiBlbWl0U2xpZGVzQ2xhc3NlcygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICB2YXIgdXBkYXRlcyA9IFtdO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgdmFyIGNsYXNzTmFtZXMgPSBzd2lwZXIuZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpO1xuICAgICAgdXBkYXRlcy5wdXNoKHtcbiAgICAgICAgc2xpZGVFbDogc2xpZGVFbCxcbiAgICAgICAgY2xhc3NOYW1lczogY2xhc3NOYW1lc1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3MnLCBzbGlkZUVsLCBjbGFzc05hbWVzKTtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3NlcycsIHVwZGF0ZXMpO1xuICB9O1xuXG4gIF9wcm90by5zbGlkZXNQZXJWaWV3RHluYW1pYyA9IGZ1bmN0aW9uIHNsaWRlc1BlclZpZXdEeW5hbWljKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIHNwdiA9IDE7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB2YXIgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICB2YXIgYnJlYWtMb29wO1xuXG4gICAgICBmb3IgKHZhciBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pID0gYWN0aXZlSW5kZXggLSAxOyBfaSA+PSAwOyBfaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbX2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW19pXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgX2kyID0gYWN0aXZlSW5kZXggKyAxOyBfaTIgPCBzbGlkZXMubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzR3JpZFtfaTJdIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplKSB7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3B2O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtczsgLy8gQnJlYWtwb2ludHNcblxuICAgIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyIG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2xhdGVkO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgfTtcblxuICBfcHJvdG8uY2hhbmdlRGlyZWN0aW9uID0gZnVuY3Rpb24gY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50RGlyZWN0aW9uID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb247XG5cbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cblxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT09IGN1cnJlbnREaXJlY3Rpb24gfHwgbmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH1cblxuICAgIHN3aXBlci4kZWwucmVtb3ZlQ2xhc3MoXCJcIiArIHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIGN1cnJlbnREaXJlY3Rpb24pLmFkZENsYXNzKFwiXCIgKyBzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBuZXdEaXJlY3Rpb24pO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH07XG5cbiAgX3Byb3RvLm1vdW50ID0gZnVuY3Rpb24gbW91bnQoZWwpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLm1vdW50ZWQpIHJldHVybiB0cnVlOyAvLyBGaW5kIGVsXG5cbiAgICB2YXIgJGVsID0gJChlbCB8fCBzd2lwZXIucGFyYW1zLmVsKTtcbiAgICBlbCA9ICRlbFswXTtcblxuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBlbC5zd2lwZXIgPSBzd2lwZXI7XG5cbiAgICB2YXIgZ2V0V3JhcHBlclNlbGVjdG9yID0gZnVuY3Rpb24gZ2V0V3JhcHBlclNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIFwiLlwiICsgKHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzIHx8ICcnKS50cmltKCkuc3BsaXQoJyAnKS5qb2luKCcuJyk7XG4gICAgfTtcblxuICAgIHZhciBnZXRXcmFwcGVyID0gZnVuY3Rpb24gZ2V0V3JhcHBlcigpIHtcbiAgICAgIGlmIChlbCAmJiBlbC5zaGFkb3dSb290ICYmIGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICB2YXIgcmVzID0gJChlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoZ2V0V3JhcHBlclNlbGVjdG9yKCkpKTsgLy8gQ2hpbGRyZW4gbmVlZHMgdG8gcmV0dXJuIHNsb3QgaXRlbXNcblxuICAgICAgICByZXMuY2hpbGRyZW4gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgIHJldHVybiAkZWwuY2hpbGRyZW4ob3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICRlbC5jaGlsZHJlbihnZXRXcmFwcGVyU2VsZWN0b3IoKSk7XG4gICAgfTsgLy8gRmluZCBXcmFwcGVyXG5cblxuICAgIHZhciAkd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuXG4gICAgaWYgKCR3cmFwcGVyRWwubGVuZ3RoID09PSAwICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgJHdyYXBwZXJFbCA9ICQod3JhcHBlcik7XG4gICAgICB3cmFwcGVyLmNsYXNzTmFtZSA9IHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzO1xuICAgICAgJGVsLmFwcGVuZCh3cmFwcGVyKTtcbiAgICAgICRlbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZUVsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGV4dGVuZChzd2lwZXIsIHtcbiAgICAgICRlbDogJGVsLFxuICAgICAgZWw6IGVsLFxuICAgICAgJHdyYXBwZXJFbDogJHdyYXBwZXJFbCxcbiAgICAgIHdyYXBwZXJFbDogJHdyYXBwZXJFbFswXSxcbiAgICAgIG1vdW50ZWQ6IHRydWUsXG4gICAgICAvLyBSVExcbiAgICAgIHJ0bDogZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8ICRlbC5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8ICRlbC5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICB3cm9uZ1JUTDogJHdyYXBwZXJFbC5jc3MoJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94J1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdChlbCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7XG4gICAgdmFyIG1vdW50ZWQgPSBzd2lwZXIubW91bnQoZWwpO1xuICAgIGlmIChtb3VudGVkID09PSBmYWxzZSkgcmV0dXJuIHN3aXBlcjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpOyAvLyBTZXQgYnJlYWtwb2ludFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfSAvLyBBZGQgQ2xhc3Nlc1xuXG5cbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpOyAvLyBDcmVhdGUgbG9vcFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9IC8vIFVwZGF0ZSBzaXplXG5cblxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7IC8vIFVwZGF0ZSBzbGlkZXNcblxuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfSAvLyBTZXQgR3JhYiBDdXJzb3JcblxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvciAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7XG4gICAgICBzd2lwZXIucHJlbG9hZEltYWdlcygpO1xuICAgIH0gLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH0gLy8gQXR0YWNoIGV2ZW50c1xuXG5cbiAgICBzd2lwZXIuYXR0YWNoRXZlbnRzKCk7IC8vIEluaXQgRmxhZ1xuXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gdHJ1ZTsgLy8gRW1pdFxuXG4gICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgICBzd2lwZXIuZW1pdCgnYWZ0ZXJJbml0Jyk7XG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UsIGNsZWFuU3R5bGVzKSB7XG4gICAgaWYgKGRlbGV0ZUluc3RhbmNlID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGV0ZUluc3RhbmNlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY2xlYW5TdHlsZXMgPT09IHZvaWQgMCkge1xuICAgICAgY2xlYW5TdHlsZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICAkZWwgPSBzd2lwZXIuJGVsLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG5cbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7IC8vIEluaXQgRmxhZ1xuXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7IC8vIERldGFjaCBldmVudHNcblxuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTsgLy8gRGVzdHJveSBsb29wXG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH0gLy8gQ2xlYW51cCBzdHlsZXNcblxuXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgJGVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAkd3JhcHBlckVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG5cbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXMucmVtb3ZlQ2xhc3MoW3BhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzXS5qb2luKCcgJykpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpOyAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcblxuICAgIE9iamVjdC5rZXlzKHN3aXBlci5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpO1xuICAgIH0pO1xuXG4gICAgaWYgKGRlbGV0ZUluc3RhbmNlICE9PSBmYWxzZSkge1xuICAgICAgc3dpcGVyLiRlbFswXS5zd2lwZXIgPSBudWxsO1xuICAgICAgZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBTd2lwZXIuZXh0ZW5kRGVmYXVsdHMgPSBmdW5jdGlvbiBleHRlbmREZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgIGV4dGVuZChleHRlbmRlZERlZmF1bHRzLCBuZXdEZWZhdWx0cyk7XG4gIH07XG5cbiAgU3dpcGVyLmluc3RhbGxNb2R1bGUgPSBmdW5jdGlvbiBpbnN0YWxsTW9kdWxlKG1vZHVsZSkge1xuICAgIGlmICghU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzKSBTd2lwZXIucHJvdG90eXBlLm1vZHVsZXMgPSB7fTtcbiAgICB2YXIgbmFtZSA9IG1vZHVsZS5uYW1lIHx8IE9iamVjdC5rZXlzKFN3aXBlci5wcm90b3R5cGUubW9kdWxlcykubGVuZ3RoICsgXCJfXCIgKyBub3coKTtcbiAgICBTd2lwZXIucHJvdG90eXBlLm1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7XG4gIH07XG5cbiAgU3dpcGVyLnVzZSA9IGZ1bmN0aW9uIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICByZXR1cm4gU3dpcGVyLmluc3RhbGxNb2R1bGUobSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgfVxuXG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTd2lwZXIsIG51bGwsIFt7XG4gICAga2V5OiBcImV4dGVuZGVkRGVmYXVsdHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBleHRlbmRlZERlZmF1bHRzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWZhdWx0c1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTd2lwZXI7XG59KCk7XG5cbk9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3RvdHlwZUdyb3VwKSB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm90b01ldGhvZCkge1xuICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICB9KTtcbn0pO1xuU3dpcGVyLnVzZShbUmVzaXplLCBPYnNlcnZlcl0pO1xuZXhwb3J0IGRlZmF1bHQgU3dpcGVyOyIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXNlUGFyYW1zOiBmdW5jdGlvbiB1c2VQYXJhbXMoaW5zdGFuY2VQYXJhbXMpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgIGlmICghaW5zdGFuY2UubW9kdWxlcykgcmV0dXJuO1xuICAgIE9iamVjdC5rZXlzKGluc3RhbmNlLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdOyAvLyBFeHRlbmQgcGFyYW1zXG5cbiAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgIGV4dGVuZChpbnN0YW5jZVBhcmFtcywgbW9kdWxlLnBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHVzZU1vZHVsZXM6IGZ1bmN0aW9uIHVzZU1vZHVsZXMobW9kdWxlc1BhcmFtcykge1xuICAgIGlmIChtb2R1bGVzUGFyYW1zID09PSB2b2lkIDApIHtcbiAgICAgIG1vZHVsZXNQYXJhbXMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgIGlmICghaW5zdGFuY2UubW9kdWxlcykgcmV0dXJuO1xuICAgIE9iamVjdC5rZXlzKGluc3RhbmNlLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgdmFyIG1vZHVsZVBhcmFtcyA9IG1vZHVsZXNQYXJhbXNbbW9kdWxlTmFtZV0gfHwge307IC8vIEFkZCBldmVudCBsaXN0ZW5lcnNcblxuICAgICAgaWYgKG1vZHVsZS5vbiAmJiBpbnN0YW5jZS5vbikge1xuICAgICAgICBPYmplY3Qua2V5cyhtb2R1bGUub24pLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUV2ZW50TmFtZSkge1xuICAgICAgICAgIGluc3RhbmNlLm9uKG1vZHVsZUV2ZW50TmFtZSwgbW9kdWxlLm9uW21vZHVsZUV2ZW50TmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gTW9kdWxlIGNyZWF0ZSBjYWxsYmFja1xuXG5cbiAgICAgIGlmIChtb2R1bGUuY3JlYXRlKSB7XG4gICAgICAgIG1vZHVsZS5jcmVhdGUuYmluZChpbnN0YW5jZSkobW9kdWxlUGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBvbjogZnVuY3Rpb24gb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIHZhciBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9uY2U6IGZ1bmN0aW9uIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuXG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcblxuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcbiAgb25Bbnk6IGZ1bmN0aW9uIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgdmFyIG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuXG4gICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcikgPCAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVyc1ttZXRob2RdKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmZBbnk6IGZ1bmN0aW9uIG9mZkFueShoYW5kbGVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIHZhciBpbmRleCA9IHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmOiBmdW5jdGlvbiBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlciwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8IGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSAmJiBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIGVtaXQ6IGZ1bmN0aW9uIGVtaXQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIHZhciBldmVudHM7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIGNvbnRleHQ7XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cblxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICB2YXIgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgW2V2ZW50XS5jb25jYXQoZGF0YSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxufTsiLCJpbXBvcnQgdXBkYXRlU2l6ZSBmcm9tICcuL3VwZGF0ZVNpemUnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlcyBmcm9tICcuL3VwZGF0ZVNsaWRlcyc7XG5pbXBvcnQgdXBkYXRlQXV0b0hlaWdodCBmcm9tICcuL3VwZGF0ZUF1dG9IZWlnaHQnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc09mZnNldCBmcm9tICcuL3VwZGF0ZVNsaWRlc09mZnNldCc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MgZnJvbSAnLi91cGRhdGVTbGlkZXNQcm9ncmVzcyc7XG5pbXBvcnQgdXBkYXRlUHJvZ3Jlc3MgZnJvbSAnLi91cGRhdGVQcm9ncmVzcyc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzQ2xhc3NlcyBmcm9tICcuL3VwZGF0ZVNsaWRlc0NsYXNzZXMnO1xuaW1wb3J0IHVwZGF0ZUFjdGl2ZUluZGV4IGZyb20gJy4vdXBkYXRlQWN0aXZlSW5kZXgnO1xuaW1wb3J0IHVwZGF0ZUNsaWNrZWRTbGlkZSBmcm9tICcuL3VwZGF0ZUNsaWNrZWRTbGlkZSc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHVwZGF0ZVNpemU6IHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlczogdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0OiB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQ6IHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3M6IHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzczogdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXM6IHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4OiB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlOiB1cGRhdGVDbGlja2VkU2xpZGVcbn07IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB3aWR0aDtcbiAgdmFyIGhlaWdodDtcbiAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gJGVsWzBdLmNsaWVudFdpZHRoO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICBoZWlnaHQgPSAkZWxbMF0uY2xpZW50SGVpZ2h0O1xuICB9XG5cbiAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuXG5cbiAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctdG9wJykgfHwgMCwgMTApIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1ib3R0b20nKSB8fCAwLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4od2lkdGgpKSB3aWR0aCA9IDA7XG4gIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodFxuICB9KTtcbn0iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvbkxhYmVsKHByb3BlcnR5KSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH0gLy8gcHJldHRpZXItaWdub3JlXG5cblxuICAgIHJldHVybiB7XG4gICAgICAnd2lkdGgnOiAnaGVpZ2h0JyxcbiAgICAgICdtYXJnaW4tdG9wJzogJ21hcmdpbi1sZWZ0JyxcbiAgICAgICdtYXJnaW4tYm90dG9tICc6ICdtYXJnaW4tcmlnaHQnLFxuICAgICAgJ21hcmdpbi1sZWZ0JzogJ21hcmdpbi10b3AnLFxuICAgICAgJ21hcmdpbi1yaWdodCc6ICdtYXJnaW4tYm90dG9tJyxcbiAgICAgICdwYWRkaW5nLWxlZnQnOiAncGFkZGluZy10b3AnLFxuICAgICAgJ3BhZGRpbmctcmlnaHQnOiAncGFkZGluZy1ib3R0b20nLFxuICAgICAgJ21hcmdpblJpZ2h0JzogJ21hcmdpbkJvdHRvbSdcbiAgICB9W3Byb3BlcnR5XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUobm9kZSwgbGFiZWwpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChub2RlLmdldFByb3BlcnR5VmFsdWUoZ2V0RGlyZWN0aW9uTGFiZWwobGFiZWwpKSB8fCAwKTtcbiAgfVxuXG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgc3dpcGVyU2l6ZSA9IHN3aXBlci5zaXplLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIHdyb25nUlRMID0gc3dpcGVyLndyb25nUlRMO1xuICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgdmFyIHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICB2YXIgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyk7XG4gIHZhciBzbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDtcbiAgdmFyIHNuYXBHcmlkID0gW107XG4gIHZhciBzbGlkZXNHcmlkID0gW107XG4gIHZhciBzbGlkZXNTaXplc0dyaWQgPSBbXTtcbiAgdmFyIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuXG4gIHZhciBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcblxuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzU25hcEdyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICB2YXIgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoO1xuICB2YXIgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgdmFyIHNsaWRlUG9zaXRpb24gPSAtb2Zmc2V0QmVmb3JlO1xuICB2YXIgcHJldlNsaWRlU2l6ZSA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXJTaXplID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7XG4gIH1cblxuICBzd2lwZXIudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuOyAvLyByZXNldCBtYXJnaW5zXG5cbiAgaWYgKHJ0bCkgc2xpZGVzLmNzcyh7XG4gICAgbWFyZ2luTGVmdDogJycsXG4gICAgbWFyZ2luQm90dG9tOiAnJyxcbiAgICBtYXJnaW5Ub3A6ICcnXG4gIH0pO2Vsc2Ugc2xpZGVzLmNzcyh7XG4gICAgbWFyZ2luUmlnaHQ6ICcnLFxuICAgIG1hcmdpbkJvdHRvbTogJycsXG4gICAgbWFyZ2luVG9wOiAnJ1xuICB9KTtcbiAgdmFyIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgaWYgKE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgPT09IHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gc2xpZGVzTGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ3JvdycpIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBwYXJhbXMuc2xpZGVzUGVyVmlldyAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuICAgIH1cbiAgfSAvLyBDYWxjIHNsaWRlc1xuXG5cbiAgdmFyIHNsaWRlU2l6ZTtcbiAgdmFyIHNsaWRlc1BlckNvbHVtbiA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gIHZhciBzbGlkZXNQZXJSb3cgPSBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIC8gc2xpZGVzUGVyQ29sdW1uO1xuICB2YXIgbnVtRnVsbENvbHVtbnMgPSBNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIHZhciBzbGlkZSA9IHNsaWRlcy5lcShpKTtcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgICAgdmFyIG5ld1NsaWRlT3JkZXJJbmRleCA9IHZvaWQgMDtcbiAgICAgIHZhciBjb2x1bW4gPSB2b2lkIDA7XG4gICAgICB2YXIgcm93ID0gdm9pZCAwO1xuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgICAgdmFyIGdyb3VwSW5kZXggPSBNYXRoLmZsb29yKGkgLyAocGFyYW1zLnNsaWRlc1Blckdyb3VwICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbikpO1xuICAgICAgICB2YXIgc2xpZGVJbmRleEluR3JvdXAgPSBpIC0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbiAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cCAqIGdyb3VwSW5kZXg7XG4gICAgICAgIHZhciBjb2x1bW5zSW5Hcm91cCA9IGdyb3VwSW5kZXggPT09IDAgPyBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgOiBNYXRoLm1pbihNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIGdyb3VwSW5kZXggKiBzbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIC8gc2xpZGVzUGVyQ29sdW1uKSwgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihzbGlkZUluZGV4SW5Hcm91cCAvIGNvbHVtbnNJbkdyb3VwKTtcbiAgICAgICAgY29sdW1uID0gc2xpZGVJbmRleEluR3JvdXAgLSByb3cgKiBjb2x1bW5zSW5Hcm91cCArIGdyb3VwSW5kZXggKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgIG5ld1NsaWRlT3JkZXJJbmRleCA9IGNvbHVtbiArIHJvdyAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gICAgICAgIHNsaWRlLmNzcyh7XG4gICAgICAgICAgJy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy1tb3otYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy1tcy1mbGV4LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICctd2Via2l0LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgIG9yZGVyOiBuZXdTbGlkZU9yZGVySW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICByb3cgPSBpIC0gY29sdW1uICogc2xpZGVzUGVyQ29sdW1uO1xuXG4gICAgICAgIGlmIChjb2x1bW4gPiBudW1GdWxsQ29sdW1ucyB8fCBjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gc2xpZGVzUGVyQ29sdW1uIC0gMSkge1xuICAgICAgICAgIHJvdyArPSAxO1xuXG4gICAgICAgICAgaWYgKHJvdyA+PSBzbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgICAgICAgIHJvdyA9IDA7XG4gICAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlclJvdyk7XG4gICAgICAgIGNvbHVtbiA9IGkgLSByb3cgKiBzbGlkZXNQZXJSb3c7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlLmNzcyhnZXREaXJlY3Rpb25MYWJlbCgnbWFyZ2luLXRvcCcpLCByb3cgIT09IDAgPyBwYXJhbXMuc3BhY2VCZXR3ZWVuICYmIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCIgOiAnJyk7XG4gICAgfVxuXG4gICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgdmFyIHNsaWRlU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZVswXSk7XG4gICAgICB2YXIgY3VycmVudFRyYW5zZm9ybSA9IHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgIHZhciBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGUub3V0ZXJXaWR0aCh0cnVlKSA6IHNsaWRlLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHZhciB3aWR0aCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICd3aWR0aCcpO1xuICAgICAgICB2YXIgcGFkZGluZ0xlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1sZWZ0Jyk7XG4gICAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICB2YXIgbWFyZ2luTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tbGVmdCcpO1xuICAgICAgICB2YXIgbWFyZ2luUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIHZhciBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG5cbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBfc2xpZGUkID0gc2xpZGVbMF0sXG4gICAgICAgICAgICAgIGNsaWVudFdpZHRoID0gX3NsaWRlJC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgb2Zmc2V0V2lkdGggPSBfc2xpZGUkLm9mZnNldFdpZHRoO1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQgKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQgKyAob2Zmc2V0V2lkdGggLSBjbGllbnRXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVTaXplID0gKHN3aXBlclNpemUgLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgLSAxKSAqIHNwYWNlQmV0d2VlbikgLyBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG5cbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IHNsaWRlU2l6ZSArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cblxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICB2YXIgbmV3U2xpZGVzR3JpZDtcblxuICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIHdpZHRoOiBzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgdmFyIF8kd3JhcHBlckVsJGNzcztcblxuICAgICR3cmFwcGVyRWwuY3NzKChfJHdyYXBwZXJFbCRjc3MgPSB7fSwgXyR3cmFwcGVyRWwkY3NzW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCIsIF8kd3JhcHBlckVsJGNzcykpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgdmFyIF8kd3JhcHBlckVsJGNzczI7XG5cbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzd2lwZXIudmlydHVhbFNpemUgLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAtIHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgJHdyYXBwZXJFbC5jc3MoKF8kd3JhcHBlckVsJGNzczIgPSB7fSwgXyR3cmFwcGVyRWwkY3NzMltnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICsgXCJweFwiLCBfJHdyYXBwZXJFbCRjc3MyKSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBuZXdTbGlkZXNHcmlkID0gW107XG5cbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBzbmFwR3JpZC5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAgICAgdmFyIHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbX2ldO1xuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgICAgaWYgKHNuYXBHcmlkW19pXSA8IHN3aXBlci52aXJ0dWFsU2l6ZSArIHNuYXBHcmlkWzBdKSBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgfVxuICB9IC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoXG5cblxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcblxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHNuYXBHcmlkLmxlbmd0aDsgX2kyICs9IDEpIHtcbiAgICAgIHZhciBfc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtfaTJdO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIF9zbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3IoX3NsaWRlc0dyaWRJdGVtKTtcblxuICAgICAgaWYgKHNuYXBHcmlkW19pMl0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goX3NsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG5cbiAgICBpZiAoTWF0aC5mbG9vcihzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSAtIE1hdGguZmxvb3Ioc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0pID4gMSkge1xuICAgICAgc25hcEdyaWQucHVzaChzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcblxuICBpZiAocGFyYW1zLnNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIHZhciBfc2xpZGVzJGZpbHRlciRjc3M7XG5cbiAgICB2YXIga2V5ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHJ0bCA/ICdtYXJnaW5MZWZ0JyA6IGdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoZnVuY3Rpb24gKF8sIHNsaWRlSW5kZXgpIHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUpIHJldHVybiB0cnVlO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5jc3MoKF9zbGlkZXMkZmlsdGVyJGNzcyA9IHt9LCBfc2xpZGVzJGZpbHRlciRjc3Nba2V5XSA9IHNwYWNlQmV0d2VlbiArIFwicHhcIiwgX3NsaWRlcyRmaWx0ZXIkY3NzKSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgIHZhciBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGVTaXplVmFsdWUpIHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgdmFyIG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTtcbiAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChmdW5jdGlvbiAoc25hcCkge1xuICAgICAgaWYgKHNuYXAgPCAwKSByZXR1cm4gLW9mZnNldEJlZm9yZTtcbiAgICAgIGlmIChzbmFwID4gbWF4U25hcCkgcmV0dXJuIG1heFNuYXAgKyBvZmZzZXRBZnRlcjtcbiAgICAgIHJldHVybiBzbmFwO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICB2YXIgX2FsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZVNpemVWYWx1ZSkge1xuICAgICAgX2FsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBfYWxsU2xpZGVzU2l6ZSAtPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuXG4gICAgaWYgKF9hbGxTbGlkZXNTaXplIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgdmFyIGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gX2FsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNuYXAsIHNuYXBJbmRleCkge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwLCBzbmFwSW5kZXgpIHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBzbGlkZXM6IHNsaWRlcyxcbiAgICBzbmFwR3JpZDogc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZDogc2xpZGVzR3JpZCxcbiAgICBzbGlkZXNTaXplc0dyaWQ6IHNsaWRlc1NpemVzR3JpZFxuICB9KTtcblxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0KHNwZWVkKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgYWN0aXZlU2xpZGVzID0gW107XG4gIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgdmFyIG5ld0hlaWdodCA9IDA7XG4gIHZhciBpO1xuXG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICdudW1iZXInKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICB9IGVsc2UgaWYgKHNwZWVkID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gIH1cblxuICB2YXIgZ2V0U2xpZGVCeUluZGV4ID0gZnVuY3Rpb24gZ2V0U2xpZGVCeUluZGV4KGluZGV4KSB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXMuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCkgPT09IGluZGV4O1xuICAgICAgfSlbMF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpWzBdO1xuICB9OyAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuXG5cbiAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgIGlmIChpbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoICYmICFpc1ZpcnR1YWwpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KHN3aXBlci5hY3RpdmVJbmRleCkpO1xuICB9IC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuXG5cbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgfVxuICB9IC8vIFVwZGF0ZSBIZWlnaHRcblxuXG4gIGlmIChuZXdIZWlnaHQpIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgbmV3SGVpZ2h0ICsgXCJweFwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNPZmZzZXQoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcDtcbiAgfVxufSIsImltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlID0gdGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSB8fCAwO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB2YXIgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlOyAvLyBWaXNpYmxlIFNsaWRlc1xuXG4gIHNsaWRlcy5yZW1vdmVDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICB2YXIgc2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG5cbiAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHZhciBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgdmFyIHNsaWRlQWZ0ZXIgPSBzbGlkZUJlZm9yZSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICB2YXIgaXNWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8IHN3aXBlci5zaXplIC0gMSB8fCBzbGlkZUFmdGVyID4gMSAmJiBzbGlkZUFmdGVyIDw9IHN3aXBlci5zaXplIHx8IHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZTtcblxuICAgICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIHNsaWRlcy5lcShpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICB9XG5cbiAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSAkKHN3aXBlci52aXNpYmxlU2xpZGVzKTtcbn0iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHRyYW5zbGF0ZSA9IHN3aXBlciAmJiBzd2lwZXIudHJhbnNsYXRlICYmIHN3aXBlci50cmFuc2xhdGUgKiBtdWx0aXBsaWVyIHx8IDA7XG4gIH1cblxuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyIHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICB2YXIgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3MsXG4gICAgICBpc0JlZ2lubmluZyA9IHN3aXBlci5pc0JlZ2lubmluZyxcbiAgICAgIGlzRW5kID0gc3dpcGVyLmlzRW5kO1xuICB2YXIgd2FzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmc7XG4gIHZhciB3YXNFbmQgPSBpc0VuZDtcblxuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBwcm9ncmVzcyA9IDA7XG4gICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgIGlzRW5kID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgaXNCZWdpbm5pbmcgPSBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gcHJvZ3Jlc3MgPj0gMTtcbiAgfVxuXG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBwcm9ncmVzczogcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmc6IGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kOiBpc0VuZFxuICB9KTtcbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuXG4gIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoRW5kIHRvRWRnZScpO1xuICB9XG5cbiAgaWYgKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcgfHwgd2FzRW5kICYmICFpc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZU5leHRDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlUHJldkNsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICB2YXIgYWN0aXZlU2xpZGU7XG5cbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGFjdGl2ZVNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuZmluZChcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgYWN0aXZlSW5kZXggKyBcIlxcXCJdXCIpO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmVxKGFjdGl2ZUluZGV4KTtcbiAgfSAvLyBBY3RpdmUgY2xhc3Nlc1xuXG5cbiAgYWN0aXZlU2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChhY3RpdmVTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgfSAvLyBOZXh0IFNsaWRlXG5cblxuICB2YXIgbmV4dFNsaWRlID0gYWN0aXZlU2xpZGUubmV4dEFsbChcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCAmJiBuZXh0U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgbmV4dFNsaWRlID0gc2xpZGVzLmVxKDApO1xuICAgIG5leHRTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICB9IC8vIFByZXYgU2xpZGVcblxuXG4gIHZhciBwcmV2U2xpZGUgPSBhY3RpdmVTbGlkZS5wcmV2QWxsKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpLmVxKDApLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wICYmIHByZXZTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZXEoLTEpO1xuICAgIHByZXZTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKG5leHRTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIG5leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChwcmV2U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIjpub3QoLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9XG4gIH1cblxuICBzd2lwZXIuZW1pdFNsaWRlc0NsYXNzZXMoKTtcbn0iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIHZhciBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgcHJldmlvdXNSZWFsSW5kZXggPSBzd2lwZXIucmVhbEluZGV4LFxuICAgICAgcHJldmlvdXNTbmFwSW5kZXggPSBzd2lwZXIuc25hcEluZGV4O1xuICB2YXIgYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDtcbiAgdmFyIHNuYXBJbmRleDtcblxuICBpZiAodHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdIC0gKHNsaWRlc0dyaWRbaSArIDFdIC0gc2xpZGVzR3JpZFtpXSkgLyAyKSB7XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfSAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuXG5cbiAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICAgIGlmIChhY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgYWN0aXZlSW5kZXggPSAwO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSkgPj0gMCkge1xuICAgIHNuYXBJbmRleCA9IHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cblxuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoc25hcEluZGV4ICE9PSBwcmV2aW91c1NuYXBJbmRleCkge1xuICAgICAgc3dpcGVyLnNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0gLy8gR2V0IHJlYWwgaW5kZXhcblxuXG4gIHZhciByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LCAxMCk7XG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBzbmFwSW5kZXg6IHNuYXBJbmRleCxcbiAgICByZWFsSW5kZXg6IHJlYWxJbmRleCxcbiAgICBwcmV2aW91c0luZGV4OiBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4OiBhY3RpdmVJbmRleFxuICB9KTtcbiAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcblxuICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFsSW5kZXhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgfHwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2UnKTtcbiAgfVxufSIsImltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZSkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciBzbGlkZSA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcylbMF07XG4gIHZhciBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIHZhciBzbGlkZUluZGV4O1xuXG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSB7XG4gICAgICAgIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG5cbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludCgkKHNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBzbGlkZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59IiwiaW1wb3J0IGdldFRyYW5zbGF0ZSBmcm9tICcuL2dldFRyYW5zbGF0ZSc7XG5pbXBvcnQgc2V0VHJhbnNsYXRlIGZyb20gJy4vc2V0VHJhbnNsYXRlJztcbmltcG9ydCBtaW5UcmFuc2xhdGUgZnJvbSAnLi9taW5UcmFuc2xhdGUnO1xuaW1wb3J0IG1heFRyYW5zbGF0ZSBmcm9tICcuL21heFRyYW5zbGF0ZSc7XG5pbXBvcnQgdHJhbnNsYXRlVG8gZnJvbSAnLi90cmFuc2xhdGVUbyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldFRyYW5zbGF0ZTogZ2V0VHJhbnNsYXRlLFxuICBzZXRUcmFuc2xhdGU6IHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlOiBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZTogbWF4VHJhbnNsYXRlLFxuICB0cmFuc2xhdGVUbzogdHJhbnNsYXRlVG9cbn07IiwiaW1wb3J0IHsgZ2V0VHJhbnNsYXRlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3dpcGVyVHJhbnNsYXRlKGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIHRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGUsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG5cbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRUcmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUoJHdyYXBwZXJFbFswXSwgYXhpcyk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcbiAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcztcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7XG4gIHZhciB6ID0gMDtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICAkd3JhcHBlckVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIFwiICsgeiArIFwicHgpXCIpO1xuICB9XG5cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5OyAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHVwZGF0ZSBwcm9ncmVzc1xuXG4gIHZhciBuZXdQcm9ncmVzcztcbiAgdmFyIHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cblxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zbGF0ZVRvKHRyYW5zbGF0ZSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgdHJhbnNsYXRlQm91bmRzLCBpbnRlcm5hbCkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSAwO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZUJvdW5kcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbWluVHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICB2YXIgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICB2YXIgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTsgLy8gVXBkYXRlIHByb2dyZXNzXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgdmFyIGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcblxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHdyYXBwZXJFbC5zY3JvbGxUbykge1xuICAgICAgICB2YXIgX3dyYXBwZXJFbCRzY3JvbGxUbztcblxuICAgICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oKF93cmFwcGVyRWwkc2Nyb2xsVG8gPSB7fSwgX3dyYXBwZXJFbCRzY3JvbGxUb1tpc0ggPyAnbGVmdCcgOiAndG9wJ10gPSAtbmV3VHJhbnNsYXRlLCBfd3JhcHBlckVsJHNjcm9sbFRvLmJlaGF2aW9yID0gJ3Ntb290aCcsIF93cmFwcGVyRWwkc2Nyb2xsVG8pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcblxuICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHNldFRyYW5zaXRpb24gZnJvbSAnLi9zZXRUcmFuc2l0aW9uJztcbmltcG9ydCB0cmFuc2l0aW9uU3RhcnQgZnJvbSAnLi90cmFuc2l0aW9uU3RhcnQnO1xuaW1wb3J0IHRyYW5zaXRpb25FbmQgZnJvbSAnLi90cmFuc2l0aW9uRW5kJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0VHJhbnNpdGlvbjogc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0OiB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmRcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cblxuICB2YXIgZGlyID0gZGlyZWN0aW9uO1xuXG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO2Vsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO2Vsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcblxuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uU3RhcnQnKTtcblxuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25TdGFydCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVQcmV2VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICB2YXIgZGlyID0gZGlyZWN0aW9uO1xuXG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO2Vsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO2Vsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVJlc2V0VHJhbnNpdGlvbkVuZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZVRyYW5zaXRpb25FbmQnKTtcblxuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25FbmQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUHJldlRyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgc2xpZGVUbyBmcm9tICcuL3NsaWRlVG8nO1xuaW1wb3J0IHNsaWRlVG9Mb29wIGZyb20gJy4vc2xpZGVUb0xvb3AnO1xuaW1wb3J0IHNsaWRlTmV4dCBmcm9tICcuL3NsaWRlTmV4dCc7XG5pbXBvcnQgc2xpZGVQcmV2IGZyb20gJy4vc2xpZGVQcmV2JztcbmltcG9ydCBzbGlkZVJlc2V0IGZyb20gJy4vc2xpZGVSZXNldCc7XG5pbXBvcnQgc2xpZGVUb0Nsb3Nlc3QgZnJvbSAnLi9zbGlkZVRvQ2xvc2VzdCc7XG5pbXBvcnQgc2xpZGVUb0NsaWNrZWRTbGlkZSBmcm9tICcuL3NsaWRlVG9DbGlja2VkU2xpZGUnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzbGlkZVRvOiBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcDogc2xpZGVUb0xvb3AsXG4gIHNsaWRlTmV4dDogc2xpZGVOZXh0LFxuICBzbGlkZVByZXY6IHNsaWRlUHJldixcbiAgc2xpZGVSZXNldDogc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3Q6IHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBzbGlkZVRvQ2xpY2tlZFNsaWRlXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCBpbml0aWFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInICYmIHR5cGVvZiBpbmRleCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgJ2luZGV4JyBhcmd1bWVudCBjYW5ub3QgaGF2ZSB0eXBlIG90aGVyIHRoYW4gJ251bWJlcicgb3IgJ3N0cmluZycuIFtcIiArIHR5cGVvZiBpbmRleCArIFwiXSBnaXZlbi5cIik7XG4gIH1cblxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIC8qKlxuICAgICAqIFRoZSBgaW5kZXhgIGFyZ3VtZW50IGNvbnZlcnRlZCBmcm9tIGBzdHJpbmdgIHRvIGBudW1iZXJgLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdmFyIGluZGV4QXNOdW1iZXIgPSBwYXJzZUludChpbmRleCwgMTApO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgYGluZGV4YCBhcmd1bWVudCBpcyBhIHZhbGlkIGBudW1iZXJgXG4gICAgICogYWZ0ZXIgYmVpbmcgY29udmVydGVkIGZyb20gdGhlIGBzdHJpbmdgIHR5cGUuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG5cbiAgICB2YXIgaXNWYWxpZE51bWJlciA9IGlzRmluaXRlKGluZGV4QXNOdW1iZXIpO1xuXG4gICAgaWYgKCFpc1ZhbGlkTnVtYmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcGFzc2VkLWluICdpbmRleCcgKHN0cmluZykgY291bGRuJ3QgYmUgY29udmVydGVkIHRvICdudW1iZXInLiBbXCIgKyBpbmRleCArIFwiXSBnaXZlbi5cIik7XG4gICAgfSAvLyBLbm93aW5nIHRoYXQgdGhlIGNvbnZlcnRlZCBgaW5kZXhgIGlzIGEgdmFsaWQgbnVtYmVyLFxuICAgIC8vIHdlIGNhbiB1cGRhdGUgdGhlIG9yaWdpbmFsIGFyZ3VtZW50J3MgdmFsdWUuXG5cblxuICAgIGluZGV4ID0gaW5kZXhBc051bWJlcjtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4LFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIHx8ICFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICB2YXIgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAoKGFjdGl2ZUluZGV4IHx8IHBhcmFtcy5pbml0aWFsU2xpZGUgfHwgMCkgPT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gIH1cblxuICB2YXIgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07IC8vIFVwZGF0ZSBwcm9ncmVzc1xuXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpOyAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuXG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSAtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApO1xuICAgICAgdmFyIG5vcm1hbGl6ZWRHaXJkID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKTtcbiAgICAgIHZhciBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcblxuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdpcmQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCAtIChub3JtYWxpemVkR3JpZE5leHQgLSBub3JtYWxpemVkR2lyZCkgLyAyKSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR2lyZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0KSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdpcmQpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JzsgLy8gVXBkYXRlIEluZGV4XG5cbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpOyAvLyBVcGRhdGUgSGVpZ2h0XG5cbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgdmFyIGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICB2YXIgdCA9IC10cmFuc2xhdGU7XG5cbiAgICBpZiAocnRsKSB7XG4gICAgICB0ID0gd3JhcHBlckVsLnNjcm9sbFdpZHRoIC0gd3JhcHBlckVsLm9mZnNldFdpZHRoIC0gdDtcbiAgICB9XG5cbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh3cmFwcGVyRWwuc2Nyb2xsVG8pIHtcbiAgICAgICAgdmFyIF93cmFwcGVyRWwkc2Nyb2xsVG87XG5cbiAgICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKChfd3JhcHBlckVsJHNjcm9sbFRvID0ge30sIF93cmFwcGVyRWwkc2Nyb2xsVG9baXNIID8gJ2xlZnQnIDogJ3RvcCddID0gdCwgX3dyYXBwZXJFbCRzY3JvbGxUby5iZWhhdmlvciA9ICdzbW9vdGgnLCBfd3JhcHBlckVsJHNjcm9sbFRvKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcblxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuXG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIG5ld0luZGV4ID0gaW5kZXg7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIG5ld0luZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlTmV4dChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgYW5pbWF0aW5nID0gc3dpcGVyLmFuaW1hdGluZyxcbiAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICB2YXIgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGUpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVByZXYoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIGFuaW1hdGluZyA9IHN3aXBlci5hbmltYXRpbmcsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgIHJ0bFRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICBlbmFibGVkID0gc3dpcGVyLmVuYWJsZWQ7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuIHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkZSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgfVxuXG4gIHZhciB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuXG4gIHZhciBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIHZhciBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiBub3JtYWxpemUodmFsKTtcbiAgfSk7XG4gIHZhciBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG5cbiAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzbmFwR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICBpZiAoIXByZXZTbmFwICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gc25hcCkgcHJldlNuYXAgPSBzbmFwO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHByZXZJbmRleDtcblxuICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3Qoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIHRocmVzaG9sZCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyZXNob2xkID0gMC41O1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgdmFyIHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpO1xuICB2YXIgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgaWYgKHRyYW5zbGF0ZSA+PSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XSkge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICB2YXIgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICB2YXIgbmV4dFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4ICsgMV07XG5cbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIHZhciBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTtcbiAgICB2YXIgX2N1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG5cbiAgICBpZiAodHJhbnNsYXRlIC0gcHJldlNuYXAgPD0gKF9jdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cblxuICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsImltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBuZXh0VGljayB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgdmFyIHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgdmFyIHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIHZhciByZWFsSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludCgkKHN3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXTpub3QoLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilcIikuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIHNsaWRlVG9JbmRleCA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufSIsImltcG9ydCBsb29wQ3JlYXRlIGZyb20gJy4vbG9vcENyZWF0ZSc7XG5pbXBvcnQgbG9vcEZpeCBmcm9tICcuL2xvb3BGaXgnO1xuaW1wb3J0IGxvb3BEZXN0cm95IGZyb20gJy4vbG9vcERlc3Ryb3knO1xuZXhwb3J0IGRlZmF1bHQge1xuICBsb29wQ3JlYXRlOiBsb29wQ3JlYXRlLFxuICBsb29wRml4OiBsb29wRml4LFxuICBsb29wRGVzdHJveTogbG9vcERlc3Ryb3lcbn07IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29wQ3JlYXRlKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7IC8vIFJlbW92ZSBkdXBsaWNhdGVkIHNsaWRlc1xuXG4gICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpLnJlbW92ZSgpO1xuICB2YXIgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHtcbiAgICB2YXIgYmxhbmtTbGlkZXNOdW0gPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgLSBzbGlkZXMubGVuZ3RoICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgaWYgKGJsYW5rU2xpZGVzTnVtICE9PSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxhbmtTbGlkZXNOdW07IGkgKz0gMSkge1xuICAgICAgICB2YXIgYmxhbmtOb2RlID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3MpO1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChibGFua05vZGUpO1xuICAgICAgfVxuXG4gICAgICBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFwYXJhbXMubG9vcGVkU2xpZGVzKSBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5sb29wZWRTbGlkZXMgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuXG4gIGlmIChzd2lwZXIubG9vcGVkU2xpZGVzID4gc2xpZGVzLmxlbmd0aCkge1xuICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICB9XG5cbiAgdmFyIHByZXBlbmRTbGlkZXMgPSBbXTtcbiAgdmFyIGFwcGVuZFNsaWRlcyA9IFtdO1xuICBzbGlkZXMuZWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgdmFyIHNsaWRlID0gJChlbCk7XG5cbiAgICBpZiAoaW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzKSB7XG4gICAgICBhcHBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgc2xpZGVzLmxlbmd0aCAmJiBpbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcykge1xuICAgICAgcHJlcGVuZFNsaWRlcy5wdXNoKGVsKTtcbiAgICB9XG5cbiAgICBzbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgfSk7XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFwcGVuZFNsaWRlcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZCgkKGFwcGVuZFNsaWRlc1tfaV0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICB9XG5cbiAgZm9yICh2YXIgX2kyID0gcHJlcGVuZFNsaWRlcy5sZW5ndGggLSAxOyBfaTIgPj0gMDsgX2kyIC09IDEpIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoJChwcmVwZW5kU2xpZGVzW19pMl0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcEZpeCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVMb29wRml4Jyk7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICBsb29wZWRTbGlkZXMgPSBzd2lwZXIubG9vcGVkU2xpZGVzLFxuICAgICAgYWxsb3dTbGlkZVByZXYgPSBzd2lwZXIuYWxsb3dTbGlkZVByZXYsXG4gICAgICBhbGxvd1NsaWRlTmV4dCA9IHN3aXBlci5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgdmFyIG5ld0luZGV4O1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICB2YXIgc25hcFRyYW5zbGF0ZSA9IC1zbmFwR3JpZFthY3RpdmVJbmRleF07XG4gIHZhciBkaWZmID0gc25hcFRyYW5zbGF0ZSAtIHN3aXBlci5nZXRUcmFuc2xhdGUoKTsgLy8gRml4IEZvciBOZWdhdGl2ZSBPdmVyc2xpZGluZ1xuXG4gIGlmIChhY3RpdmVJbmRleCA8IGxvb3BlZFNsaWRlcykge1xuICAgIG5ld0luZGV4ID0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcyAqIDMgKyBhY3RpdmVJbmRleDtcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgdmFyIHNsaWRlQ2hhbmdlZCA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYWN0aXZlSW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcykge1xuICAgIC8vIEZpeCBGb3IgUG9zaXRpdmUgT3ZlcnNsaWRpbmdcbiAgICBuZXdJbmRleCA9IC1zbGlkZXMubGVuZ3RoICsgYWN0aXZlSW5kZXggKyBsb29wZWRTbGlkZXM7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuXG4gICAgdmFyIF9zbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuXG4gICAgaWYgKF9zbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29wRGVzdHJveSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiLC5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVCbGFua0NsYXNzKS5yZW1vdmUoKTtcbiAgc2xpZGVzLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG59IiwiaW1wb3J0IHNldEdyYWJDdXJzb3IgZnJvbSAnLi9zZXRHcmFiQ3Vyc29yJztcbmltcG9ydCB1bnNldEdyYWJDdXJzb3IgZnJvbSAnLi91bnNldEdyYWJDdXJzb3InO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRHcmFiQ3Vyc29yOiBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3I6IHVuc2V0R3JhYkN1cnNvclxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRHcmFiQ3Vyc29yKG1vdmluZykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgdmFyIGVsID0gc3dpcGVyLmVsO1xuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctd2Via2l0LWdyYWJiaW5nJyA6ICctd2Via2l0LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLW1vei1ncmFiYmluJyA6ICctbW96LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvcigpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpcGVyLmVsLnN0eWxlLmN1cnNvciA9ICcnO1xufSIsImltcG9ydCBhcHBlbmRTbGlkZSBmcm9tICcuL2FwcGVuZFNsaWRlJztcbmltcG9ydCBwcmVwZW5kU2xpZGUgZnJvbSAnLi9wcmVwZW5kU2xpZGUnO1xuaW1wb3J0IGFkZFNsaWRlIGZyb20gJy4vYWRkU2xpZGUnO1xuaW1wb3J0IHJlbW92ZVNsaWRlIGZyb20gJy4vcmVtb3ZlU2xpZGUnO1xuaW1wb3J0IHJlbW92ZUFsbFNsaWRlcyBmcm9tICcuL3JlbW92ZUFsbFNsaWRlcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGFwcGVuZFNsaWRlOiBhcHBlbmRTbGlkZSxcbiAgcHJlcGVuZFNsaWRlOiBwcmVwZW5kU2xpZGUsXG4gIGFkZFNsaWRlOiBhZGRTbGlkZSxcbiAgcmVtb3ZlU2xpZGU6IHJlbW92ZVNsaWRlLFxuICByZW1vdmVBbGxTbGlkZXM6IHJlbW92ZUFsbFNsaWRlc1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXMpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuXG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBzd2lwZXIuc3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVwZW5kU2xpZGUoc2xpZGVzKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICB9XG5cbiAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuXG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuXG4gICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlcyk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuXG4gIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU2xpZGUoaW5kZXgsIHNsaWRlcykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgdmFyIGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKTtcbiAgfVxuXG4gIHZhciBiYXNlTGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4IDw9IDApIHtcbiAgICBzd2lwZXIucHJlcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZGV4ID49IGJhc2VMZW5ndGgpIHtcbiAgICBzd2lwZXIuYXBwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyAxIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gIHZhciBzbGlkZXNCdWZmZXIgPSBbXTtcblxuICBmb3IgKHZhciBpID0gYmFzZUxlbmd0aCAtIDE7IGkgPj0gaW5kZXg7IGkgLT0gMSkge1xuICAgIHZhciBjdXJyZW50U2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgIGN1cnJlbnRTbGlkZS5yZW1vdmUoKTtcbiAgICBzbGlkZXNCdWZmZXIudW5zaGlmdChjdXJyZW50U2xpZGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBzbGlkZXMubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW19pXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW19pXSk7XG4gICAgfVxuXG4gICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyBzbGlkZXMubGVuZ3RoIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHNsaWRlc0J1ZmZlci5sZW5ndGg7IF9pMiArPSAxKSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzQnVmZmVyW19pMl0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuXG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBzd2lwZXIuc3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgdmFyIGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKTtcbiAgfVxuXG4gIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyO1xuICB2YXIgaW5kZXhUb1JlbW92ZTtcblxuICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlc0luZGV4ZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0luZGV4ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzW2ldO1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgIH1cblxuICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICB9IGVsc2Uge1xuICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzO1xuICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVzSW5kZXhlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgfVxuXG4gIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbn0iLCJpbXBvcnQgc2V0QnJlYWtwb2ludCBmcm9tICcuL3NldEJyZWFrcG9pbnQnO1xuaW1wb3J0IGdldEJyZWFrcG9pbnQgZnJvbSAnLi9nZXRCcmVha3BvaW50JztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0QnJlYWtwb2ludDogc2V0QnJlYWtwb2ludCxcbiAgZ2V0QnJlYWtwb2ludDogZ2V0QnJlYWtwb2ludFxufTsiLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgaW5pdGlhbGl6ZWQgPSBzd2lwZXIuaW5pdGlhbGl6ZWQsXG4gICAgICBfc3dpcGVyJGxvb3BlZFNsaWRlcyA9IHN3aXBlci5sb29wZWRTbGlkZXMsXG4gICAgICBsb29wZWRTbGlkZXMgPSBfc3dpcGVyJGxvb3BlZFNsaWRlcyA9PT0gdm9pZCAwID8gMCA6IF9zd2lwZXIkbG9vcGVkU2xpZGVzLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICRlbCA9IHN3aXBlci4kZWw7XG4gIHZhciBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgaWYgKCFicmVha3BvaW50cyB8fCBicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSByZXR1cm47IC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG5cbiAgdmFyIGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgc3dpcGVyLnBhcmFtcy5icmVha3BvaW50c0Jhc2UsIHN3aXBlci5lbCk7XG4gIGlmICghYnJlYWtwb2ludCB8fCBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnQpIHJldHVybjtcbiAgdmFyIGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuXG4gIGlmIChicmVha3BvaW50T25seVBhcmFtcykge1xuICAgIFsnc2xpZGVzUGVyVmlldycsICdzcGFjZUJldHdlZW4nLCAnc2xpZGVzUGVyR3JvdXAnLCAnc2xpZGVzUGVyR3JvdXBTa2lwJywgJ3NsaWRlc1BlckNvbHVtbiddLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgcGFyYW1WYWx1ZSA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXTtcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1WYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcblxuICAgICAgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycgJiYgKHBhcmFtVmFsdWUgPT09ICdBVVRPJyB8fCBwYXJhbVZhbHVlID09PSAnYXV0bycpKSB7XG4gICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9ICdhdXRvJztcbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gPT09ICdzbGlkZXNQZXJWaWV3Jykge1xuICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSBwYXJzZUZsb2F0KHBhcmFtVmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VJbnQocGFyYW1WYWx1ZSwgMTApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gIHZhciB3YXNNdWx0aVJvdyA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxO1xuICB2YXIgaXNNdWx0aVJvdyA9IGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMTtcbiAgdmFyIHdhc0VuYWJsZWQgPSBwYXJhbXMuZW5hYmxlZDtcblxuICBpZiAod2FzTXVsdGlSb3cgJiYgIWlzTXVsdGlSb3cpIHtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93IFwiICsgcGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93LWNvbHVtblwiKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfSBlbHNlIGlmICghd2FzTXVsdGlSb3cgJiYgaXNNdWx0aVJvdykge1xuICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwibXVsdGlyb3dcIik7XG5cbiAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsICYmIGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicgfHwgIWJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCAmJiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwibXVsdGlyb3ctY29sdW1uXCIpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9XG5cbiAgdmFyIGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgdmFyIG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG5cbiAgaWYgKGRpcmVjdGlvbkNoYW5nZWQgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gIH1cblxuICBleHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIHZhciBpc0VuYWJsZWQgPSBzd2lwZXIucGFyYW1zLmVuYWJsZWQ7XG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICB9KTtcblxuICBpZiAod2FzRW5hYmxlZCAmJiAhaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmRpc2FibGUoKTtcbiAgfSBlbHNlIGlmICghd2FzRW5hYmxlZCAmJiBpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZW5hYmxlKCk7XG4gIH1cblxuICBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICBzd2lwZXIuZW1pdCgnX2JlZm9yZUJyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcblxuICBpZiAobmVlZHNSZUxvb3AgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCAtIGxvb3BlZFNsaWRlcyArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBiYXNlLCBjb250YWluZXJFbCkge1xuICBpZiAoYmFzZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZSA9ICd3aW5kb3cnO1xuICB9XG5cbiAgaWYgKCFicmVha3BvaW50cyB8fCBiYXNlID09PSAnY29udGFpbmVyJyAmJiAhY29udGFpbmVyRWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBicmVha3BvaW50ID0gZmFsc2U7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgdmFyIHBvaW50cyA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5tYXAoZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICB2YXIgbWluUmF0aW8gPSBwYXJzZUZsb2F0KHBvaW50LnN1YnN0cigxKSk7XG4gICAgICB2YXIgdmFsdWUgPSBjdXJyZW50SGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHBvaW50OiBwb2ludFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnQ6IHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKTtcbiAgfSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgX3BvaW50cyRpID0gcG9pbnRzW2ldLFxuICAgICAgICBwb2ludCA9IF9wb2ludHMkaS5wb2ludCxcbiAgICAgICAgdmFsdWUgPSBfcG9pbnRzJGkudmFsdWU7XG5cbiAgICBpZiAoYmFzZSA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IFwiICsgdmFsdWUgKyBcInB4KVwiKS5tYXRjaGVzKSB7XG4gICAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlIDw9IGNvbnRhaW5lckVsLmNsaWVudFdpZHRoKSB7XG4gICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59IiwiaW1wb3J0IGFkZENsYXNzZXMgZnJvbSAnLi9hZGRDbGFzc2VzJztcbmltcG9ydCByZW1vdmVDbGFzc2VzIGZyb20gJy4vcmVtb3ZlQ2xhc3Nlcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGFkZENsYXNzZXM6IGFkZENsYXNzZXMsXG4gIHJlbW92ZUNsYXNzZXM6IHJlbW92ZUNsYXNzZXNcbn07IiwiZnVuY3Rpb24gcHJlcGFyZUNsYXNzZXMoZW50cmllcywgcHJlZml4KSB7XG4gIHZhciByZXN1bHRDbGFzc2VzID0gW107XG4gIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKGl0ZW0pLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZXMpIHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZENsYXNzZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgY2xhc3NOYW1lcyA9IHN3aXBlci5jbGFzc05hbWVzLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGwsXG4gICAgICAkZWwgPSBzd2lwZXIuJGVsLFxuICAgICAgZGV2aWNlID0gc3dpcGVyLmRldmljZSxcbiAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDsgLy8gcHJldHRpZXItaWdub3JlXG5cbiAgdmFyIHN1ZmZpeGVzID0gcHJlcGFyZUNsYXNzZXMoWydpbml0aWFsaXplZCcsIHBhcmFtcy5kaXJlY3Rpb24sIHtcbiAgICAncG9pbnRlci1ldmVudHMnOiBzdXBwb3J0LnBvaW50ZXJFdmVudHMgJiYgIXN1cHBvcnQudG91Y2hcbiAgfSwge1xuICAgICdmcmVlLW1vZGUnOiBwYXJhbXMuZnJlZU1vZGVcbiAgfSwge1xuICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHRcbiAgfSwge1xuICAgICdydGwnOiBydGxcbiAgfSwge1xuICAgICdtdWx0aXJvdyc6IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxXG4gIH0sIHtcbiAgICAnbXVsdGlyb3ctY29sdW1uJzogcGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEgJiYgcGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nXG4gIH0sIHtcbiAgICAnYW5kcm9pZCc6IGRldmljZS5hbmRyb2lkXG4gIH0sIHtcbiAgICAnaW9zJzogZGV2aWNlLmlvc1xuICB9LCB7XG4gICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGVcbiAgfV0sIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKTtcbiAgY2xhc3NOYW1lcy5wdXNoLmFwcGx5KGNsYXNzTmFtZXMsIHN1ZmZpeGVzKTtcbiAgJGVsLmFkZENsYXNzKFtdLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJykpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICBjbGFzc05hbWVzID0gc3dpcGVyLmNsYXNzTmFtZXM7XG4gICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsImltcG9ydCBsb2FkSW1hZ2UgZnJvbSAnLi9sb2FkSW1hZ2UnO1xuaW1wb3J0IHByZWxvYWRJbWFnZXMgZnJvbSAnLi9wcmVsb2FkSW1hZ2VzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9hZEltYWdlOiBsb2FkSW1hZ2UsXG4gIHByZWxvYWRJbWFnZXM6IHByZWxvYWRJbWFnZXNcbn07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZEltYWdlKGltYWdlRWwsIHNyYywgc3Jjc2V0LCBzaXplcywgY2hlY2tGb3JDb21wbGV0ZSwgY2FsbGJhY2spIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgaW1hZ2U7XG5cbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gIH1cblxuICB2YXIgaXNQaWN0dXJlID0gJChpbWFnZUVsKS5wYXJlbnQoJ3BpY3R1cmUnKVswXTtcblxuICBpZiAoIWlzUGljdHVyZSAmJiAoIWltYWdlRWwuY29tcGxldGUgfHwgIWNoZWNrRm9yQ29tcGxldGUpKSB7XG4gICAgaWYgKHNyYykge1xuICAgICAgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgICBpbWFnZS5vbmxvYWQgPSBvblJlYWR5O1xuICAgICAgaW1hZ2Uub25lcnJvciA9IG9uUmVhZHk7XG5cbiAgICAgIGlmIChzaXplcykge1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgIGltYWdlLnNyY3NldCA9IHNyY3NldDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uUmVhZHkoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaW1hZ2UgYWxyZWFkeSBsb2FkZWQuLi5cbiAgICBvblJlYWR5KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVsb2FkSW1hZ2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgc3dpcGVyLmltYWdlc1RvTG9hZCA9IHN3aXBlci4kZWwuZmluZCgnaW1nJyk7XG5cbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkICE9PSB1bmRlZmluZWQpIHN3aXBlci5pbWFnZXNMb2FkZWQgKz0gMTtcblxuICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkID09PSBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudXBkYXRlT25JbWFnZXNSZWFkeSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgc3dpcGVyLmVtaXQoJ2ltYWdlc1JlYWR5Jyk7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGltYWdlRWwgPSBzd2lwZXIuaW1hZ2VzVG9Mb2FkW2ldO1xuICAgIHN3aXBlci5sb2FkSW1hZ2UoaW1hZ2VFbCwgaW1hZ2VFbC5jdXJyZW50U3JjIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmMnKSwgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLCBpbWFnZUVsLnNpemVzIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzaXplcycpLCB0cnVlLCBvblJlYWR5KTtcbiAgfVxufSIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIGJpbmRNb2R1bGVNZXRob2RzLCBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIE5hdmlnYXRpb24gPSB7XG4gIHRvZ2dsZUVsOiBmdW5jdGlvbiB0b2dnbGVFbCgkZWwsIGRpc2FibGVkKSB7XG4gICAgJGVsW2Rpc2FibGVkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHRoaXMucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgaWYgKCRlbFswXSAmJiAkZWxbMF0udGFnTmFtZSA9PT0gJ0JVVFRPTicpICRlbFswXS5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBVcGRhdGUgTmF2aWdhdGlvbiBCdXR0b25zXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICB2YXIgdG9nZ2xlRWwgPSBzd2lwZXIubmF2aWdhdGlvbi50b2dnbGVFbDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgdmFyIF9zd2lwZXIkbmF2aWdhdGlvbiA9IHN3aXBlci5uYXZpZ2F0aW9uLFxuICAgICAgICAkbmV4dEVsID0gX3N3aXBlciRuYXZpZ2F0aW9uLiRuZXh0RWwsXG4gICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24uJHByZXZFbDtcblxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICB0b2dnbGVFbCgkcHJldkVsLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvZ2dsZUVsKCRwcmV2RWwsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAkcHJldkVsW3N3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgdG9nZ2xlRWwoJG5leHRFbCwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2dnbGVFbCgkbmV4dEVsLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgJG5leHRFbFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBvblByZXZDbGljazogZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gIH0sXG4gIG9uTmV4dENsaWNrOiBmdW5jdGlvbiBvbk5leHRDbGljayhlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLiRlbCwgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLCBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzLCB7XG4gICAgICBuZXh0RWw6ICdzd2lwZXItYnV0dG9uLW5leHQnLFxuICAgICAgcHJldkVsOiAnc3dpcGVyLWJ1dHRvbi1wcmV2J1xuICAgIH0pO1xuICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHJldHVybjtcbiAgICB2YXIgJG5leHRFbDtcbiAgICB2YXIgJHByZXZFbDtcblxuICAgIGlmIChwYXJhbXMubmV4dEVsKSB7XG4gICAgICAkbmV4dEVsID0gJChwYXJhbXMubmV4dEVsKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5uZXh0RWwgPT09ICdzdHJpbmcnICYmICRuZXh0RWwubGVuZ3RoID4gMSAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLm5leHRFbCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICRuZXh0RWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLm5leHRFbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5wcmV2RWwpIHtcbiAgICAgICRwcmV2RWwgPSAkKHBhcmFtcy5wcmV2RWwpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLnByZXZFbCA9PT0gJ3N0cmluZycgJiYgJHByZXZFbC5sZW5ndGggPiAxICYmIHN3aXBlci4kZWwuZmluZChwYXJhbXMucHJldkVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgJHByZXZFbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMucHJldkVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCA+IDApIHtcbiAgICAgICRuZXh0RWwub24oJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25OZXh0Q2xpY2spO1xuICAgIH1cblxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgJHByZXZFbC5vbignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vblByZXZDbGljayk7XG4gICAgfVxuXG4gICAgZXh0ZW5kKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgICAkbmV4dEVsOiAkbmV4dEVsLFxuICAgICAgbmV4dEVsOiAkbmV4dEVsICYmICRuZXh0RWxbMF0sXG4gICAgICAkcHJldkVsOiAkcHJldkVsLFxuICAgICAgcHJldkVsOiAkcHJldkVsICYmICRwcmV2RWxbMF1cbiAgICB9KTtcblxuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIGlmICgkbmV4dEVsKSAkbmV4dEVsLmFkZENsYXNzKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgaWYgKCRwcmV2RWwpICRwcmV2RWwuYWRkQ2xhc3MocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb24yID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICRuZXh0RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24yLiRuZXh0RWwsXG4gICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24yLiRwcmV2RWw7XG5cbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkge1xuICAgICAgJG5leHRFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25OZXh0Q2xpY2spO1xuICAgICAgJG5leHRFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGgpIHtcbiAgICAgICRwcmV2RWwub2ZmKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICAgICRwcmV2RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ25hdmlnYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICBuZXh0RWw6IG51bGwsXG4gICAgICBwcmV2RWw6IG51bGwsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsXG4gICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1idXR0b24taGlkZGVuJyxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgbmF2aWdhdGlvbjogX2V4dGVuZHMoe30sIE5hdmlnYXRpb24pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgdG9FZGdlOiBmdW5jdGlvbiB0b0VkZ2Uoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICB9LFxuICAgIGZyb21FZGdlOiBmdW5jdGlvbiBmcm9tRWRnZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgICdlbmFibGUgZGlzYWJsZSc6IGZ1bmN0aW9uIGVuYWJsZURpc2FibGUoc3dpcGVyKSB7XG4gICAgICB2YXIgX3N3aXBlciRuYXZpZ2F0aW9uMyA9IHN3aXBlci5uYXZpZ2F0aW9uLFxuICAgICAgICAgICRuZXh0RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24zLiRuZXh0RWwsXG4gICAgICAgICAgJHByZXZFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjMuJHByZXZFbDtcblxuICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgJG5leHRFbFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubG9ja0NsYXNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgJHByZXZFbFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljayhzd2lwZXIsIGUpIHtcbiAgICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb240ID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjQuJG5leHRFbCxcbiAgICAgICAgICAkcHJldkVsID0gX3N3aXBlciRuYXZpZ2F0aW9uNC4kcHJldkVsO1xuICAgICAgdmFyIHRhcmdldEVsID0gZS50YXJnZXQ7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiYgISQodGFyZ2V0RWwpLmlzKCRwcmV2RWwpICYmICEkKHRhcmdldEVsKS5pcygkbmV4dEVsKSkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgKHN3aXBlci5wYWdpbmF0aW9uLmVsID09PSB0YXJnZXRFbCB8fCBzd2lwZXIucGFnaW5hdGlvbi5lbC5jb250YWlucyh0YXJnZXRFbCkpKSByZXR1cm47XG4gICAgICAgIHZhciBpc0hpZGRlbjtcblxuICAgICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAgIGlzSGlkZGVuID0gJG5leHRFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgICBpc0hpZGRlbiA9ICRwcmV2RWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uU2hvdycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uSGlkZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgICAkbmV4dEVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICAgICRwcmV2RWwudG9nZ2xlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcywgY2xhc3Nlc1RvU2VsZWN0b3IsIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgUGFnaW5hdGlvbiA9IHtcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDsgLy8gQ3VycmVudC9Ub3RhbFxuXG4gICAgdmFyIGN1cnJlbnQ7XG4gICAgdmFyIHRvdGFsID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMikgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBjdXJyZW50ID0gTWF0aC5jZWlsKChzd2lwZXIuYWN0aXZlSW5kZXggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuXG4gICAgICBpZiAoY3VycmVudCA+IHNsaWRlc0xlbmd0aCAtIDEgLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMikge1xuICAgICAgICBjdXJyZW50IC09IHNsaWRlc0xlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudCA+IHRvdGFsIC0gMSkgY3VycmVudCAtPSB0b3RhbDtcbiAgICAgIGlmIChjdXJyZW50IDwgMCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb25UeXBlICE9PSAnYnVsbGV0cycpIGN1cnJlbnQgPSB0b3RhbCArIGN1cnJlbnQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuc25hcEluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgfSAvLyBUeXBlc1xuXG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGJ1bGxldHMgPSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzO1xuICAgICAgdmFyIGZpcnN0SW5kZXg7XG4gICAgICB2YXIgbGFzdEluZGV4O1xuICAgICAgdmFyIG1pZEluZGV4O1xuXG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgPSBidWxsZXRzLmVxKDApW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdvdXRlcldpZHRoJyA6ICdvdXRlckhlaWdodCddKHRydWUpO1xuICAgICAgICAkZWwuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0Jywgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCkgKyBcInB4XCIpO1xuXG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ICs9IGN1cnJlbnQgLSBzd2lwZXIucHJldmlvdXNJbmRleDtcblxuICAgICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZpcnN0SW5kZXggPSBjdXJyZW50IC0gc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4O1xuICAgICAgICBsYXN0SW5kZXggPSBmaXJzdEluZGV4ICsgKE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpO1xuICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICB9XG5cbiAgICAgIGJ1bGxldHMucmVtb3ZlQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCIgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0IFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0IFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldiBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldiBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG5cbiAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmVhY2goZnVuY3Rpb24gKGJ1bGxldCkge1xuICAgICAgICAgIHZhciAkYnVsbGV0ID0gJChidWxsZXQpO1xuICAgICAgICAgIHZhciBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTtcblxuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBmaXJzdEluZGV4ICYmIGJ1bGxldEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gZmlyc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0LnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpLnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXZcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXQubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyICRidWxsZXQgPSBidWxsZXRzLmVxKGN1cnJlbnQpO1xuICAgICAgICB2YXIgYnVsbGV0SW5kZXggPSAkYnVsbGV0LmluZGV4KCk7XG4gICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcblxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgdmFyICRmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEoZmlyc3RJbmRleCk7XG4gICAgICAgICAgdmFyICRsYXN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShsYXN0SW5kZXgpO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgIGJ1bGxldHMuZXEoaSkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbWFpblwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIF9pID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0czsgX2kgPj0gMDsgX2kgLT0gMSkge1xuICAgICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBfaSkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbWFpblwiKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldC5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2XCIpO1xuICAgICAgICAgICAgICAkbGFzdERpc3BsYXllZEJ1bGxldC5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dFwiKS5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZmlyc3REaXNwbGF5ZWRCdWxsZXQucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIikucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldlwiKTtcbiAgICAgICAgICAgICRsYXN0RGlzcGxheWVkQnVsbGV0Lm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0XCIpLm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgdmFyIGR5bmFtaWNCdWxsZXRzTGVuZ3RoID0gTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KTtcbiAgICAgICAgdmFyIGJ1bGxldHNPZmZzZXQgPSAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIGR5bmFtaWNCdWxsZXRzTGVuZ3RoIC0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSkgLyAyIC0gbWlkSW5kZXggKiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplO1xuICAgICAgICB2YXIgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/IG9mZnNldFByb3AgOiAndG9wJywgYnVsbGV0c09mZnNldCArIFwicHhcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuY3VycmVudENsYXNzKSkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKSk7XG4gICAgICAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uVG90YWwodG90YWwpKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIHZhciBwcm9ncmVzc2JhckRpcmVjdGlvbjtcblxuICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgIH1cblxuICAgICAgdmFyIHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgdmFyIHNjYWxlWCA9IDE7XG4gICAgICB2YXIgc2NhbGVZID0gMTtcblxuICAgICAgaWYgKHByb2dyZXNzYmFyRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2FsZVkgPSBzY2FsZTtcbiAgICAgIH1cblxuICAgICAgJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKSkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlWChcIiArIHNjYWxlWCArIFwiKSBzY2FsZVkoXCIgKyBzY2FsZVkgKyBcIilcIikudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICRlbC5odG1sKHBhcmFtcy5yZW5kZXJDdXN0b20oc3dpcGVyLCBjdXJyZW50ICsgMSwgdG90YWwpKTtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgJGVsWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCAkZWxbMF0pO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICRlbFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAvLyBSZW5kZXIgQ29udGFpbmVyXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgdmFyIHBhZ2luYXRpb25IVE1MID0gJyc7XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgdmFyIG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIG51bWJlck9mQnVsbGV0cyA+IHNsaWRlc0xlbmd0aCkge1xuICAgICAgICBudW1iZXJPZkJ1bGxldHMgPSBzbGlkZXNMZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBwYXJhbXMucmVuZGVyQnVsbGV0LmNhbGwoc3dpcGVyLCBpLCBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IFwiPFwiICsgcGFyYW1zLmJ1bGxldEVsZW1lbnQgKyBcIiBjbGFzcz1cXFwiXCIgKyBwYXJhbXMuYnVsbGV0Q2xhc3MgKyBcIlxcXCI+PC9cIiArIHBhcmFtcy5idWxsZXRFbGVtZW50ICsgXCI+XCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9ICRlbC5maW5kKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJGcmFjdGlvbikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJGcmFjdGlvbi5jYWxsKHN3aXBlciwgcGFyYW1zLmN1cnJlbnRDbGFzcywgcGFyYW1zLnRvdGFsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBcIjxzcGFuIGNsYXNzPVxcXCJcIiArIHBhcmFtcy5jdXJyZW50Q2xhc3MgKyBcIlxcXCI+PC9zcGFuPlwiICsgJyAvICcgKyAoXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyBwYXJhbXMudG90YWxDbGFzcyArIFwiXFxcIj48L3NwYW4+XCIpO1xuICAgICAgfVxuXG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBcIjxzcGFuIGNsYXNzPVxcXCJcIiArIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyArIFwiXFxcIj48L3NwYW4+XCI7XG4gICAgICB9XG5cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN3aXBlci5wYWdpbmF0aW9uLiRlbFswXSk7XG4gICAgfVxuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLiRlbCwgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLCBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzLCB7XG4gICAgICBlbDogJ3N3aXBlci1wYWdpbmF0aW9uJ1xuICAgIH0pO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcbiAgICB2YXIgJGVsID0gJChwYXJhbXMuZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSkge1xuICAgICAgJGVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5jbGlja2FibGVDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVsLmFkZENsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoXCJcIiArIHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUgKyBcIi1keW5hbWljXCIpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwub24oJ2NsaWNrJywgY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSwgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5pbmRleCgpICogc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgaW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZXh0ZW5kKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICAkZWw6ICRlbCxcbiAgICAgIGVsOiAkZWxbMF1cbiAgICB9KTtcblxuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucmVtb3ZlQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcblxuICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwub2ZmKCdjbGljaycsIGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BhZ2luYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgIHJlbmRlckZyYWN0aW9uOiBudWxsLFxuICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICB0eXBlOiAnYnVsbGV0cycsXG4gICAgICAvLyAnYnVsbGV0cycgb3IgJ3Byb2dyZXNzYmFyJyBvciAnZnJhY3Rpb24nIG9yICdjdXN0b20nXG4gICAgICBkeW5hbWljQnVsbGV0czogZmFsc2UsXG4gICAgICBkeW5hbWljTWFpbkJ1bGxldHM6IDEsXG4gICAgICBmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6IGZ1bmN0aW9uIGZvcm1hdEZyYWN0aW9uQ3VycmVudChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgIH0sXG4gICAgICBmb3JtYXRGcmFjdGlvblRvdGFsOiBmdW5jdGlvbiBmb3JtYXRGcmFjdGlvblRvdGFsKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgfSxcbiAgICAgIGJ1bGxldENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0JyxcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZScsXG4gICAgICBtb2RpZmllckNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tJyxcbiAgICAgIC8vIE5FV1xuICAgICAgY3VycmVudENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY3VycmVudCcsXG4gICAgICB0b3RhbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tdG90YWwnLFxuICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1oaWRkZW4nLFxuICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1maWxsJyxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLW9wcG9zaXRlJyxcbiAgICAgIGNsaWNrYWJsZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY2xpY2thYmxlJyxcbiAgICAgIC8vIE5FV1xuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tbG9jaydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgcGFnaW5hdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXg6IDBcbiAgICAgIH0sIFBhZ2luYXRpb24pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmluaXQoKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBhY3RpdmVJbmRleENoYW5nZTogZnVuY3Rpb24gYWN0aXZlSW5kZXhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbmFwSW5kZXhDaGFuZ2U6IGZ1bmN0aW9uIHNuYXBJbmRleENoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVzTGVuZ3RoQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZXNMZW5ndGhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlOiBmdW5jdGlvbiBzbmFwR3JpZExlbmd0aENoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAnZW5hYmxlIGRpc2FibGUnOiBmdW5jdGlvbiBlbmFibGVEaXNhYmxlKHN3aXBlcikge1xuICAgICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcblxuICAgICAgaWYgKCRlbCkge1xuICAgICAgICAkZWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjbGljazogZnVuY3Rpb24gY2xpY2soc3dpcGVyLCBlKSB7XG4gICAgICB2YXIgdGFyZ2V0RWwgPSBlLnRhcmdldDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA+IDAgJiYgISQodGFyZ2V0RWwpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIChzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgICAgdmFyIGlzSGlkZGVuID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG5cbiAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25TaG93Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwudG9nZ2xlQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0hUTUxfTE9BREVSX0dFVF9TT1VSQ0VfRlJPTV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvZm9udHMtaWNvbnMuY3NzXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzFfX18gPSBuZXcgVVJMKFwiLi9pbWcvc3ZnL2xvZ28uc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzJfX18gPSBuZXcgVVJMKFwiLi9pbWcvcG5nL2xvZ28ucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzNfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9waWN0dXJlLWRlc3QuYXZpZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF80X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvcGljdHVyZS10YWIuYXZpZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF81X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvcGljdHVyZS1tb2IuYXZpZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF82X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvcGljdHVyZS1kZXN0LndlYnBcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfN19fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL3BpY3R1cmUtdGFiLndlYnBcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfOF9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL3BpY3R1cmUtbW9iLndlYnBcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfOV9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL3BpY3R1cmUtZGVzdC5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMTBfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9waWN0dXJlLXRhYi5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMTFfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9waWN0dXJlLW1vYi5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMTJfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9jcHMtZGVzdC5hdmlmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzEzX19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvY3BzLXRhYi5hdmlmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzE0X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvY3BzLW1vYi5hdmlmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzE1X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvY3BzLWRlc3Qud2VicFwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNl9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL2Nwcy10YWIud2VicFwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xN19fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL2Nwcy1tb2Iud2VicFwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xOF9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL2Nwcy1kZXN0LmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xOV9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL2Nwcy10YWIuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzIwX19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvY3BzLW1vYi5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMjFfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9jcHNlLWRlc3QuYXZpZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMl9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL2Nwc2UtdGFiLmF2aWZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMjNfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9jcHNlLW1vYi5hdmlmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzI0X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvY3BzZS1kZXN0LndlYnBcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMjVfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9jcHNlLXRhYi53ZWJwXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzI2X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvY3BzZS1tb2Iud2VicFwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yN19fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL2Nwc2UtbW9iLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yOF9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL2VzLWRlc3QuYXZpZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yOV9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL2VzLXRhYi5hdmlmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzMwX19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvZXMtbW9iLmF2aWZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMzFfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9lcy1kZXN0LndlYnBcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMzJfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9lcy10YWIud2VicFwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zM19fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL2VzLW1vYi53ZWJwXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzM0X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvZXMtZGVzdC5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMzVfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9lcy10YWIuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzM2X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvZXMtbW9iLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zN19fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL9GBdXJzZXJhLWRlc3QuYXZpZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zOF9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL9GBdXJzZXJhLXRhYi5hdmlmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzM5X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcv0YF1cnNlcmEtbW9iLmF2aWZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNDBfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy/RgXVyc2VyYS1kZXN0LndlYnBcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNDFfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy/RgXVyc2VyYS10YWIud2VicFwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF80Ml9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL9GBdXJzZXJhLW1vYi53ZWJwXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzQzX19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcv0YF1cnNlcmEtZGVzdC5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNDRfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy/RgXVyc2VyYS10YWIuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzQ1X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvbWF4LW1vYi5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNDZfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9uZXh1cy1kZXN0LmF2aWZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNDdfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9uZXh1cy10YWIuYXZpZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF80OF9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL25leHVzLW1vYi5hdmlmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzQ5X19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvbmV4dXMtZGVzdC53ZWJwXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzUwX19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvbmV4dXMtdGFiLndlYnBcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNTFfX18gPSBuZXcgVVJMKFwiLi9pbWcvanBlZy9uZXh1cy1tb2Iud2VicFwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF81Ml9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL25leHVzLWRlc3QuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzUzX19fID0gbmV3IFVSTChcIi4vaW1nL2pwZWcvbmV4dXMtdGFiLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF81NF9fXyA9IG5ldyBVUkwoXCIuL2ltZy9qcGVnL25leHVzLW1vYi5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNTVfX18gPSBuZXcgVVJMKFwiLi9pbWcvcG5nL2xlbm92YS5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNTZfX18gPSBuZXcgVVJMKFwiLi9pbWcvcG5nL3NhbXN1bmcucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzU3X19fID0gbmV3IFVSTChcIi4vaW1nL3BuZy9hcHBsZS5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNThfX18gPSBuZXcgVVJMKFwiLi9pbWcvcG5nL3ZpZXdzb25pY2sucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzU5X19fID0gbmV3IFVSTChcIi4vaW1nL3BuZy9ib3NjaC5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNjBfX18gPSBuZXcgVVJMKFwiLi9pbWcvcG5nL2hwLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF82MV9fXyA9IG5ldyBVUkwoXCIuL2ltZy9wbmcvYWNlci5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNjJfX18gPSBuZXcgVVJMKFwiLi9pbWcvcG5nL3NvbnkucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG4vLyBNb2R1bGVcbnZhciBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8wX19fID0gX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyhfX19IVE1MX0xPQURFUl9JTVBPUlRfMF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0hUTUxfTE9BREVSX0dFVF9TT1VSQ0VfRlJPTV9JTVBPUlRfX18oX19fSFRNTF9MT0FERVJfSU1QT1JUXzFfX18pO1xudmFyIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yX19fKTtcbnZhciBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8zX19fID0gX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyhfX19IVE1MX0xPQURFUl9JTVBPUlRfM19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNF9fXyA9IF9fX0hUTUxfTE9BREVSX0dFVF9TT1VSQ0VfRlJPTV9JTVBPUlRfX18oX19fSFRNTF9MT0FERVJfSU1QT1JUXzRfX18pO1xudmFyIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzVfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81X19fKTtcbnZhciBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF82X19fID0gX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyhfX19IVE1MX0xPQURFUl9JTVBPUlRfNl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfN19fXyA9IF9fX0hUTUxfTE9BREVSX0dFVF9TT1VSQ0VfRlJPTV9JTVBPUlRfX18oX19fSFRNTF9MT0FERVJfSU1QT1JUXzdfX18pO1xudmFyIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzhfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF84X19fKTtcbnZhciBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF85X19fID0gX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyhfX19IVE1MX0xPQURFUl9JTVBPUlRfOV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTBfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTNfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xM19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTRfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTVfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTZfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTdfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xN19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMThfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xOF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTlfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xOV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjBfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjNfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yM19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjRfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjVfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjZfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjdfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yN19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjhfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yOF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjlfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yOV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzBfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zMF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zMV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zMl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzNfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zM19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzRfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zNF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzVfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zNV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzZfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zNl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzdfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zN19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzhfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zOF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzlfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zOV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDBfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80MF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80MV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80Ml9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDNfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80M19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDRfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80NF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDVfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80NV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDZfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80Nl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDdfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80N19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDhfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80OF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDlfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF80OV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTBfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81MF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81MV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81Ml9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTNfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81M19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTRfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81NF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTVfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81NV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTZfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81Nl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTdfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81N19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNThfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81OF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTlfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81OV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNjBfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF82MF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNjFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF82MV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNjJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF82Ml9fXyk7XG52YXIgY29kZSA9IFwiPCFET0NUWVBFIGh0bWw+IDxodG1sIGxhbmc9XFxcInJ1XFxcIj4gPGhlYWQ+IDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIj4gPG1ldGEgaHR0cC1lcXVpdj1cXFwiWC1VQS1Db21wYXRpYmxlXFxcIiBjb250ZW50PVxcXCJJRT1lZGdlXFxcIj4gPG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTFcXFwiPiA8bWV0YSBuYW1lPVxcXCJrZXl3b3Jkc1xcXCIgY29udGVudD1cXFwiSFRNTCBDU1MgSlMgdGVzdC10YXNrXFxcIj4gPG1ldGEgbmFtZT1cXFwiZGVzY3JpcHRpb25cXFwiIGNvbnRlbnQ9XFxcItCi0LXRgdGC0L7QstC+0LUg0LfQsNC00LDQvdC40LUg0L/QviDQvNC+0LTRg9C70Y8gV2ViIGNvcmVcXFwiPiA8dGl0bGU+QmxvY2sgMS42L1Nhdmlub3Yg0JAu0J4uPC90aXRsZT4gPGxpbmsgcmVsPVxcXCJzdHlsZXNoZWV0XFxcIiBocmVmPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzBfX18gKyBcIlxcXCI+IDwvaGVhZD4gPGJvZHkgb25jbGljaz1cXFwiXFxcIj4gPGhlYWRlciBjbGFzcz1cXFwiY3BzLWhlYWRlclxcXCI+IDxhIGNsYXNzPVxcXCJjcHMtaGVhZGVyX19sb2dvIGNwcy1sb2dvXFxcIiBocmVmPVxcXCJpbmRleC5odG1sXFxcIj4gPHBpY3R1cmU+IDxzb3VyY2Ugc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzFfX18gKyBcIlxcXCIgdHlwZT1cXFwiaW1hZ2Uvc3ZnXFxcIj4gPGltZyBjbGFzcz1cXFwiY3BzLWxvZ29fX2ltZ1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzJfX18gKyBcIlxcXCIgYWx0PVxcXCLQm9C+0LPQvtGC0LjQvyBDUFNcXFwiIHdpZHRoPVxcXCI5N1xcXCIgaGVpZ2h0PVxcXCI1MVxcXCI+IDwvcGljdHVyZT4gPC9hPiA8dWwgY2xhc3M9XFxcImNwcy1oZWFkZXJfX2ZiIGZiLWNvbnRlaW5lclxcXCI+IDxsaSBjbGFzcz1cXFwiZmItY29udGVpbmVyX19pdGVtXFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwiZmItY29udGVpbmVyX19saW5rIGZiLWNvbnRlaW5lcl9fbGluay1mYiBidXR0b24tanMtb3BlbiBpY29uLXJlcGFpclxcXCIgZGF0YS1wYXRoPVxcXCJvbmUtYnRuXFxcIj4gPHNwYW4gY2xhc3M9XFxcImZiLWNvbnRlaW5lcl9fdGV4dCB2aXN1YWxseS1oaWRkZW5cXFwiPtCe0YHRgtCw0LLQuNGC0Ywg0LfQsNGP0LLQutGDPC9zcGFuPiA8L2J1dHRvbj4gPC9saT4gPGxpIGNsYXNzPVxcXCJmYi1jb250ZWluZXJfX2l0ZW1cXFwiPiA8YnV0dG9uIGNsYXNzPVxcXCJmYi1jb250ZWluZXJfX2xpbmsgZmItY29udGVpbmVyX19saW5rLWNhbGwgYnV0dG9uLWpzLW9wZW4gaWNvbi1zZWFyY2gtaGVhZGVyXFxcIiBkYXRhLXBhdGg9XFxcInR3by1idG5cXFwiPiA8c3BhbiBjbGFzcz1cXFwiZmItY29udGVpbmVyX190ZXh0IHZpc3VhbGx5LWhpZGRlblxcXCI+0KHRgtCw0YLRg9GBINGA0LXQvNC+0L3RgtCwPC9zcGFuPiA8L2J1dHRvbj4gPC9saT4gPC91bD4gPHVsIGNsYXNzPVxcXCJjcHMtaGVhZGVyX19jb250YWN0cyBjb250YWN0cy1jb250ZWluZXJcXFwiPiA8bGkgY2xhc3M9XFxcImNvbnRhY3RzLWNvbnRlaW5lcl9faXRlbVxcXCI+IDxidXR0b24gY2xhc3M9XFxcImJ1dHRvbi1qcy1vcGVuIGNvbnRhY3RzLWNvbnRlaW5lcl9fbGluayBpY29uLXBob25lXFxcIiBkYXRhLXBhdGg9XFxcInRocmVlLWJ0blxcXCI+IDxzcGFuIGNsYXNzPVxcXCJ2aXN1YWxseS1oaWRkZW5cXFwiPtCX0LDQutCw0LfQsNGC0Ywg0LfQstC+0L3QvtC6PC9zcGFuPiA8L2J1dHRvbj4gPC9saT4gPGxpIGNsYXNzPVxcXCJjb250YWN0cy1jb250ZWluZXJfX2l0ZW1cXFwiPiA8YnV0dG9uIGNsYXNzPVxcXCJidXR0b24tanMtb3BlbiBjb250YWN0cy1jb250ZWluZXJfX2xpbmsgaWNvbi1jaGF0XFxcIiBkYXRhLXBhdGg9XFxcImZvdXItYnRuXFxcIj4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0J3QsNGH0LDRgtGMINGH0LDRgjwvc3Bhbj4gPC9idXR0b24+IDwvbGk+IDxsaSBjbGFzcz1cXFwiY29udGFjdHMtY29udGVpbmVyX19pdGVtXFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnV0dG9uLWpzLW9wZW4gY29udGFjdHMtY29udGVpbmVyX19saW5rIGljb24tcHJvZmlsZVxcXCIgZGF0YS1wYXRoPVxcXCJmaXZlLWJ0blxcXCI+IDxzcGFuIGNsYXNzPVxcXCJ2aXN1YWxseS1oaWRkZW5cXFwiPtCS0YXQvtC0INCb0LjRh9C90YvQuSDQutCw0LHQuNC90LXRgjwvc3Bhbj4gPC9idXR0b24+IDwvbGk+IDwvdWw+IDxidXR0b24gY2xhc3M9XFxcImJ1dHRvbi1qcy1vcGVuIGNwcy1oZWFkZXJfX2J0biBidG4tb3BlblxcXCIgZGF0YS1wYXRoPVxcXCJzaXgtYnRuXFxcIj4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0J7RgtC60YDRi9GC0Ywg0LzQtdC90Y48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJidG4tb3Blbl9fZWxtLWJ0blxcXCI+PC9zcGFuPiA8L2J1dHRvbj4gPC9oZWFkZXI+IDxhc2lkZSBjbGFzcz1cXFwiY3BzLWFzaWRlIGJsb2stanMtYWN0aXZlXFxcIiBkYXRhLXRhcmdldD1cXFwic2l4LWJ0blxcXCI+IDxkaXYgY2xhc3M9XFxcImNwcy1hc2lkZV9faGVhZGVyXFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwiY3BzLWFzaWRlX19idG4tY2xvc2UgYnV0dG9uLWpzLW9wZW4gYnRuLWNsb3NlXFxcIiBkYXRhLXBhdGg9XFxcImJ0bi1jbG9zZS1vbmVcXFwiPiA8c3BhbiBjbGFzcz1cXFwidmlzdWFsbHktaGlkZGVuXFxcIj7Ql9Cw0LrRgNGL0YLRjCDQvNC10L3Rjjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImJ0bi1jbG9zZV9fZWxtLWJ0blxcXCI+PC9zcGFuPiA8L2J1dHRvbj4gPGEgY2xhc3M9XFxcImNwcy1hc2lkZV9fbG9nbyBjcHMtbG9nb1xcXCIgaHJlZj1cXFwiaW5kZXguaHRtbFxcXCI+IDxwaWN0dXJlPiA8c291cmNlIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xX19fICsgXCJcXFwiIHR5cGU9XFxcImltYWdlL3N2Z1xcXCI+IDxpbWcgY2xhc3M9XFxcImNwcy1sb2dvX19pbWdcXFwiIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yX19fICsgXCJcXFwiIGFsdD1cXFwi0JvQvtCz0L7RgtC40L8gQ1BTXFxcIiB3aWR0aD1cXFwiOTdcXFwiIGhlaWdodD1cXFwiNTFcXFwiPiA8L3BpY3R1cmU+IDwvYT4gPGJ1dHRvbiBjbGFzcz1cXFwiY3BzLWFzaWRlX19zZWFyY2ggYnV0dG9uIGljb24tc2VhcmNoLWFzaWRlIGJ1dHRvbi1qcy1vcGVuXFxcIiBkYXRhLXBhdGg9XFxcInNldmVuLWJ0blxcXCI+IDxzcGFuIGNsYXNzPVxcXCJ2aXN1YWxseS1oaWRkZW5cXFwiPtC/0L7QuNGB0Lo8L3NwYW4+IDwvYnV0dG9uPiA8L2Rpdj4gPG5hdiBjbGFzcz1cXFwiY3BzLWFzaWRlX19uYXYtYXNpZGUgbmF2LW1lbnVcXFwiPiA8dWwgY2xhc3M9XFxcIm5hdi1tZW51X19saXN0XFxcIj4gPGxpIGNsYXNzPVxcXCJuYXYtbWVudV9faXRlbVxcXCI+IDxhIGNsYXNzPVxcXCJuYXYtbWVudV9fbGluayBuYXYtbWVudV9fbGluay0tYWN0aXZlXFxcIiBocmVmPVxcXCJpbmRleC5odG1sXFxcIj7QoNC10LzQvtC90YIg0YLQtdGF0L3QuNC60Lg8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwibmF2LW1lbnVfX2l0ZW1cXFwiPiA8YSBjbGFzcz1cXFwibmF2LW1lbnVfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPtCj0YHQu9GD0LPQuCDQuCDQodC10YDQstC40YHRizwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJuYXYtbWVudV9faXRlbVxcXCI+IDxhIGNsYXNzPVxcXCJuYXYtbWVudV9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+0JrQvtGA0L/QvtGA0LDRgtC40LLQvdGL0Lwg0LrQu9C40LXQvdGC0Ys8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwibmF2LW1lbnVfX2l0ZW1cXFwiPiA8YSBjbGFzcz1cXFwibmF2LW1lbnVfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPtCf0YDQvtC00LDQstGG0LDQvCDRgtC10YXQvdC40LrQuDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJuYXYtbWVudV9faXRlbVxcXCI+IDxhIGNsYXNzPVxcXCJuYXYtbWVudV9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+0J/QsNGA0YLQvdC10YDQsNC8PC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcIm5hdi1tZW51X19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcIm5hdi1tZW51X19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj7Qn9GA0L7QuNC30LLQvtC00LjRgtC10LvRj9C8PC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcIm5hdi1tZW51X19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcIm5hdi1tZW51X19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj7QndCw0YjQuCDRgdC10YDQstC10YHQvdGL0LUg0YbQtdC90YLRgNGLPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcIm5hdi1tZW51X19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcIm5hdi1tZW51X19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj7QmtC+0L3RgtCw0LrRgtGLPC9hPiA8L2xpPiA8L3VsPiA8L25hdj4gPHVsIGNsYXNzPVxcXCJjcHMtYXNpZGVfX2NvbnRhY3RzIGNvbnRhY3RzLWNvbnRlaW5lclxcXCI+IDxsaSBjbGFzcz1cXFwiY29udGFjdHMtY29udGVpbmVyX19pdGVtXFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnV0dG9uLWpzLW9wZW4gY29udGFjdHMtY29udGVpbmVyX19saW5rIGljb24tcGhvbmVcXFwiIGRhdGEtcGF0aD1cXFwidGhyZWUtYnRuXFxcIj4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0JfQsNC60LDQt9Cw0YLRjCDQt9Cy0L7QvdC+0Lo8L3NwYW4+IDwvYnV0dG9uPiA8L2xpPiA8bGkgY2xhc3M9XFxcImNvbnRhY3RzLWNvbnRlaW5lcl9faXRlbVxcXCI+IDxidXR0b24gY2xhc3M9XFxcImJ1dHRvbi1qcy1vcGVuIGNvbnRhY3RzLWNvbnRlaW5lcl9fbGluayBpY29uLWNoYXRcXFwiIGRhdGEtcGF0aD1cXFwiZm91ci1idG5cXFwiPiA8c3BhbiBjbGFzcz1cXFwidmlzdWFsbHktaGlkZGVuXFxcIj7QndCw0YfQsNGC0Ywg0YfQsNGCPC9zcGFuPiA8L2J1dHRvbj4gPC9saT4gPGxpIGNsYXNzPVxcXCJjb250YWN0cy1jb250ZWluZXJfX2l0ZW1cXFwiPiA8YnV0dG9uIGNsYXNzPVxcXCJidXR0b24tanMtb3BlbiBjb250YWN0cy1jb250ZWluZXJfX2xpbmsgaWNvbi1wcm9maWxlXFxcIiBkYXRhLXBhdGg9XFxcImZpdmUtYnRuXFxcIj4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0JLRhdC+0LQg0JvQuNGH0L3Ri9C5INC60LDQsdC40L3QtdGCPC9zcGFuPiA8L2J1dHRvbj4gPC9saT4gPC91bD4gPHVsIGNsYXNzPVxcXCJjcHMtYXNpZGVfX2NvbnRhY3RzLWxpc3QgY29udGFjdHMtbGlzdFxcXCI+IDxsaSBjbGFzcz1cXFwiY29udGFjdHMtbGlzdF9faXRlbVxcXCI+IDxhIGNsYXNzPVxcXCJjb250YWN0cy1saXN0X19saW5rIGNvbnRhY3RzLWxpc3RfX2VtYWlsXFxcIiBocmVmPVxcXCJtYWlsdG86bWFpbEBjcHMuY29tXFxcIj5tYWlsQGNwcy5jb208L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwiY29udGFjdHMtbGlzdF9faXRlbVxcXCI+IDxhIGNsYXNzPVxcXCJjb250YWN0cy1saXN0X19saW5rIGNvbnRhY3RzLWxpc3RfX3Bob25lXFxcIiBocmVmPVxcXCJ0ZWw6ODgwMDg5MDg5MDBcXFwiPjggODAwIDg5MCA4OTAwPC9hPiA8L2xpPiA8L3VsPiA8dWwgY2xhc3M9XFxcImNwcy1hc2lkZV9fbGFuZ3VhZ2UtY29udGVpbmVyIGxhbmd1YWdlLWxpc3RcXFwiPiA8bGkgY2xhc3M9XFxcImxhbmd1YWdlLWxpc3RfX2l0ZW1cXFwiPiA8YSBjbGFzcz1cXFwibGFuZ3VhZ2UtbGlzdF9fbGluayBsYW5ndWFnZS1saXN0X19saW5rLS1hY3RpdmVcXFwiIGhyZWY9XFxcImluZGV4Lmh0bWxcXFwiPnJ1PC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcImxhbmd1YWdlLWxpc3RfX2l0ZW1cXFwiPiA8YSBjbGFzcz1cXFwibGFuZ3VhZ2UtbGlzdF9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+ZW48L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwibGFuZ3VhZ2UtbGlzdF9faXRlbVxcXCI+IDxhIGNsYXNzPVxcXCJsYW5ndWFnZS1saXN0X19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj5jaDwvYT4gPC9saT4gPC91bD4gPGRpdiBjbGFzcz1cXFwiY3BzLWpzLWJnIGNwcy1hc2lkZV9fYmdcXFwiPjwvZGl2PiA8L2FzaWRlPiA8bWFpbiBjbGFzcz1cXFwiY3BzLW1haW5cXFwiPiA8c2VjdGlvbiBjbGFzcz1cXFwic2VydmVjLWNvbnRlbnRcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzZXJ2ZWMtY29udGVudF9faGVhZGVyXFxcIj4gPGgxIGNsYXNzPVxcXCJzZXJ2ZWMtY29udGVudF9fdGl0bGVcXFwiPtCj0YHQu9GD0LPQuCDQuCDRgdC10YDQstC40YHRizwvaDE+IDx1bCBjbGFzcz1cXFwic2VydmVjLWNvbnRlbnRfX2ZlZWRiYWNrLXNlcnZlYyBmZWVkYmFjay1zZXJ2ZWNcXFwiPiA8bGkgY2xhc3M9XFxcImZlZWRiYWNrLXNlcnZlY19faXRlbVxcXCI+IDxidXR0b24gY2xhc3M9XFxcImZlZWRiYWNrLXNlcnZlY19fbGluayBidXR0b24tanMtb3BlblxcXCIgZGF0YS1wYXRoPVxcXCJvbmUtYnRuXFxcIj4gPHNwYW4gY2xhc3M9XFxcImZlZWRiYWNrLXNlcnZlY19fdGV4dFxcXCI+0J7RgdGC0LDQstC40YLRjCDQt9Cw0Y/QstC60YM8L3NwYW4+IDxpIGNsYXNzPVxcXCJmZWVkYmFjay1zZXJ2ZWNfX2ljb24gaWNvbi1yZXBhaXJcXFwiPjwvaT4gPC9idXR0b24+IDwvbGk+IDxsaSBjbGFzcz1cXFwiZmVlZGJhY2stc2VydmVjX19pdGVtXFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwiZmVlZGJhY2stc2VydmVjX19saW5rIGJ1dHRvbi1qcy1vcGVuXFxcIiBkYXRhLXBhdGg9XFxcInR3by1idG5cXFwiPiA8c3BhbiBjbGFzcz1cXFwiZmVlZGJhY2stc2VydmVjX190ZXh0XFxcIj7QodGC0LDRgtGD0YEg0YDQtdC80L7QvdGC0LA8L3NwYW4+IDxpIGNsYXNzPVxcXCJmZWVkYmFjay1zZXJ2ZWNfX2ljb24gaWNvbi1zZWFyY2gtaGVhZGVyXFxcIj48L2k+IDwvYnV0dG9uPiA8L2xpPiA8L3VsPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3dpcGVyLWNvbnRhaW5lciBzd2lwZXItY29udGFpbmVyLS1zZXJ2aWNlXFxcIj4gPHVsIGNsYXNzPVxcXCJzd2lwZXItd3JhcHBlciBzZXJ2ZWMtY29udGVudF9fc2VydmljZS1saXN0IHNlcnZpY2UtbGlzdFxcXCI+IDxsaSBjbGFzcz1cXFwic2VydmljZS1saXN0X19pdGVtIHN3aXBlci1zbGlkZVxcXCI+IDxhIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3RfX2xpbmsgc2VydmljZS1saXN0X19saW5rLS1hY3RpdmVcXFwiIGhyZWY9XFxcIiNcXFwiIGRhdGEtcGF0aD1cXFwib25lXFxcIj7QoNC10LzQvtC90YLQuNGA0YPQtdC80YvQtSDQsdGA0LXQvdC00Ys8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic2VydmljZS1saXN0X19pdGVtIHN3aXBlci1zbGlkZVxcXCI+IDxhIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3RfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiIGRhdGEtcGF0aD1cXFwidHdvXFxcIj7QoNC10LzQvtC90YLQuNGA0YPQtdC80YvQtSDRg9GB0YLRgNC+0Lk8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic2VydmljZS1saXN0X19pdGVtIHN3aXBlci1zbGlkZVxcXCI+IDxhIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3RfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiIGRhdGEtcGF0aD1cXFwidGhyZWVcXFwiPtCm0LXQvdGLINC90LAg0YPRgdC70YPQs9C4PC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInNlcnZpY2UtbGlzdF9faXRlbSBzd2lwZXItc2xpZGVcXFwiPiA8YSBjbGFzcz1cXFwic2VydmljZS1saXN0X19saW5rXFxcIiBocmVmPVxcXCIjXFxcIiBkYXRhLXBhdGg9XFxcImZvdXJcXFwiPtCQ0LTRgNC10YHQsCDRgdC10YDQstC10YHQvdGL0YUg0YbQtdC90YLRgNC+0LI8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic2VydmljZS1saXN0X19pdGVtIHN3aXBlci1zbGlkZVxcXCI+IDxhIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3RfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiIGRhdGEtcGF0aD1cXFwiZml2ZVxcXCI+0KHQv9C10YbQuNCw0LvRjNC90YvQtSDRhtC10L3RizwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3RfX2l0ZW0gc3dpcGVyLXNsaWRlXFxcIj4gPGEgY2xhc3M9XFxcInNlcnZpY2UtbGlzdF9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCIgZGF0YS1wYXRoPVxcXCJzaXhcXFwiPtCe0YLQt9C+0LLRizwvYT4gPC9saT4gPC91bD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNlcnZlYy1jb250ZW50X19zZXJ2aWNlLWl0ZW0gc2VydmljZS1pdGVtIHNlcnZpY2VzLWl0ZW0tLWFjdGl2ZVxcXCIgZGF0YS10YXJnZXQ9XFxcIm9uZVxcXCI+IDxkaXY+IDxkaXYgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fd3JhcHBcXFwiIGRhdGEtdGFyZ2V0PVxcXCJ0aHJlZS1hbGxvcGVuXFxcIj4gPHAgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fdGV4dFxcXCI+INCc0Ysg0Y/QstC70Y/QtdC80YHRjyDQsNCy0YLQvtGA0LjQt9C+0LLQsNC90L3Ri9C8INGB0LXRgNCy0LjRgdC90YvQvCDRhtC10L3RgtGA0L7QvCDQv9C+INGA0LXQvNC+0L3RgtGDINGC0LXRhdC90LjQutC4IERlbGwuINCi0L7Qu9GM0LrQviDRgyDQvdCw0YEg0LLRiyDQvNC+0LbQtdGC0LUg0L7RgtGA0LXQvNC+0L3RgtC40YDQvtCy0LDRgtGMINGB0LLQvtC5INC90L7Rg9GC0LHRg9C6IERlbGwg0YEg0L7RhNC40YbQuNCw0LvRjNC90L7QuSDQs9Cw0YDQsNC90YLQuNC10Lkg0L/RgNC+0LjQt9Cy0L7QtNC40YLQtdC70Y8uIDwvcD4gPHAgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fdGV4dCBzZXJ2aWNlLWl0ZW1fX3RleHQtLXZpc3VhbGx5LWhpZGRlblxcXCI+INCc0Ysg0YPRgdC/0LXRiNC90L4g0YDQsNCx0L7RgtCw0LXQvCDRgSAxOTkyINCz0L7QtNCwINC4INC30LDRgdC70YPQttC40LvQuCDRgNC10L/Rg9GC0LDRhtC40Y4g0L3QsNC00LXQttC90L7Qs9C+INC/0LDRgNGC0L3QtdGA0LAsINGH0YLQviDQv9C+0LTRgtCy0LXRgNC20LTQsNC10YIg0LHQvtC70YzRiNC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0L/QvtGB0YLQvtGP0L3QvdGL0YUg0LrQu9C40LXQvdGC0L7Qsi4g0JzRiyDQs9C+0YDQtNC40LzRgdGPINGC0LXQvCwg0YfRgtC+INC6INC90LDQvCDQvtCx0YDQsNGJ0LDRjtGC0YHRjyDQv9C+INGA0LXQutC+0LzQtdC90LTQsNGG0LjRj9C8INC4LCDQsiDRgdCy0L7RjiDQvtGH0LXRgNC10LTRjCwg0YHQvtCy0LXRgtGD0Y7RgiDQvdCw0YEg0YDQvtC00L3Ri9C8INC4INCx0LvQuNC30LrQuNC8LiA8L3A+IDwvZGl2PiA8YnV0dG9uIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fbGluayBzZXJ2aWNlLWl0ZW1fX2xpbmsgaWNvbi1leHBhbmRcXFwiIGRhdGEtcGF0aD1cXFwidGhyZWUtYWxsb3BlblxcXCI+0KfQuNGC0LDRgtGMINC00LDQu9GM0YjQtTwvYnV0dG9uPiA8L2Rpdj4gPHBpY3R1cmUgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9faW1nXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS9hdmlmXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfM19fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogMTEyMHB4KVxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2UvYXZpZlxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzRfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDc2OHB4KVxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2UvYXZpZlxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzVfX18gKyBcIlxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2Uvd2VicFxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzZfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDExMjBweClcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL3dlYnBcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF83X19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiA3NjhweClcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL3dlYnBcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF84X19fICsgXCJcXFwiPiA8c291cmNlIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF85X19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiAxMTIwcHgpXFxcIj4gPHNvdXJjZSBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTBfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDc2OHB4KVxcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzExX19fICsgXCJcXFwiIGFsdD1cXFwi0YTQvtGC0L5cXFwiLz4gPC9waWN0dXJlPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2VydmVjLWNvbnRlbnRfX3NlcnZpY2UtaXRlbSBzZXJ2aWNlLWl0ZW1cXFwiIGRhdGEtdGFyZ2V0PVxcXCJ0d29cXFwiPiA8ZGl2IGNsYXNzPVxcXCJzZXJ2aWNlLWl0ZW1fX3dyYXBwXFxcIj4gPHAgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fdGV4dFxcXCI+INCU0LDQstC90L4g0LLRi9GP0YHQvdC10L3Qviwg0YfRgtC+INC/0YDQuCDQvtGG0LXQvdC60LUg0LTQuNC30LDQudC90LAg0Lgg0LrQvtC80L/QvtC30LjRhtC40Lgg0YfQuNGC0LDQtdC80YvQuSDRgtC10LrRgdGCINC80LXRiNCw0LXRgiDRgdC+0YHRgNC10LTQvtGC0L7Rh9C40YLRjNGB0Y8uIExvcmVtIElwc3VtINC40YHQv9C+0LvRjNC30YPRjtGCINC/0L7RgtC+0LzRgywg0YfRgtC+INGC0L7RgiDQvtCx0LXRgdC/0LXRh9C40LLQsNC10YIg0LHQvtC70LXQtSDQuNC70Lgg0LzQtdC90LXQtSDRgdGC0LDQvdC00LDRgNGC0L3QvtC1INC30LDQv9C+0LvQvdC10L3QuNC1INGI0LDQsdC70L7QvdCwLCDQsCDRgtCw0LrQttC1INGA0LXQsNC70YzQvdC+0LUg0YDQsNGB0L/RgNC10LTQtdC70LXQvdC40LUg0LHRg9C60LIg0Lgg0L/RgNC+0LHQtdC70L7QsiDQsiDQsNCx0LfQsNGG0LDRhSwg0LrQvtGC0L7RgNC+0LUg0L3QtSDQv9C+0LvRg9GH0LDQtdGC0YHRjyDQv9GA0Lgg0L/RgNC+0YHRgtC+0Lkg0LTRg9Cx0LvQuNC60LDRhtC40LggXFxcItCX0LTQtdGB0Ywg0LLQsNGIINGC0LXQutGB0YIuLiA8L3A+IDxwIGNsYXNzPVxcXCJzZXJ2aWNlLWl0ZW1fX3RleHQgc2VydmljZS1pdGVtX190ZXh0LS12aXN1YWxseS1oaWRkZW5cXFwiPiDQl9C00LXRgdGMINCy0LDRiCDRgtC10LrRgdGCLi4g0JfQtNC10YHRjCDQstCw0Ygg0YLQtdC60YHRgi4uXFxcIiDQnNC90L7Qs9C40LUg0L/RgNC+0LPRgNCw0LzQvNGLINGN0LvQtdC60YLRgNC+0L3QvdC+0Lkg0LLRkdGA0YHRgtC60Lgg0Lgg0YDQtdC00LDQutGC0L7RgNGLIEhUTUwg0LjRgdC/0L7Qu9GM0LfRg9GO0YIgTG9yZW0gSXBzdW0g0LIg0LrQsNGH0LXRgdGC0LLQtSDRgtC10LrRgdGC0LAg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y4sINGC0LDQuiDRh9GC0L4g0L/QvtC40YHQuiDQv9C+INC60LvRjtGH0LXQstGL0Lwg0YHQu9C+0LLQsNC8IFxcXCJsb3JlbSBpcHN1bVxcXCIg0YHRgNCw0LfRgyDQv9C+0LrQsNC30YvQstCw0LXRgiwg0LrQsNC6INC80L3QvtCz0L4g0LLQtdCxLdGB0YLRgNCw0L3QuNGGINCy0YHRkSDQtdGJ0ZEg0LTQvtC20LjQtNCw0Y7RgtGB0Y8g0YHQstC+0LXQs9C+INC90LDRgdGC0L7Rj9GJ0LXQs9C+INGA0L7QttC00LXQvdC40Y8uINCX0LAg0L/RgNC+0YjQtdC00YjQuNC1INCz0L7QtNGLINGC0LXQutGB0YIgTG9yZW0gSXBzdW0g0L/QvtC70YPRh9C40Lsg0LzQvdC+0LPQviDQstC10YDRgdC40LkuINCd0LXQutC+0YLQvtGA0YvQtSDQstC10YDRgdC40Lgg0L/QvtGP0LLQuNC70LjRgdGMINC/0L4g0L7RiNC40LHQutC1LCDQvdC10LrQvtGC0L7RgNGL0LUgLSDQvdCw0LzQtdGA0LXQvdC90L4gKNC90LDQv9GA0LjQvNC10YAsINGO0LzQvtGA0LjRgdGC0LjRh9C10YHQutC40LUg0LLQsNGA0LjQsNC90YLRiykuIDwvcD4gPGEgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fbGluayBpY29uLWV4cGFuZFxcXCIgaHJlZj1cXFwiI1xcXCI+0KfQuNGC0LDRgtGMINC00LDQu9GM0YjQtTwvYT4gPC9kaXY+IDxwaWN0dXJlIGNsYXNzPVxcXCJzZXJ2aWNlLWl0ZW1fX2ltZ1xcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2UvYXZpZlxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzEyX19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiAxMTIwcHgpXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS9hdmlmXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTNfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDc2OHB4KVxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2UvYXZpZlxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzE0X19fICsgXCJcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL3dlYnBcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xNV9fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogMTEyMHB4KVxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2Uvd2VicFxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzE2X19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiA3NjhweClcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL3dlYnBcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xN19fXyArIFwiXFxcIj4gPHNvdXJjZSBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMThfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDExMjBweClcXFwiPiA8c291cmNlIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xOV9fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogNzY4cHgpXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjBfX18gKyBcIlxcXCIgYWx0PVxcXCLRhNC+0YLQvlxcXCIvPiA8L3BpY3R1cmU+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzZXJ2ZWMtY29udGVudF9fc2VydmljZS1pdGVtIHNlcnZpY2UtaXRlbVxcXCIgZGF0YS10YXJnZXQ9XFxcInRocmVlXFxcIj4gPGRpdiBjbGFzcz1cXFwic2VydmljZS1pdGVtX193cmFwcFxcXCI+IDxwIGNsYXNzPVxcXCJzZXJ2aWNlLWl0ZW1fX3RleHRcXFwiPiDQldGB0YLRjCDQvNC90L7Qs9C+INCy0LDRgNC40LDQvdGC0L7QsiBMb3JlbSBJcHN1bSwg0L3QviDQsdC+0LvRjNGI0LjQvdGB0YLQstC+INC40Lcg0L3QuNGFINC40LzQtdC10YIg0L3QtSDQstGB0LXQs9C00LAg0L/RgNC40LXQvNC70LXQvNGL0LUg0LzQvtC00LjRhNC40LrQsNGG0LjQuCwg0L3QsNC/0YDQuNC80LXRgCwg0Y7QvNC+0YDQuNGB0YLQuNGH0LXRgdC60LjQtSDQstGB0YLQsNCy0LrQuCDQuNC70Lgg0YHQu9C+0LLQsCwg0LrQvtGC0L7RgNGL0LUg0LTQsNC20LUg0L7RgtC00LDQu9GR0L3QvdC+INC90LUg0L3QsNC/0L7QvNC40L3QsNGO0YIg0LvQsNGC0YvQvdGMLiDQldGB0LvQuCDQstCw0Lwg0L3Rg9C20LXQvSBMb3JlbSBJcHN1bSDQtNC70Y8g0YHQtdGA0YzRkdC30L3QvtCz0L4g0L/RgNC+0LXQutGC0LAsINCy0Ysg0L3QsNCy0LXRgNC90Y/QutCwINC90LUg0YXQvtGC0LjRgtC1INC60LDQutC+0Lkt0L3QuNCx0YPQtNGMINGI0YPRgtC60LgsINGB0LrRgNGL0YLQvtC5INCyINGB0LXRgNC10LTQuNC90LUg0LDQsdC30LDRhtCwLiA8L3A+IDxwIGNsYXNzPVxcXCJzZXJ2aWNlLWl0ZW1fX3RleHQgc2VydmljZS1pdGVtX190ZXh0LS12aXN1YWxseS1oaWRkZW5cXFwiPiDQotCw0LrQttC1INCy0YHQtSDQtNGA0YPQs9C40LUg0LjQt9Cy0LXRgdGC0L3Ri9C1INCz0LXQvdC10YDQsNGC0L7RgNGLIExvcmVtIElwc3VtINC40YHQv9C+0LvRjNC30YPRjtGCINC+0LTQuNC9INC4INGC0L7RgiDQttC1INGC0LXQutGB0YIsINC60L7RgtC+0YDRi9C5INC+0L3QuCDQv9GA0L7RgdGC0L4g0L/QvtCy0YLQvtGA0Y/RjtGCLCDQv9C+0LrQsCDQvdC1INC00L7RgdGC0LjQs9C90YPRgiDQvdGD0LbQvdGL0Lkg0L7QsdGK0ZHQvC4g0K3RgtC+INC00LXQu9Cw0LXRgiDQv9GA0LXQtNC70LDQs9Cw0LXQvNGL0Lkg0LfQtNC10YHRjCDQs9C10L3QtdGA0LDRgtC+0YAg0LXQtNC40L3RgdGC0LLQtdC90L3Ri9C8INC90LDRgdGC0L7Rj9GJ0LjQvCBMb3JlbSBJcHN1bSDQs9C10L3QtdGA0LDRgtC+0YDQvtC8LiDQntC9INC40YHQv9C+0LvRjNC30YPQtdGCINGB0LvQvtCy0LDRgNGMINC40Lcg0LHQvtC70LXQtSDRh9C10LwgMjAwINC70LDRgtC40L3RgdC60LjRhSDRgdC70L7Qsiwg0LAg0YLQsNC60LbQtSDQvdCw0LHQvtGAINC80L7QtNC10LvQtdC5INC/0YDQtdC00LvQvtC20LXQvdC40LkuINCSINGA0LXQt9GD0LvRjNGC0LDRgtC1INGB0LPQtdC90LXRgNC40YDQvtCy0LDQvdC90YvQuSBMb3JlbSBJcHN1bSDQstGL0LPQu9GP0LTQuNGCINC/0YDQsNCy0LTQvtC/0L7QtNC+0LHQvdC+LCDQvdC1INC40LzQtdC10YIg0L/QvtCy0YLQvtGA0Y/RjtGJ0LjRhdGB0Y8g0LDQsdC30LDRhtC10Lkg0LjQu9C4IFxcXCLQvdC10LLQvtC30LzQvtC20L3Ri9GFXFxcIiDRgdC70L7Qsi4gPC9wPiA8YSBjbGFzcz1cXFwic2VydmljZS1pdGVtX19saW5rIGljb24tZXhwYW5kXFxcIiBocmVmPVxcXCIjXFxcIj7Qp9C40YLQsNGC0Ywg0LTQsNC70YzRiNC1PC9hPiA8L2Rpdj4gPHBpY3R1cmUgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9faW1nXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS9hdmlmXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjFfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDExMjBweClcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL2F2aWZcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yMl9fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogNzY4cHgpXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS9hdmlmXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjNfX18gKyBcIlxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2Uvd2VicFxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzI0X19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiAxMTIwcHgpXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS93ZWJwXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjVfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDc2OHB4KVxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2Uvd2VicFxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzI2X19fICsgXCJcXFwiPiA8c291cmNlIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xOF9fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogMTEyMHB4KVxcXCI+IDxzb3VyY2Ugc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzE5X19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiA3NjhweClcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yN19fXyArIFwiXFxcIiBhbHQ9XFxcItGE0L7RgtC+XFxcIi8+IDwvcGljdHVyZT4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNlcnZlYy1jb250ZW50X19zZXJ2aWNlLWl0ZW0gc2VydmljZS1pdGVtXFxcIiBkYXRhLXRhcmdldD1cXFwiZm91clxcXCI+IDxkaXYgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fd3JhcHBcXFwiPiA8cCBjbGFzcz1cXFwic2VydmljZS1pdGVtX190ZXh0XFxcIj4g0JzQvdC+0LPQuNC1INC00YPQvNCw0Y7Rgiwg0YfRgtC+IExvcmVtIElwc3VtIC0g0LLQt9GP0YLRi9C5INGBINC/0L7RgtC+0LvQutCwINC/0YHQtdCy0LTQvi3Qu9Cw0YLQuNC90YHQutC40Lkg0L3QsNCx0L7RgCDRgdC70L7Qsiwg0L3QviDRjdGC0L4g0L3QtSDRgdC+0LLRgdC10Lwg0YLQsNC6LiDQldCz0L4g0LrQvtGA0L3QuCDRg9GF0L7QtNGP0YIg0LIg0L7QtNC40L0g0YTRgNCw0LPQvNC10L3RgiDQutC70LDRgdGB0LjRh9C10YHQutC+0Lkg0LvQsNGC0YvQvdC4IDQ1INCz0L7QtNCwINC9LtGNLiwg0YLQviDQtdGB0YLRjCDQsdC+0LvQtdC1INC00LLRg9GFINGC0YvRgdGP0YfQtdC70LXRgtC40Lkg0L3QsNC30LDQtC4g0KDQuNGH0LDRgNC0INCc0LDQutCa0LvQuNC90YLQvtC6LCDQv9GA0L7RhNC10YHRgdC+0YAg0LvQsNGC0YvQvdC4INC40Lcg0LrQvtC70LvQtdC00LbQsCBIYW1wZGVuLVN5ZG5leSwg0YjRgtCw0YIg0JLQuNGA0LTQttC40L3QuNGPLCDQstC30Y/QuyDQvtC00L3QviDQuNC3INGB0LDQvNGL0YUg0YHRgtGA0LDQvdC90YvRhSDRgdC70L7QsiDQsiBMb3JlbSBJcHN1bSwgXFxcImNvbnNlY3RldHVyXFxcIiwg0Lgg0LfQsNC90Y/Qu9GB0Y8g0LXQs9C+INC/0L7QuNGB0LrQsNC80Lgg0LIg0LrQu9Cw0YHRgdC40YfQtdGB0LrQvtC5INC70LDRgtC40L3RgdC60L7QuSDQu9C40YLQtdGA0LDRgtGD0YDQtS4gPC9wPiA8cCBjbGFzcz1cXFwic2VydmljZS1pdGVtX190ZXh0IHNlcnZpY2UtaXRlbV9fdGV4dC0tdmlzdWFsbHktaGlkZGVuXFxcIj4g0JIg0YDQtdC30YPQu9GM0YLQsNGC0LUg0L7QvSDQvdCw0YjRkdC7INC90LXQvtGB0L/QvtGA0LjQvNGL0Lkg0L/QtdGA0LLQvtC40YHRgtC+0YfQvdC40LogTG9yZW0gSXBzdW0g0LIg0YDQsNC30LTQtdC70LDRhSAxLjEwLjMyINC4IDEuMTAuMzMg0LrQvdC40LPQuCBcXFwiZGUgRmluaWJ1cyBCb25vcnVtIGV0IE1hbG9ydW1cXFwiIChcXFwi0J4g0L/RgNC10LTQtdC70LDRhSDQtNC+0LHRgNCwINC4INC30LvQsFxcXCIpLCDQvdCw0L/QuNGB0LDQvdC90L7QuSDQptC40YbQtdGA0L7QvdC+0Lwg0LIgNDUg0LPQvtC00YMg0L0u0Y0uIDwvcD4gPGEgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fbGluayBpY29uLWV4cGFuZFxcXCIgaHJlZj1cXFwiI1xcXCI+0KfQuNGC0LDRgtGMINC00LDQu9GM0YjQtTwvYT4gPC9kaXY+IDxwaWN0dXJlIGNsYXNzPVxcXCJzZXJ2aWNlLWl0ZW1fX2ltZ1xcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2UvYXZpZlxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzI4X19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiAxMTIwcHgpXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS9hdmlmXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjlfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDc2OHB4KVxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2UvYXZpZlxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzMwX19fICsgXCJcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL3dlYnBcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8zMV9fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogMTEyMHB4KVxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2Uvd2VicFxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzMyX19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiA3NjhweClcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL3dlYnBcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8zM19fXyArIFwiXFxcIj4gPHNvdXJjZSBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzRfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDExMjBweClcXFwiPiA8c291cmNlIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8zNV9fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogNzY4cHgpXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzZfX18gKyBcIlxcXCIgYWx0PVxcXCLRhNC+0YLQvlxcXCIvPiA8L3BpY3R1cmU+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzZXJ2ZWMtY29udGVudF9fc2VydmljZS1pdGVtIHNlcnZpY2UtaXRlbVxcXCIgZGF0YS10YXJnZXQ9XFxcImZpdmVcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzZXJ2aWNlLWl0ZW1fX3dyYXBwXFxcIj4gPHAgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fdGV4dFxcXCI+INCc0Ysg0Y/QstC70Y/QtdC80YHRjyDQsNCy0YLQvtGA0LjQt9C+0LLQsNC90L3Ri9C8INGB0LXRgNCy0LjRgdC90YvQvCDRhtC10L3RgtGA0L7QvCDQv9C+INGA0LXQvNC+0L3RgtGDINGC0LXRhdC90LjQutC4IERlbGwuINCi0L7Qu9GM0LrQviDRgyDQvdCw0YEg0LLRiyDQvNC+0LbQtdGC0LUg0L7RgtGA0LXQvNC+0L3RgtC40YDQvtCy0LDRgtGMINGB0LLQvtC5INC90L7Rg9GC0LHRg9C6IERlbGwg0YEg0L7RhNC40YbQuNCw0LvRjNC90L7QuSDQs9Cw0YDQsNC90YLQuNC10Lkg0L/RgNC+0LjQt9Cy0L7QtNC40YLQtdC70Y8uIDwvcD4gPHAgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fdGV4dCBzZXJ2aWNlLWl0ZW1fX3RleHQtLXZpc3VhbGx5LWhpZGRlblxcXCI+INCc0Ysg0YPRgdC/0LXRiNC90L4g0YDQsNCx0L7RgtCw0LXQvCDRgSAxOTkyINCz0L7QtNCwINC4INC30LDRgdC70YPQttC40LvQuCDRgNC10L/Rg9GC0LDRhtC40Y4g0L3QsNC00LXQttC90L7Qs9C+INC/0LDRgNGC0L3QtdGA0LAsINGH0YLQviDQv9C+0LTRgtCy0LXRgNC20LTQsNC10YIg0LHQvtC70YzRiNC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0L/QvtGB0YLQvtGP0L3QvdGL0YUg0LrQu9C40LXQvdGC0L7Qsi4g0JzRiyDQs9C+0YDQtNC40LzRgdGPINGC0LXQvCwg0YfRgtC+INC6INC90LDQvCDQvtCx0YDQsNGJ0LDRjtGC0YHRjyDQv9C+INGA0LXQutC+0LzQtdC90LTQsNGG0LjRj9C8INC4LCDQsiDRgdCy0L7RjiDQvtGH0LXRgNC10LTRjCwg0YHQvtCy0LXRgtGD0Y7RgiDQvdCw0YEg0YDQvtC00L3Ri9C8INC4INCx0LvQuNC30LrQuNC8LiA8L3A+IDxhIGNsYXNzPVxcXCJzZXJ2aWNlLWl0ZW1fX2xpbmsgaWNvbi1leHBhbmRcXFwiIGhyZWY9XFxcIiNcXFwiPtCn0LjRgtCw0YLRjCDQtNCw0LvRjNGI0LU8L2E+IDwvZGl2PiA8cGljdHVyZSBjbGFzcz1cXFwic2VydmljZS1pdGVtX19pbWdcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL2F2aWZcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8zN19fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogMTEyMHB4KVxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2UvYXZpZlxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzM4X19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiA3NjhweClcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL2F2aWZcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8zOV9fXyArIFwiXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS93ZWJwXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDBfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDExMjBweClcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL3dlYnBcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF80MV9fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogNzY4cHgpXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS93ZWJwXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDJfX18gKyBcIlxcXCI+IDxzb3VyY2Ugc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzQzX19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiAxMTIwcHgpXFxcIj4gPHNvdXJjZSBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDRfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDc2OHB4KVxcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzQ1X19fICsgXCJcXFwiIGFsdD1cXFwi0YTQvtGC0L5cXFwiLz4gPC9waWN0dXJlPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2VydmVjLWNvbnRlbnRfX3NlcnZpY2UtaXRlbSBzZXJ2aWNlLWl0ZW1cXFwiIGRhdGEtdGFyZ2V0PVxcXCJzaXhcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzZXJ2aWNlLWl0ZW1fX3dyYXBwXFxcIj4gPHAgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fdGV4dFxcXCI+IFNlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwgdG90YW0gcmVtIGFwZXJpYW0sIGVhcXVlIGlwc2EgcXVhZSBhYiBpbGxvIGludmVudG9yZSB2ZXJpdGF0aXMgZXQgcXVhc2kgYXJjaGl0ZWN0byBiZWF0YWUgdml0YWUgZGljdGEgc3VudCBleHBsaWNhYm8uIDwvcD4gPHAgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9fdGV4dCBzZXJ2aWNlLWl0ZW1fX3RleHQtLXZpc3VhbGx5LWhpZGRlblxcXCI+IE5lbW8gZW5pbSBpcHNhbSB2b2x1cHRhdGVtIHF1aWEgdm9sdXB0YXMgc2l0IGFzcGVybmF0dXIgYXV0IG9kaXQgYXV0IGZ1Z2l0LCBzZWQgcXVpYSBjb25zZXF1dW50dXIgbWFnbmkgZG9sb3JlcyBlb3MgcXVpIHJhdGlvbmUgdm9sdXB0YXRlbSBzZXF1aSBuZXNjaXVudC4gPC9wPiA8YSBjbGFzcz1cXFwic2VydmljZS1pdGVtX19saW5rIGljb24tZXhwYW5kXFxcIiBocmVmPVxcXCIjXFxcIj7Qp9C40YLQsNGC0Ywg0LTQsNC70YzRiNC1PC9hPiA8L2Rpdj4gPHBpY3R1cmUgY2xhc3M9XFxcInNlcnZpY2UtaXRlbV9faW1nXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS9hdmlmXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDZfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDExMjBweClcXFwiPiA8c291cmNlIHR5cGU9XFxcImltYWdlL2F2aWZcXFwiIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF80N19fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogNzY4cHgpXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS9hdmlmXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNDhfX18gKyBcIlxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2Uvd2VicFxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzQ5X19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiAxMTIwcHgpXFxcIj4gPHNvdXJjZSB0eXBlPVxcXCJpbWFnZS93ZWJwXFxcIiBzcmNzZXQ9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTBfX18gKyBcIlxcXCIgbWVkaWE9XFxcIihtaW4td2lkdGg6IDc2OHB4KVxcXCI+IDxzb3VyY2UgdHlwZT1cXFwiaW1hZ2Uvd2VicFxcXCIgc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzUxX19fICsgXCJcXFwiPiA8c291cmNlIHNyY3NldD1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF81Ml9fXyArIFwiXFxcIiBtZWRpYT1cXFwiKG1pbi13aWR0aDogMTEyMHB4KVxcXCI+IDxzb3VyY2Ugc3Jjc2V0PVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzUzX19fICsgXCJcXFwiIG1lZGlhPVxcXCIobWluLXdpZHRoOiA3NjhweClcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF81NF9fXyArIFwiXFxcIiBhbHQ9XFxcItGE0L7RgtC+XFxcIi8+IDwvcGljdHVyZT4gPC9kaXY+IDwvc2VjdGlvbj4gPHNlY3Rpb24gY2xhc3M9XFxcInNlcnZpY2UtYnJhbmRzXFxcIj4gPGgyIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fdGl0bGVcXFwiPtCg0LXQvNC+0L3RgiDRgtC10YXQvdC40LrQuCDRgNCw0LfQu9C40YfQvdGL0YUg0LHRgNC10L3QtNC+0LI8L2gyPiA8ZGl2IGNsYXNzPVxcXCJzd2lwZXItY29udGFpbmVyIHN3aXBlci1jb250YWluZXItLWJyYW5kcyBzZXJ2aWNlLWJyYW5kc19fY29udGFpbmVyXFxcIj4gPHVsIGNsYXNzPVxcXCJzd2lwZXItd3JhcHBlciBzZXJ2aWNlLWJyYW5kc19fd3JhcHBcXFwiPiA8bGkgY2xhc3M9XFxcInN3aXBlci1zbGlkZSBzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdCBzbGlkZS1saXN0XFxcIj4gPGEgY2xhc3M9XFxcInNsaWRlLWxpc3RfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0X19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTVfX18gKyBcIlxcXCIgYWx0PVxcXCJMZW5vdmFcXFwiIHdpZHRoPVxcXCIxMDhcXFwiIGhlaWdodD1cXFwiMzJcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdF9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInN3aXBlci1zbGlkZSBzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdCBzbGlkZS1saXN0XFxcIj4gPGEgY2xhc3M9XFxcInNsaWRlLWxpc3RfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0X19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTZfX18gKyBcIlxcXCIgYWx0PVxcXCJzYW1zdW5nXFxcIiB3aWR0aD1cXFwiMTE2XFxcIiBoZWlnaHQ9XFxcIjM4XFxcIj4gPHNwYW4gY2xhc3M9XFxcInNsaWRlLWxpc3RfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzd2lwZXItc2xpZGUgc2VydmljZS1icmFuZHNfX3NsaWRlLWxpc3Qgc2xpZGUtbGlzdFxcXCI+IDxhIGNsYXNzPVxcXCJzbGlkZS1saXN0X19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGltZyBjbGFzcz1cXFwic2xpZGUtbGlzdF9fbG9nb1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzU3X19fICsgXCJcXFwiIGFsdD1cXFwiYXBwbGVcXFwiIHdpZHRoPVxcXCI0NFxcXCIgaGVpZ2h0PVxcXCI0NFxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzbGlkZS1saXN0X19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHNlcnZpY2UtYnJhbmRzX19zbGlkZS1saXN0IHNsaWRlLWxpc3RcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdF9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxpbWcgY2xhc3M9XFxcInNsaWRlLWxpc3RfX2xvZ29cXFwiIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF81OF9fXyArIFwiXFxcIiBhbHQ9XFxcInZpZXdzb25pY2tcXFwiIHdpZHRoPVxcXCIxMjhcXFwiIGhlaWdodD1cXFwiMjFcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdF9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInN3aXBlci1zbGlkZSBzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdCBzbGlkZS1saXN0XFxcIj4gPGEgY2xhc3M9XFxcInNsaWRlLWxpc3RfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0X19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTlfX18gKyBcIlxcXCIgYWx0PVxcXCJib3NjaFxcXCIgd2lkdGg9XFxcIjEyOFxcXCIgaGVpZ2h0PVxcXCIyOFxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzbGlkZS1saXN0X19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHNlcnZpY2UtYnJhbmRzX19zbGlkZS1saXN0IHNsaWRlLWxpc3RcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdF9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxpbWcgY2xhc3M9XFxcInNsaWRlLWxpc3RfX2xvZ29cXFwiIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF82MF9fXyArIFwiXFxcIiBhbHQ9XFxcImhwXFxcIiB3aWR0aD1cXFwiNTJcXFwiIGhlaWdodD1cXFwiNTJcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdF9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInN3aXBlci1zbGlkZSBzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdCBzbGlkZS1saXN0XFxcIj4gPGEgY2xhc3M9XFxcInNsaWRlLWxpc3RfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0X19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNjFfX18gKyBcIlxcXCIgYWx0PVxcXCJhY2VyXFxcIiB3aWR0aD1cXFwiOTRcXFwiIGhlaWdodD1cXFwiMjRcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdF9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInN3aXBlci1zbGlkZSBzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdCBzbGlkZS1saXN0XFxcIj4gPGEgY2xhc3M9XFxcInNsaWRlLWxpc3RfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0X19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNjJfX18gKyBcIlxcXCIgYWx0PVxcXCJzb255XFxcIiB3aWR0aD1cXFwiMTI4XFxcIiBoZWlnaHQ9XFxcIjI2XFxcIj4gPHNwYW4gY2xhc3M9XFxcInNsaWRlLWxpc3RfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPC91bD4gPGRpdiBjbGFzcz1cXFwic3dpcGVyLXBhZ2luYXRpb24gc2VydmljZS1icmFuZHNfX3BhZ2luYXRpb25cXFwiPjwvZGl2PiA8L2Rpdj4gPHVsIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fd3JhcHAtdGFiIGFsbC1vcGVuXFxcIiBkYXRhLXRhcmdldD1cXFwib25lLWFsbG9wZW5cXFwiPiA8bGkgY2xhc3M9XFxcInNlcnZpY2UtYnJhbmRzX19zbGlkZS1saXN0LXRhYiBzbGlkZS1saXN0LXRhYlxcXCI+IDxhIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxpbWcgY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTVfX18gKyBcIlxcXCIgYWx0PVxcXCJMZW5vdmFcXFwiIHdpZHRoPVxcXCIxMDhcXFwiIGhlaWdodD1cXFwiMzJcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdC10YWIgc2xpZGUtbGlzdC10YWJcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbG9nb1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzU2X19fICsgXCJcXFwiIGFsdD1cXFwic2Ftc3VuZ1xcXCIgd2lkdGg9XFxcIjExNlxcXCIgaGVpZ2h0PVxcXCIzOFxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInNlcnZpY2UtYnJhbmRzX19zbGlkZS1saXN0LXRhYiBzbGlkZS1saXN0LXRhYlxcXCI+IDxhIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxpbWcgY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTdfX18gKyBcIlxcXCIgYWx0PVxcXCJhcHBsZVxcXCIgd2lkdGg9XFxcIjQ0XFxcIiBoZWlnaHQ9XFxcIjQ0XFxcIj4gPHNwYW4gY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic2VydmljZS1icmFuZHNfX3NsaWRlLWxpc3QtdGFiIHNsaWRlLWxpc3QtdGFiXFxcIj4gPGEgY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGltZyBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xvZ29cXFwiIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF81OF9fXyArIFwiXFxcIiBhbHQ9XFxcInZpZXdzb25pY2tcXFwiIHdpZHRoPVxcXCIxMjhcXFwiIGhlaWdodD1cXFwiMjFcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdC10YWIgc2xpZGUtbGlzdC10YWJcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbG9nb1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzU5X19fICsgXCJcXFwiIGFsdD1cXFwiYm9zY2hcXFwiIHdpZHRoPVxcXCIxMjhcXFwiIGhlaWdodD1cXFwiMjhcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdC10YWIgc2xpZGUtbGlzdC10YWJcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbG9nb1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzYwX19fICsgXCJcXFwiIGFsdD1cXFwiaHBcXFwiIHdpZHRoPVxcXCI1MlxcXCIgaGVpZ2h0PVxcXCI1MlxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInNlcnZpY2UtYnJhbmRzX19zbGlkZS1saXN0LXRhYiBzbGlkZS1saXN0LXRhYlxcXCI+IDxhIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxpbWcgY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNjFfX18gKyBcIlxcXCIgYWx0PVxcXCJhY2VyXFxcIiB3aWR0aD1cXFwiOTRcXFwiIGhlaWdodD1cXFwiMjRcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdC10YWIgc2xpZGUtbGlzdC10YWJcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbG9nb1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzYyX19fICsgXCJcXFwiIGFsdD1cXFwic29ueVxcXCIgd2lkdGg9XFxcIjEyOFxcXCIgaGVpZ2h0PVxcXCIyNlxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInNlcnZpY2UtYnJhbmRzX19zbGlkZS1saXN0LXRhYiBzbGlkZS1saXN0LXRhYlxcXCI+IDxhIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxpbWcgY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTVfX18gKyBcIlxcXCIgYWx0PVxcXCJMZW5vdmFcXFwiIHdpZHRoPVxcXCIxMDhcXFwiIGhlaWdodD1cXFwiMzJcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdC10YWIgc2xpZGUtbGlzdC10YWJcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbG9nb1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzU2X19fICsgXCJcXFwiIGFsdD1cXFwic2Ftc3VuZ1xcXCIgd2lkdGg9XFxcIjExNlxcXCIgaGVpZ2h0PVxcXCIzOFxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInNlcnZpY2UtYnJhbmRzX19zbGlkZS1saXN0LXRhYiBzbGlkZS1saXN0LXRhYlxcXCI+IDxhIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxpbWcgY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNTdfX18gKyBcIlxcXCIgYWx0PVxcXCJhcHBsZVxcXCIgd2lkdGg9XFxcIjQ0XFxcIiBoZWlnaHQ9XFxcIjQ0XFxcIj4gPHNwYW4gY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic2VydmljZS1icmFuZHNfX3NsaWRlLWxpc3QtdGFiIHNsaWRlLWxpc3QtdGFiXFxcIj4gPGEgY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGltZyBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xvZ29cXFwiIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF81OF9fXyArIFwiXFxcIiBhbHQ9XFxcInZpZXdzb25pY2tcXFwiIHdpZHRoPVxcXCIxMjhcXFwiIGhlaWdodD1cXFwiMjFcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdC10YWIgc2xpZGUtbGlzdC10YWJcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbG9nb1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzU5X19fICsgXCJcXFwiIGFsdD1cXFwiYm9zY2hcXFwiIHdpZHRoPVxcXCIxMjhcXFwiIGhlaWdodD1cXFwiMjhcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdC10YWIgc2xpZGUtbGlzdC10YWJcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbG9nb1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzYwX19fICsgXCJcXFwiIGFsdD1cXFwiaHBcXFwiIHdpZHRoPVxcXCI1MlxcXCIgaGVpZ2h0PVxcXCI1MlxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInNlcnZpY2UtYnJhbmRzX19zbGlkZS1saXN0LXRhYiBzbGlkZS1saXN0LXRhYlxcXCI+IDxhIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxpbWcgY2xhc3M9XFxcInNsaWRlLWxpc3QtdGFiX19sb2dvXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNjFfX18gKyBcIlxcXCIgYWx0PVxcXCJhY2VyXFxcIiB3aWR0aD1cXFwiOTRcXFwiIGhlaWdodD1cXFwiMjRcXFwiPiA8c3BhbiBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fc2xpZGUtbGlzdC10YWIgc2xpZGUtbGlzdC10YWJcXFwiPiA8YSBjbGFzcz1cXFwic2xpZGUtbGlzdC10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aW1nIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fbG9nb1xcXCIgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzYyX19fICsgXCJcXFwiIGFsdD1cXFwic29ueVxcXCIgd2lkdGg9XFxcIjEyOFxcXCIgaGVpZ2h0PVxcXCIyNlxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzbGlkZS1saXN0LXRhYl9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8L3VsPiA8YnV0dG9uIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fbGluayBzZXJ2aWNlLWl0ZW1fX2xpbmsgaWNvbi1leHBhbmRcXFwiIGRhdGEtcGF0aD1cXFwib25lLWFsbG9wZW5cXFwiPtCf0L7QutCw0LfQsNGC0Ywg0LLRgdC1PC9idXR0b24+IDwvc2VjdGlvbj4gPHNlY3Rpb24gY2xhc3M9XFxcInNlcnZpY2UtdHlwZVxcXCI+IDxoMiBjbGFzcz1cXFwic2VydmljZS10eXBlX190aXRsZVxcXCI+0KDQtdC80L7QvdGCINGA0LDQt9C70LjRh9C90YvRhSDQstC40LTQvtCyINGC0LXRhdC90LjQutC4PC9oMj4gPGRpdiBjbGFzcz1cXFwic3dpcGVyLWNvbnRhaW5lciBzd2lwZXItY29udGFpbmVyLS10eXBlXFxcIj4gPHVsIGNsYXNzPVxcXCJzd2lwZXItd3JhcHBlciBzZXJ2aWNlLXR5cGVfX3NlcnZpY2UtbGlzdC10eXBlIHNlcnZpY2UtbGlzdC10eXBlXFxcIj4gPGxpIGNsYXNzPVxcXCJzd2lwZXItc2xpZGUgc2VydmljZS1saXN0LXR5cGVfX2l0ZW1cXFwiPiA8YSBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGVfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aDMgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX190aXRsZVxcXCI+0KDQtdC80L7QvdGCINC90L7Rg9GC0LHRg9C60L7QsjwvaDM+IDxzcGFuIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZV9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInN3aXBlci1zbGlkZSBzZXJ2aWNlLWxpc3QtdHlwZV9faXRlbVxcXCI+IDxhIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZV9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxoMyBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGVfX3RpdGxlXFxcIj7QoNC10LzQvtC90YIg0L/Qu9Cw0L3RiNC10YLQvtCyPC9oMz4gPHNwYW4gY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHNlcnZpY2UtbGlzdC10eXBlX19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGgzIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZV9fdGl0bGVcXFwiPtCg0LXQvNC+0L3RgiDQn9CaPC9oMz4gPHNwYW4gY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHNlcnZpY2UtbGlzdC10eXBlX19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGgzIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZV9fdGl0bGVcXFwiPtCg0LXQvNC+0L3RgiDQn9CaPC9oMz4gPHNwYW4gY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHNlcnZpY2UtbGlzdC10eXBlX19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGgzIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZV9fdGl0bGVcXFwiPtCg0LXQvNC+0L3RgiDQn9CaPC9oMz4gPHNwYW4gY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHNlcnZpY2UtbGlzdC10eXBlX19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGgzIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZV9fdGl0bGVcXFwiPtCg0LXQvNC+0L3RgiDQn9CaPC9oMz4gPHNwYW4gY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHNlcnZpY2UtbGlzdC10eXBlX19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGgzIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZV9fdGl0bGVcXFwiPtCg0LXQvNC+0L3RgiDQn9CaPC9oMz4gPHNwYW4gY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDwvdWw+IDxkaXYgY2xhc3M9XFxcInN3aXBlci1wYWdpbmF0aW9uIHNlcnZpY2UtdHlwZV9fcGFnaW5hdGlvblxcXCI+PC9kaXY+IDwvZGl2PiA8dWwgY2xhc3M9XFxcInNlcnZpY2UtdHlwZV9fc2VydmljZS1saXN0LXR5cGUtdGFiIHNlcnZpY2UtbGlzdC10eXBlLXRhYiBhbGwtb3BlblxcXCIgZGF0YS10YXJnZXQ9XFxcInR3by1hbGxvcGVuXFxcIj4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZS10YWJfX2l0ZW1cXFwiPiA8YSBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGUtdGFiX19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGgzIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZS10YWJfX3RpdGxlXFxcIj7QoNC10LzQvtC90YIg0L3QvtGD0YLQsdGD0LrQvtCyPC9oMz4gPHNwYW4gY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlLXRhYl9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlLXRhYl9faXRlbVxcXCI+IDxhIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZS10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aDMgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlLXRhYl9fdGl0bGVcXFwiPtCg0LXQvNC+0L3RgiDQv9C70LDQvdGI0LXRgtC+0LI8L2gzPiA8c3BhbiBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGUtdGFiX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGUtdGFiX19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlLXRhYl9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxoMyBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGUtdGFiX190aXRsZVxcXCI+0KDQtdC80L7QvdGCINCf0Jo8L2gzPiA8c3BhbiBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGUtdGFiX19idG4gaWNvbi1kcm9wZG93blxcXCI+PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGUtdGFiX19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlLXRhYl9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxoMyBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGUtdGFiX190aXRsZVxcXCI+0KDQtdC80L7QvdGCINC90L7Rg9GC0LHRg9C60L7QsjwvaDM+IDxzcGFuIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZS10YWJfX2J0biBpY29uLWRyb3Bkb3duXFxcIj48L3NwYW4+IDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZS10YWJfX2l0ZW1cXFwiPiA8YSBjbGFzcz1cXFwic2VydmljZS1saXN0LXR5cGUtdGFiX19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj4gPGgzIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZS10YWJfX3RpdGxlXFxcIj7QoNC10LzQvtC90YIg0L/Qu9Cw0L3RiNC10YLQvtCyPC9oMz4gPHNwYW4gY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlLXRhYl9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlLXRhYl9faXRlbVxcXCI+IDxhIGNsYXNzPVxcXCJzZXJ2aWNlLWxpc3QtdHlwZS10YWJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPiA8aDMgY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlLXRhYl9fdGl0bGVcXFwiPtCg0LXQvNC+0L3RgiDQn9CaPC9oMz4gPHNwYW4gY2xhc3M9XFxcInNlcnZpY2UtbGlzdC10eXBlLXRhYl9fYnRuIGljb24tZHJvcGRvd25cXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8L3VsPiA8YnV0dG9uIGNsYXNzPVxcXCJzZXJ2aWNlLWJyYW5kc19fbGluayBzZXJ2aWNlLWl0ZW1fX2xpbmsgaWNvbi1leHBhbmRcXFwiIGRhdGEtcGF0aD1cXFwidHdvLWFsbG9wZW5cXFwiPtCf0L7QutCw0LfQsNGC0Ywg0LLRgdC1PC9idXR0b24+IDwvc2VjdGlvbj4gPHNlY3Rpb24gY2xhc3M9XFxcInNlcnZpY2UtcHJpY2VcXFwiPiA8aDIgY2xhc3M9XFxcInNlcnZpY2UtcHJpY2VfX3RpdGxlXFxcIj7QptC10L3RiyDQvdCwINGD0YHQu9GD0LPQuDwvaDI+IDxkaXYgY2xhc3M9XFxcInN3aXBlci1jb250YWluZXIgc3dpcGVyLWNvbnRhaW5lci0tcHJpY2VcXFwiPiA8dWwgY2xhc3M9XFxcInN3aXBlci13cmFwcGVyIHNlcnZpY2UtcHJpY2VfX3ByaWNlLWxpc3QgcHJpY2UtbGlzdFxcXCI+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHByaWNlLWxpc3RfX2l0ZW1cXFwiPiA8dWwgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tbGlzdFxcXCI+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1oZWFkZXJcXFwiPiA8aDMgY2xhc3M9XFxcInByaWNlLWxpc3RfX3RpdGxlXFxcIj7QoNC10LzQvtC90YLQvdGL0LUg0YPRgdC70YPQs9C4PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPtCU0LjQsNCz0L3QvtGB0YLQuNC60LA8L3NwYW4+IDwvbGk+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1tYWluXFxcIj4gPGgzIGNsYXNzPVxcXCJwcmljZS1saXN0X190aXRsZVxcXCI+0KbQtdC90LA8L2gzPiA8c3BhbiBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGV4dFxcXCI+0JHQtdGB0L/Qu9Cw0YLQvdC+PC9zcGFuPiA8L2xpPiA8bGkgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tZm9vdGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1mb290ZXItd3JhcFxcXCI+IDxoMyBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGl0bGVcXFwiPtCh0YDQvtC6PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPjMwINC80LjQvTwvc3Bhbj4gPC9kaXY+IDxhIGNsYXNzPVxcXCJwcmljZS1saXN0X19saW5rIGljb24tZHJvcGRvd25cXFwiIGhyZWY9XFxcIiNcXFwiPtCX0LDQutCw0LfQsNGC0Yw8L2E+IDwvbGk+IDwvdWw+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHByaWNlLWxpc3RfX2l0ZW1cXFwiPiA8dWwgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tbGlzdFxcXCI+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1oZWFkZXJcXFwiPiA8aDMgY2xhc3M9XFxcInByaWNlLWxpc3RfX3RpdGxlXFxcIj7QoNC10LzQvtC90YLQvdGL0LUg0YPRgdC70YPQs9C4PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPtCU0LjQsNCz0L3QvtGB0YLQuNC60LA8L3NwYW4+IDwvbGk+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1tYWluXFxcIj4gPGgzIGNsYXNzPVxcXCJwcmljZS1saXN0X190aXRsZVxcXCI+0KbQtdC90LA8L2gzPiA8c3BhbiBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGV4dFxcXCI+0JHQtdGB0L/Qu9Cw0YLQvdC+PC9zcGFuPiA8L2xpPiA8bGkgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tZm9vdGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1mb290ZXItd3JhcFxcXCI+IDxoMyBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGl0bGVcXFwiPtCh0YDQvtC6PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPjMwINC80LjQvTwvc3Bhbj4gPC9kaXY+IDxhIGNsYXNzPVxcXCJwcmljZS1saXN0X19saW5rIGljb24tZHJvcGRvd25cXFwiIGhyZWY9XFxcIiNcXFwiPtCX0LDQutCw0LfQsNGC0Yw8L2E+IDwvbGk+IDwvdWw+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHByaWNlLWxpc3RfX2l0ZW1cXFwiPiA8dWwgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tbGlzdFxcXCI+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1oZWFkZXJcXFwiPiA8aDMgY2xhc3M9XFxcInByaWNlLWxpc3RfX3RpdGxlXFxcIj7QoNC10LzQvtC90YLQvdGL0LUg0YPRgdC70YPQs9C4PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPtCU0LjQsNCz0L3QvtGB0YLQuNC60LA8L3NwYW4+IDwvbGk+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1tYWluXFxcIj4gPGgzIGNsYXNzPVxcXCJwcmljZS1saXN0X190aXRsZVxcXCI+0KbQtdC90LA8L2gzPiA8c3BhbiBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGV4dFxcXCI+0JHQtdGB0L/Qu9Cw0YLQvdC+PC9zcGFuPiA8L2xpPiA8bGkgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tZm9vdGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1mb290ZXItd3JhcFxcXCI+IDxoMyBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGl0bGVcXFwiPtCh0YDQvtC6PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPjMwINC80LjQvTwvc3Bhbj4gPC9kaXY+IDxhIGNsYXNzPVxcXCJwcmljZS1saXN0X19saW5rIGljb24tZHJvcGRvd25cXFwiIGhyZWY9XFxcIiNcXFwiPtCX0LDQutCw0LfQsNGC0Yw8L2E+IDwvbGk+IDwvdWw+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHByaWNlLWxpc3RfX2l0ZW1cXFwiPiA8dWwgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tbGlzdFxcXCI+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1oZWFkZXJcXFwiPiA8aDMgY2xhc3M9XFxcInByaWNlLWxpc3RfX3RpdGxlXFxcIj7QoNC10LzQvtC90YLQvdGL0LUg0YPRgdC70YPQs9C4PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPtCU0LjQsNCz0L3QvtGB0YLQuNC60LA8L3NwYW4+IDwvbGk+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1tYWluXFxcIj4gPGgzIGNsYXNzPVxcXCJwcmljZS1saXN0X190aXRsZVxcXCI+0KbQtdC90LA8L2gzPiA8c3BhbiBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGV4dFxcXCI+0JHQtdGB0L/Qu9Cw0YLQvdC+PC9zcGFuPiA8L2xpPiA8bGkgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tZm9vdGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1mb290ZXItd3JhcFxcXCI+IDxoMyBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGl0bGVcXFwiPtCh0YDQvtC6PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPjMwINC80LjQvTwvc3Bhbj4gPC9kaXY+IDxhIGNsYXNzPVxcXCJwcmljZS1saXN0X19saW5rIGljb24tZHJvcGRvd25cXFwiIGhyZWY9XFxcIiNcXFwiPtCX0LDQutCw0LfQsNGC0Yw8L2E+IDwvbGk+IDwvdWw+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHByaWNlLWxpc3RfX2l0ZW1cXFwiPiA8dWwgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tbGlzdFxcXCI+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1oZWFkZXJcXFwiPiA8aDMgY2xhc3M9XFxcInByaWNlLWxpc3RfX3RpdGxlXFxcIj7QoNC10LzQvtC90YLQvdGL0LUg0YPRgdC70YPQs9C4PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPtCU0LjQsNCz0L3QvtGB0YLQuNC60LA8L3NwYW4+IDwvbGk+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1tYWluXFxcIj4gPGgzIGNsYXNzPVxcXCJwcmljZS1saXN0X190aXRsZVxcXCI+0KbQtdC90LA8L2gzPiA8c3BhbiBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGV4dFxcXCI+0JHQtdGB0L/Qu9Cw0YLQvdC+PC9zcGFuPiA8L2xpPiA8bGkgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tZm9vdGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1mb290ZXItd3JhcFxcXCI+IDxoMyBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGl0bGVcXFwiPtCh0YDQvtC6PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPjMwINC80LjQvTwvc3Bhbj4gPC9kaXY+IDxhIGNsYXNzPVxcXCJwcmljZS1saXN0X19saW5rIGljb24tZHJvcGRvd25cXFwiIGhyZWY9XFxcIiNcXFwiPtCX0LDQutCw0LfQsNGC0Yw8L2E+IDwvbGk+IDwvdWw+IDwvbGk+IDxsaSBjbGFzcz1cXFwic3dpcGVyLXNsaWRlIHByaWNlLWxpc3RfX2l0ZW1cXFwiPiA8dWwgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tbGlzdFxcXCI+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1oZWFkZXJcXFwiPiA8aDMgY2xhc3M9XFxcInByaWNlLWxpc3RfX3RpdGxlXFxcIj7QoNC10LzQvtC90YLQvdGL0LUg0YPRgdC70YPQs9C4PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPtCU0LjQsNCz0L3QvtGB0YLQuNC60LA8L3NwYW4+IDwvbGk+IDxsaSBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1tYWluXFxcIj4gPGgzIGNsYXNzPVxcXCJwcmljZS1saXN0X190aXRsZVxcXCI+0KbQtdC90LA8L2gzPiA8c3BhbiBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGV4dFxcXCI+0JHQtdGB0L/Qu9Cw0YLQvdC+PC9zcGFuPiA8L2xpPiA8bGkgY2xhc3M9XFxcInByaWNlLWxpc3RfX2l0ZW0tZm9vdGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwicHJpY2UtbGlzdF9faXRlbS1mb290ZXItd3JhcFxcXCI+IDxoMyBjbGFzcz1cXFwicHJpY2UtbGlzdF9fdGl0bGVcXFwiPtCh0YDQvtC6PC9oMz4gPHNwYW4gY2xhc3M9XFxcInByaWNlLWxpc3RfX3RleHRcXFwiPjMwINC80LjQvTwvc3Bhbj4gPC9kaXY+IDxhIGNsYXNzPVxcXCJwcmljZS1saXN0X19saW5rIGljb24tZHJvcGRvd25cXFwiIGhyZWY9XFxcIiNcXFwiPtCX0LDQutCw0LfQsNGC0Yw8L2E+IDwvbGk+IDwvdWw+IDwvbGk+IDwvdWw+IDxkaXYgY2xhc3M9XFxcInN3aXBlci1wYWdpbmF0aW9uIHNlcnZpY2UtcHJpY2VfX3BhZ2luYXRpb25cXFwiPjwvZGl2PiA8L2Rpdj4gPHRhYmxlIGNsYXNzPVxcXCJzZXJ2aWNlLXByaWNlX190YWJsZS1wcmljZSB0YWJsZS1wcmljZVxcXCI+IDx0ciBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2hlYWRlclxcXCI+IDx0aCBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2hlYWRlci1pdGVtXFxcIj7QoNC10LzQvtC90YLQvdGL0LUg0YPRgdC70YPQs9C4PC90aD4gPHRoIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faGVhZGVyLWl0ZW1cXFwiPtCm0LXQvdCwPC90aD4gPHRoIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faGVhZGVyLWl0ZW1cXFwiPtCh0YDQvtC6PC90aD4gPHRoIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faGVhZGVyLWl0ZW1cXFwiPjwvdGg+IDwvdHI+IDx0ciBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2xpc3RcXFwiPiA8dGQgY2xhc3M9XFxcInRhYmxlLXByaWNlX19pdGVtXFxcIj7QlNC40LDQs9C90L7RgdGC0LjQutCwPC90ZD4gPHRkIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faXRlbVxcXCI+0JHQtdGB0L/Qu9Cw0YLQvdC+PC90ZD4gPHRkIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faXRlbVxcXCI+MzAg0LzQuNC9PC90ZD4gPHRkIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faXRlbVxcXCI+PGEgY2xhc3M9XFxcInRhYmxlLXByaWNlX19saW5rIGljb24tZHJvcGRvd25cXFwiIGhyZWY9XFxcIiNcXFwiPtCX0LDQutCw0LfQsNGC0Yw8L2E+PC90ZD4gPC90cj4gPHRyIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9fbGlzdFxcXCI+IDx0ZCBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2l0ZW1cXFwiPtCX0LDQvNC10L3QsCDQtNC40YHQv9C70LXRjzwvdGQ+IDx0ZCBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2l0ZW1cXFwiPjEwMDAgJiM4MzgxOzwvdGQ+IDx0ZCBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2l0ZW1cXFwiPjMwLTEyMCDQvNC40L08L3RkPiA8dGQgY2xhc3M9XFxcInRhYmxlLXByaWNlX19pdGVtXFxcIj48YSBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2xpbmsgaWNvbi1kcm9wZG93blxcXCIgaHJlZj1cXFwiI1xcXCI+0JfQsNC60LDQt9Cw0YLRjDwvYT48L3RkPiA8L3RyPiA8dHIgY2xhc3M9XFxcInRhYmxlLXByaWNlX19saXN0XFxcIj4gPHRkIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faXRlbVxcXCI+0JfQsNC80LXQvdCwINC/0L7Qu9C40YTQvtC90LjRh9C10YHQutC+0LPQviDQtNC40L3QsNC80LjQutCwPC90ZD4gPHRkIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faXRlbVxcXCI+MTAwMCAmIzgzODE7PC90ZD4gPHRkIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faXRlbVxcXCI+MzAtMTIwINC80LjQvTwvdGQ+IDx0ZCBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2l0ZW1cXFwiPjxhIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9fbGluayBpY29uLWRyb3Bkb3duXFxcIiBocmVmPVxcXCIjXFxcIj7Ql9Cw0LrQsNC30LDRgtGMPC9hPjwvdGQ+IDwvdHI+IDx0ciBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2xpc3RcXFwiPiA8dGQgY2xhc3M9XFxcInRhYmxlLXByaWNlX19pdGVtXFxcIj7QotC10YHRgtC40YDQvtCy0LDQvdC40LUg0YEg0LLRi9C00LDRh9C10Lkg0YLQtdGF0L3QuNGH0LXRgdC60L7Qs9C+INC30LDQutC70Y7Rh9C10L3QuNGPPC90ZD4gPHRkIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faXRlbVxcXCI+MTAwMCAmIzgzODE7PC90ZD4gPHRkIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faXRlbVxcXCI+MzAtMTIwINC80LjQvTwvdGQ+IDx0ZCBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2l0ZW1cXFwiPjxhIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9fbGluayBpY29uLWRyb3Bkb3duXFxcIiBocmVmPVxcXCIjXFxcIj7Ql9Cw0LrQsNC30LDRgtGMPC9hPjwvdGQ+IDwvdHI+IDx0ciBjbGFzcz1cXFwidGFibGUtcHJpY2VfX2xpc3RcXFwiPiA8dGQgY2xhc3M9XFxcInRhYmxlLXByaWNlX19pdGVtXFxcIj7Ql9Cw0LzQtdC90LAg0L/RgNC+0LPRgNCw0LzQvNC90L7Qs9C+INC+0LHQtdGB0L/QtdGH0LXQvdC40Y88L3RkPiA8dGQgY2xhc3M9XFxcInRhYmxlLXByaWNlX19pdGVtXFxcIj4xMDAwICYjODM4MTs8L3RkPiA8dGQgY2xhc3M9XFxcInRhYmxlLXByaWNlX19pdGVtXFxcIj4zMC0xMjAg0LzQuNC9PC90ZD4gPHRkIGNsYXNzPVxcXCJ0YWJsZS1wcmljZV9faXRlbVxcXCI+PGEgY2xhc3M9XFxcInRhYmxlLXByaWNlX19saW5rIGljb24tZHJvcGRvd25cXFwiIGhyZWY9XFxcIiNcXFwiPtCX0LDQutCw0LfQsNGC0Yw8L2E+PC90ZD4gPC90cj4gPC90YWJsZT4gPHAgY2xhc3M9XFxcInNlcnZpY2UtcHJpY2VfX3RleHRcXFwiPiDQktGB0LUg0YbQtdC90Ysg0YPQutCw0LfQsNC90Ysg0YEg0YPRh9C10YLQvtC8INCd0JTQoS4g0KHRgtC+0LjQvNC+0YHRgtGMINGA0LXQvNC+0L3RgtCwINGD0LrQsNC30LDQvdCwINC90LAg0LXQtNC40L3QuNGH0L3Rg9GOINGD0YHQu9GD0LPRgy4g0JTQu9GPINC/0L7Qu9GD0YfQtdC90LjRjyDQutC+0LzQvNC10YDRh9C10YHQutC+0LPQviDQv9GA0LXQtNC70L7QttC10L3QuNGPINC90LAg0L/QvtGB0YLQvtGP0L3QvdC+0LUg0L7QsdGB0LvRg9C20LjQstCw0L3QuNC1LCDQvtGB0YLQsNCy0YzRgtC1INC30LDRj9Cy0LrRgy4gPC9wPiA8YSBjbGFzcz1cXFwic2VydmljZS1wcmljZV9fbGluayBpY29uLWRyb3Bkb3duXFxcIiBocmVmPVxcXCIjXFxcIj7Qn9C+0LvRg9GH0LjRgtGMINC60L7QvNC80LXRgNGH0LXRgdC60L7QtSDQv9GA0LXQtNC70L7QttC10L3QuNC1PC9hPiA8L3NlY3Rpb24+IDwvbWFpbj4gPHNlY3Rpb24gY2xhc3M9XFxcImNwcy1wb3BhcCBjcHMtcG9wYXAtLW5vbmUgYmxvay1qcy1hY3RpdmVcXFwiIGRhdGEtdGFyZ2V0PVxcXCJvbmUtYnRuXFxcIj4gPGgyIGNsYXNzPVxcXCJjcHMtcG9wYXBfX3RpdGxlXFxcIj7QntCx0YDQsNGC0L3QsNGPINGB0LLRj9C30Yw8L2gyPiA8Zm9ybSBjbGFzcz1cXFwiY3BzLXBvcGFwX19mYi1mb3JtIGZiLWZvcm1cXFwiIGFjdGlvbj1cXFwiI1xcXCIgbWV0aG9kPVxcXCJQT1NUXFxcIiBlbmN0eXBlPVxcXCJtdWx0aXBhcnQvZm9ybS1kYXRhXFxcIj4gPGxhYmVsIGZvcj1cXFwiZmItbmFtZVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJ2aXN1YWxseS1oaWRkZW5cXFwiPtCY0LzRjzwvc3Bhbj4gPGlucHV0IGNsYXNzPVxcXCJmYi1mb3JtX19pbnB1dFxcXCIgdHlwZT1cXFwidGV4dFxcXCIgbmFtZT1cXFwibmFtZVxcXCIgcGxhY2Vob2xkZXI9XFxcItCY0LzRj1xcXCIgcmVxdWlyZWQ9XFxcInJlcXVpcmVkXFxcIiBpZD1cXFwiZmItbmFtZVxcXCI+IDwvbGFiZWw+IDxsYWJlbCBmb3I9XFxcImZiLXBob25lXFxcIj4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0KLQtdC70LXRhNC+0L08L3NwYW4+IDxpbnB1dCBjbGFzcz1cXFwiZmItZm9ybV9faW5wdXRcXFwiIHR5cGU9XFxcInRleHRcXFwiIG5hbWU9XFxcInBob25lXFxcIiBwbGFjZWhvbGRlcj1cXFwi0KLQtdC70LXRhNC+0L1cXFwiIHJlcXVpcmVkPVxcXCJyZXF1aXJlZFxcXCIgaWQ9XFxcImZiLXBob25lXFxcIj4gPC9sYWJlbD4gPGxhYmVsIGZvcj1cXFwiZmItZW1haWxcXFwiPiA8c3BhbiBjbGFzcz1cXFwidmlzdWFsbHktaGlkZGVuXFxcIj7QrdC70LXRgtGA0L7QvdC90LDRjyDQv9C+0YfRgtCwPC9zcGFuPiA8aW5wdXQgY2xhc3M9XFxcImZiLWZvcm1fX2lucHV0XFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPVxcXCJlbWFpbFxcXCIgcGxhY2Vob2xkZXI9XFxcItCt0LvQtdGC0YDQvtC90L3QsNGPINC/0L7Rh9GC0LBcXFwiIHJlcXVpcmVkPVxcXCJyZXF1aXJlZFxcXCIgaWQ9XFxcImZiLWVtYWlsXFxcIj4gPC9sYWJlbD4gPGxhYmVsIGZvcj1cXFwiZmItbWVzc2FnZVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJ2aXN1YWxseS1oaWRkZW5cXFwiPtCh0L7QvtCx0YnQtdC90LjQtTwvc3Bhbj4gPHRleHRhcmVhIGNsYXNzPVxcXCJmYi1mb3JtX19pbnB1dCBmYi1mb3JtX190ZXh0YXJlYVxcXCIgcGxhY2Vob2xkZXI9XFxcItCh0L7QvtCx0YnQtdC90LjQtVxcXCIgaWQ9XFxcImZiLW1lc3NhZ2VcXFwiPjwvdGV4dGFyZWE+IDwvbGFiZWw+IDxwIGNsYXNzPVxcXCJmYi1mb3JtX190ZXh0XFxcIj4g0J3QsNC20LjQvNCw0Y8g4oCc0L7RgtC/0YDQsNCy0LjRgtGM4oCdLCDQstGLINC00LDQtdGC0LUg0YHQvtCz0LvQsNGB0LjQtSDQvdCwIDxzdHJvbmcgY2xhc3M9XFxcImZiLWZvcm1fX3RleHQtLWNvbG9yLXJhZGljYWwtcmVkXFxcIj7QvtCx0YDQsNCx0L7RgtC60YMg0L/QtdGA0YHQvtC90LDQu9GM0L3Ri9GFINC00LDQvdC90YvRhTwvc3Ryb25nPiDQuCDRgdC+0LPQu9Cw0YjQsNC10YLQtdGB0Ywg0YEg0L3QsNGI0LXQuSA8YSBjbGFzcz1cXFwiZmItZm9ybV9fdGV4dC0tY29sb3ItcmFkaWNhbC1yZWRcXFwiIGhyZWY9XFxcIiNcXFwiPtC/0L7Qu9C40YLQuNC60L7QuSDQutC+0L3RhNC40LTQtdC90YbQuNCw0LvRjNC90L7RgdGC0Lg8L2E+IDwvcD4gPGJ1dHRvbiBjbGFzcz1cXFwiZmItZm9ybV9fYnRuIGljb24tZHJvcGRvd25cXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCI+0J7RgtC/0YDQsNCy0LjRgtGMPC9idXR0b24+IDwvZm9ybT4gPGJ1dHRvbiBjbGFzcz1cXFwiY3BzLXBvcGFwX19idG4gYnRuLWNsb3NlIGJ1dHRvbi1qcy1vcGVuXFxcIj4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0JfQsNC60YDRi9GC0Ywg0LzQtdC90Y48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJidG4tY2xvc2VfX2VsbS1idG5cXFwiPjwvc3Bhbj4gPC9idXR0b24+IDxkaXYgY2xhc3M9XFxcImNwcy1qcy1iZyBjcHMtcG9wYXBfX2JnXFxcIj48L2Rpdj4gPC9zZWN0aW9uPiA8c2VjdGlvbiBjbGFzcz1cXFwiY3BzLXBvcGFwIGNwcy1wb3BhcC0tbm9uZSBibG9rLWpzLWFjdGl2ZVxcXCIgZGF0YS10YXJnZXQ9XFxcInR3by1idG5cXFwiPiA8aDIgY2xhc3M9XFxcImNwcy1wb3BhcF9fdGl0bGVcXFwiPtCh0YLQsNGC0YPRgSDRgNC10LzQvtC90YLQsDwvaDI+IDxmb3JtIGNsYXNzPVxcXCJjcHMtcG9wYXBfX2ZiLWZvcm0gZmItZm9ybVxcXCIgYWN0aW9uPVxcXCIjXFxcIiBtZXRob2Q9XFxcIlBPU1RcXFwiIGVuY3R5cGU9XFxcIm11bHRpcGFydC9mb3JtLWRhdGFcXFwiPiA8bGFiZWw+IDxzcGFuIGNsYXNzPVxcXCJ2aXN1YWxseS1oaWRkZW5cXFwiPtCi0LXQu9C10YTQvtC9PC9zcGFuPiA8aW5wdXQgY2xhc3M9XFxcImZiLWZvcm1fX2lucHV0XFxcIiB0eXBlPVxcXCJ0ZWxcXFwiIG5hbWU9XFxcInBob25lXFxcIiBwbGFjZWhvbGRlcj1cXFwi0KLQtdC70LXRhNC+0L1cXFwiIHJlcXVpcmVkPVxcXCJyZXF1aXJlZFxcXCI+IDwvbGFiZWw+IDxwIGNsYXNzPVxcXCJmYi1mb3JtX190ZXh0XFxcIj4g0J3QsNC20LjQvNCw0Y8g4oCc0L7RgtC/0YDQsNCy0LjRgtGM4oCdLCDQstGLINC00LDQtdGC0LUg0YHQvtCz0LvQsNGB0LjQtSDQvdCwIDxzdHJvbmcgY2xhc3M9XFxcImZiLWZvcm1fX3RleHQtLWNvbG9yLXJhZGljYWwtcmVkXFxcIj7QvtCx0YDQsNCx0L7RgtC60YMg0L/QtdGA0YHQvtC90LDQu9GM0L3Ri9GFINC00LDQvdC90YvRhTwvc3Ryb25nPiDQuCDRgdC+0LPQu9Cw0YjQsNC10YLQtdGB0Ywg0YEg0L3QsNGI0LXQuSA8YSBjbGFzcz1cXFwiZmItZm9ybV9fdGV4dC0tY29sb3ItcmFkaWNhbC1yZWRcXFwiIGhyZWY9XFxcIiNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj7Qv9C+0LvQuNGC0LjQutC+0Lkg0LrQvtC90YTQuNC00LXQvdGG0LjQsNC70YzQvdC+0YHRgtC4PC9hPiA8L3A+IDxidXR0b24gY2xhc3M9XFxcImZiLWZvcm1fX2J0biBpY29uLWRyb3Bkb3duXFxcIiB0eXBlPVxcXCJzdWJtaXRcXFwiPtCe0YLQv9GA0LDQstC40YLRjDwvYnV0dG9uPiA8L2Zvcm0+IDxidXR0b24gY2xhc3M9XFxcImNwcy1wb3BhcF9fYnRuIGJ0bi1jbG9zZSBidXR0b24tanMtb3BlblxcXCI+IDxzcGFuIGNsYXNzPVxcXCJ2aXN1YWxseS1oaWRkZW5cXFwiPtCX0LDQutGA0YvRgtGMINC80LXQvdGOPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiYnRuLWNsb3NlX19lbG0tYnRuXFxcIj48L3NwYW4+IDwvYnV0dG9uPiA8ZGl2IGNsYXNzPVxcXCJjcHMtanMtYmcgY3BzLXBvcGFwX19iZ1xcXCI+PC9kaXY+IDwvc2VjdGlvbj4gPHNlY3Rpb24gY2xhc3M9XFxcImNwcy1wb3BhcCBjcHMtcG9wYXAtLW5vbmUgYmxvay1qcy1hY3RpdmVcXFwiIGRhdGEtdGFyZ2V0PVxcXCJ0aHJlZS1idG5cXFwiPiA8aDIgY2xhc3M9XFxcImNwcy1wb3BhcF9fdGl0bGVcXFwiPtCX0LDQutCw0LfQsNGC0Ywg0LfQstC+0L3QvtC6PC9oMj4gPGZvcm0gY2xhc3M9XFxcImNwcy1wb3BhcF9fZmItZm9ybSBmYi1mb3JtXFxcIiBhY3Rpb249XFxcIiNcXFwiIG1ldGhvZD1cXFwiUE9TVFxcXCIgZW5jdHlwZT1cXFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVxcXCI+IDxsYWJlbD4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0KLQtdC70LXRhNC+0L08L3NwYW4+IDxpbnB1dCBjbGFzcz1cXFwiZmItZm9ybV9faW5wdXRcXFwiIHR5cGU9XFxcInRlbFxcXCIgbmFtZT1cXFwicGhvbmVcXFwiIHBsYWNlaG9sZGVyPVxcXCLQotC10LvQtdGE0L7QvVxcXCIgcmVxdWlyZWQ9XFxcInJlcXVpcmVkXFxcIj4gPC9sYWJlbD4gPHAgY2xhc3M9XFxcImZiLWZvcm1fX3RleHRcXFwiPiDQndCw0LbQuNC80LDRjyDigJzQvtGC0L/RgNCw0LLQuNGC0YzigJ0sINCy0Ysg0LTQsNC10YLQtSDRgdC+0LPQu9Cw0YHQuNC1INC90LAgPHN0cm9uZyBjbGFzcz1cXFwiZmItZm9ybV9fdGV4dC0tY29sb3ItcmFkaWNhbC1yZWRcXFwiPtC+0LHRgNCw0LHQvtGC0LrRgyDQv9C10YDRgdC+0L3QsNC70YzQvdGL0YUg0LTQsNC90L3Ri9GFPC9zdHJvbmc+INC4INGB0L7Qs9C70LDRiNCw0LXRgtC10YHRjCDRgSDQvdCw0YjQtdC5IDxhIGNsYXNzPVxcXCJmYi1mb3JtX190ZXh0LS1jb2xvci1yYWRpY2FsLXJlZFxcXCIgaHJlZj1cXFwiI1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPtC/0L7Qu9C40YLQuNC60L7QuSDQutC+0L3RhNC40LTQtdC90YbQuNCw0LvRjNC90L7RgdGC0Lg8L2E+IDwvcD4gPGJ1dHRvbiBjbGFzcz1cXFwiZmItZm9ybV9fYnRuIGljb24tZHJvcGRvd25cXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCI+0J7RgtC/0YDQsNCy0LjRgtGMPC9idXR0b24+IDwvZm9ybT4gPGJ1dHRvbiBjbGFzcz1cXFwiY3BzLXBvcGFwX19idG4gYnRuLWNsb3NlIGJ1dHRvbi1qcy1vcGVuXFxcIj4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0JfQsNC60YDRi9GC0Ywg0LzQtdC90Y48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJidG4tY2xvc2VfX2VsbS1idG5cXFwiPjwvc3Bhbj4gPC9idXR0b24+IDxkaXYgY2xhc3M9XFxcImNwcy1qcy1iZyBjcHMtcG9wYXBfX2JnXFxcIj48L2Rpdj4gPC9zZWN0aW9uPiA8c2VjdGlvbiBjbGFzcz1cXFwiY3BzLXBvcGFwIGNwcy1wb3BhcC0tbm9uZSBibG9rLWpzLWFjdGl2ZVxcXCIgZGF0YS10YXJnZXQ9XFxcInRocmVlLWJ0blxcXCI+IDxoMiBjbGFzcz1cXFwiY3BzLXBvcGFwX190aXRsZVxcXCI+0JfQsNC60LDQt9Cw0YLRjCDQt9Cy0L7QvdC+0Lo8L2gyPiA8Zm9ybSBjbGFzcz1cXFwiY3BzLXBvcGFwX19mYi1mb3JtIGZiLWZvcm1cXFwiIGFjdGlvbj1cXFwiI1xcXCIgbWV0aG9kPVxcXCJQT1NUXFxcIiBlbmN0eXBlPVxcXCJtdWx0aXBhcnQvZm9ybS1kYXRhXFxcIj4gPGxhYmVsPiA8c3BhbiBjbGFzcz1cXFwidmlzdWFsbHktaGlkZGVuXFxcIj7QotC10LvQtdGE0L7QvTwvc3Bhbj4gPGlucHV0IGNsYXNzPVxcXCJmYi1mb3JtX19pbnB1dFxcXCIgdHlwZT1cXFwidGVsXFxcIiBuYW1lPVxcXCJwaG9uZVxcXCIgcGxhY2Vob2xkZXI9XFxcItCi0LXQu9C10YTQvtC9XFxcIiByZXF1aXJlZD1cXFwicmVxdWlyZWRcXFwiPiA8L2xhYmVsPiA8cCBjbGFzcz1cXFwiZmItZm9ybV9fdGV4dFxcXCI+INCd0LDQttC40LzQsNGPIOKAnNC+0YLQv9GA0LDQstC40YLRjOKAnSwg0LLRiyDQtNCw0LXRgtC1INGB0L7Qs9C70LDRgdC40LUg0L3QsCA8c3Ryb25nIGNsYXNzPVxcXCJmYi1mb3JtX190ZXh0LS1jb2xvci1yYWRpY2FsLXJlZFxcXCI+0L7QsdGA0LDQsdC+0YLQutGDINC/0LXRgNGB0L7QvdCw0LvRjNC90YvRhSDQtNCw0L3QvdGL0YU8L3N0cm9uZz4g0Lgg0YHQvtCz0LvQsNGI0LDQtdGC0LXRgdGMINGBINC90LDRiNC10LkgPGEgY2xhc3M9XFxcImZiLWZvcm1fX3RleHQtLWNvbG9yLXJhZGljYWwtcmVkXFxcIiBocmVmPVxcXCIjXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+0L/QvtC70LjRgtC40LrQvtC5INC60L7QvdGE0LjQtNC10L3RhtC40LDQu9GM0L3QvtGB0YLQuDwvYT4gPC9wPiA8YnV0dG9uIGNsYXNzPVxcXCJmYi1mb3JtX19idG4gaWNvbi1kcm9wZG93blxcXCIgdHlwZT1cXFwic3VibWl0XFxcIj7QntGC0L/RgNCw0LLQuNGC0Yw8L2J1dHRvbj4gPC9mb3JtPiA8YnV0dG9uIGNsYXNzPVxcXCJjcHMtcG9wYXBfX2J0biBidG4tY2xvc2UgYnV0dG9uLWpzLW9wZW5cXFwiPiA8c3BhbiBjbGFzcz1cXFwidmlzdWFsbHktaGlkZGVuXFxcIj7Ql9Cw0LrRgNGL0YLRjCDQvNC10L3Rjjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImJ0bi1jbG9zZV9fZWxtLWJ0blxcXCI+PC9zcGFuPiA8L2J1dHRvbj4gPGRpdiBjbGFzcz1cXFwiY3BzLWpzLWJnIGNwcy1wb3BhcF9fYmdcXFwiPjwvZGl2PiA8L3NlY3Rpb24+IDxzZWN0aW9uIGNsYXNzPVxcXCJjcHMtcG9wYXAgY3BzLXBvcGFwLS1ub25lIGJsb2stanMtYWN0aXZlXFxcIiBkYXRhLXRhcmdldD1cXFwiZm91ci1idG5cXFwiPiA8aDIgY2xhc3M9XFxcImNwcy1wb3BhcF9fdGl0bGVcXFwiPtCd0LDRh9Cw0YLRjCDRh9Cw0YI8L2gyPiA8Zm9ybSBjbGFzcz1cXFwiY3BzLXBvcGFwX19mYi1mb3JtIGZiLWZvcm1cXFwiIGFjdGlvbj1cXFwiI1xcXCIgbWV0aG9kPVxcXCJQT1NUXFxcIiBlbmN0eXBlPVxcXCJtdWx0aXBhcnQvZm9ybS1kYXRhXFxcIj4gPGxhYmVsPiA8c3BhbiBjbGFzcz1cXFwidmlzdWFsbHktaGlkZGVuXFxcIj7QotC10LvQtdGE0L7QvTwvc3Bhbj4gPGlucHV0IGNsYXNzPVxcXCJmYi1mb3JtX19pbnB1dFxcXCIgdHlwZT1cXFwidGVsXFxcIiBuYW1lPVxcXCJwaG9uZVxcXCIgcGxhY2Vob2xkZXI9XFxcItCi0LXQu9C10YTQvtC9XFxcIiByZXF1aXJlZD1cXFwicmVxdWlyZWRcXFwiPiA8L2xhYmVsPiA8cCBjbGFzcz1cXFwiZmItZm9ybV9fdGV4dFxcXCI+INCd0LDQttC40LzQsNGPIOKAnNC+0YLQv9GA0LDQstC40YLRjOKAnSwg0LLRiyDQtNCw0LXRgtC1INGB0L7Qs9C70LDRgdC40LUg0L3QsCA8c3Ryb25nIGNsYXNzPVxcXCJmYi1mb3JtX190ZXh0LS1jb2xvci1yYWRpY2FsLXJlZFxcXCI+0L7QsdGA0LDQsdC+0YLQutGDINC/0LXRgNGB0L7QvdCw0LvRjNC90YvRhSDQtNCw0L3QvdGL0YU8L3N0cm9uZz4g0Lgg0YHQvtCz0LvQsNGI0LDQtdGC0LXRgdGMINGBINC90LDRiNC10LkgPGEgY2xhc3M9XFxcImZiLWZvcm1fX3RleHQtLWNvbG9yLXJhZGljYWwtcmVkXFxcIiBocmVmPVxcXCIjXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+0L/QvtC70LjRgtC40LrQvtC5INC60L7QvdGE0LjQtNC10L3RhtC40LDQu9GM0L3QvtGB0YLQuDwvYT4gPC9wPiA8YnV0dG9uIGNsYXNzPVxcXCJmYi1mb3JtX19idG4gaWNvbi1kcm9wZG93blxcXCIgdHlwZT1cXFwic3VibWl0XFxcIj7QntGC0L/RgNCw0LLQuNGC0Yw8L2J1dHRvbj4gPC9mb3JtPiA8YnV0dG9uIGNsYXNzPVxcXCJjcHMtcG9wYXBfX2J0biBidG4tY2xvc2UgYnV0dG9uLWpzLW9wZW5cXFwiPiA8c3BhbiBjbGFzcz1cXFwidmlzdWFsbHktaGlkZGVuXFxcIj7Ql9Cw0LrRgNGL0YLRjCDQvNC10L3Rjjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImJ0bi1jbG9zZV9fZWxtLWJ0blxcXCI+PC9zcGFuPiA8L2J1dHRvbj4gPGRpdiBjbGFzcz1cXFwiY3BzLWpzLWJnIGNwcy1wb3BhcF9fYmdcXFwiPjwvZGl2PiA8L3NlY3Rpb24+IDxzZWN0aW9uIGNsYXNzPVxcXCJjcHMtcG9wYXAgY3BzLXBvcGFwLS1ub25lIGJsb2stanMtYWN0aXZlXFxcIiBkYXRhLXRhcmdldD1cXFwiZml2ZS1idG5cXFwiPiA8aDIgY2xhc3M9XFxcImNwcy1wb3BhcF9fdGl0bGVcXFwiPtCS0YXQvtC0INCb0LjRh9C90YvQuSDQutCw0LHQuNC90LXRgtC6PC9oMj4gPGZvcm0gY2xhc3M9XFxcImNwcy1wb3BhcF9fZmItZm9ybSBmYi1mb3JtXFxcIiBhY3Rpb249XFxcIiNcXFwiIG1ldGhvZD1cXFwiUE9TVFxcXCIgZW5jdHlwZT1cXFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVxcXCI+IDxsYWJlbD4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0KLQtdC70LXRhNC+0L08L3NwYW4+IDxpbnB1dCBjbGFzcz1cXFwiZmItZm9ybV9faW5wdXRcXFwiIHR5cGU9XFxcInRlbFxcXCIgbmFtZT1cXFwicGhvbmVcXFwiIHBsYWNlaG9sZGVyPVxcXCLQotC10LvQtdGE0L7QvVxcXCIgcmVxdWlyZWQ9XFxcInJlcXVpcmVkXFxcIj4gPC9sYWJlbD4gPHAgY2xhc3M9XFxcImZiLWZvcm1fX3RleHRcXFwiPiDQndCw0LbQuNC80LDRjyDigJzQvtGC0L/RgNCw0LLQuNGC0YzigJ0sINCy0Ysg0LTQsNC10YLQtSDRgdC+0LPQu9Cw0YHQuNC1INC90LAgPHN0cm9uZyBjbGFzcz1cXFwiZmItZm9ybV9fdGV4dC0tY29sb3ItcmFkaWNhbC1yZWRcXFwiPtC+0LHRgNCw0LHQvtGC0LrRgyDQv9C10YDRgdC+0L3QsNC70YzQvdGL0YUg0LTQsNC90L3Ri9GFPC9zdHJvbmc+INC4INGB0L7Qs9C70LDRiNCw0LXRgtC10YHRjCDRgSDQvdCw0YjQtdC5IDxhIGNsYXNzPVxcXCJmYi1mb3JtX190ZXh0LS1jb2xvci1yYWRpY2FsLXJlZFxcXCIgaHJlZj1cXFwiI1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPtC/0L7Qu9C40YLQuNC60L7QuSDQutC+0L3RhNC40LTQtdC90YbQuNCw0LvRjNC90L7RgdGC0Lg8L2E+IDwvcD4gPGJ1dHRvbiBjbGFzcz1cXFwiZmItZm9ybV9fYnRuIGljb24tZHJvcGRvd25cXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCI+0J7RgtC/0YDQsNCy0LjRgtGMPC9idXR0b24+IDwvZm9ybT4gPGJ1dHRvbiBjbGFzcz1cXFwiY3BzLXBvcGFwX19idG4gYnRuLWNsb3NlIGJ1dHRvbi1qcy1vcGVuXFxcIj4gPHNwYW4gY2xhc3M9XFxcInZpc3VhbGx5LWhpZGRlblxcXCI+0JfQsNC60YDRi9GC0Ywg0LzQtdC90Y48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJidG4tY2xvc2VfX2VsbS1idG5cXFwiPjwvc3Bhbj4gPC9idXR0b24+IDxkaXYgY2xhc3M9XFxcImNwcy1qcy1iZyBjcHMtcG9wYXBfX2JnXFxcIj48L2Rpdj4gPC9zZWN0aW9uPiA8c2VjdGlvbiBjbGFzcz1cXFwiY3BzLXBvcGFwIGNwcy1wb3BhcC0tbm9uZSBibG9rLWpzLWFjdGl2ZVxcXCIgZGF0YS10YXJnZXQ9XFxcInNldmVuLWJ0blxcXCI+IDxoMiBjbGFzcz1cXFwiY3BzLXBvcGFwX190aXRsZVxcXCI+0J/QvtC40YHQujwvaDI+IDxmb3JtIGNsYXNzPVxcXCJjcHMtcG9wYXBfX2ZiLWZvcm0gZmItZm9ybVxcXCIgYWN0aW9uPVxcXCIjXFxcIiBtZXRob2Q9XFxcIlBPU1RcXFwiIGVuY3R5cGU9XFxcIm11bHRpcGFydC9mb3JtLWRhdGFcXFwiPiA8bGFiZWw+IDxzcGFuIGNsYXNzPVxcXCJ2aXN1YWxseS1oaWRkZW5cXFwiPtCi0LXQu9C10YTQvtC9PC9zcGFuPiA8aW5wdXQgY2xhc3M9XFxcImZiLWZvcm1fX2lucHV0XFxcIiB0eXBlPVxcXCJ0ZWxcXFwiIG5hbWU9XFxcInBob25lXFxcIiBwbGFjZWhvbGRlcj1cXFwi0KLQtdC70LXRhNC+0L1cXFwiIHJlcXVpcmVkPVxcXCJyZXF1aXJlZFxcXCI+IDwvbGFiZWw+IDxwIGNsYXNzPVxcXCJmYi1mb3JtX190ZXh0XFxcIj4g0J3QsNC20LjQvNCw0Y8g4oCc0L7RgtC/0YDQsNCy0LjRgtGM4oCdLCDQstGLINC00LDQtdGC0LUg0YHQvtCz0LvQsNGB0LjQtSDQvdCwIDxzdHJvbmcgY2xhc3M9XFxcImZiLWZvcm1fX3RleHQtLWNvbG9yLXJhZGljYWwtcmVkXFxcIj7QvtCx0YDQsNCx0L7RgtC60YMg0L/QtdGA0YHQvtC90LDQu9GM0L3Ri9GFINC00LDQvdC90YvRhTwvc3Ryb25nPiDQuCDRgdC+0LPQu9Cw0YjQsNC10YLQtdGB0Ywg0YEg0L3QsNGI0LXQuSA8YSBjbGFzcz1cXFwiZmItZm9ybV9fdGV4dC0tY29sb3ItcmFkaWNhbC1yZWRcXFwiIGhyZWY9XFxcIiNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj7Qv9C+0LvQuNGC0LjQutC+0Lkg0LrQvtC90YTQuNC00LXQvdGG0LjQsNC70YzQvdC+0YHRgtC4PC9hPiA8L3A+IDxidXR0b24gY2xhc3M9XFxcImZiLWZvcm1fX2J0biBpY29uLWRyb3Bkb3duXFxcIiB0eXBlPVxcXCJzdWJtaXRcXFwiPtCe0YLQv9GA0LDQstC40YLRjDwvYnV0dG9uPiA8L2Zvcm0+IDxidXR0b24gY2xhc3M9XFxcImNwcy1wb3BhcF9fYnRuIGJ0bi1jbG9zZSBidXR0b24tanMtb3BlblxcXCI+IDxzcGFuIGNsYXNzPVxcXCJ2aXN1YWxseS1oaWRkZW5cXFwiPtCX0LDQutGA0YvRgtGMINC80LXQvdGOPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiYnRuLWNsb3NlX19lbG0tYnRuXFxcIj48L3NwYW4+IDwvYnV0dG9uPiA8ZGl2IGNsYXNzPVxcXCJjcHMtanMtYmcgY3BzLXBvcGFwX19iZ1xcXCI+PC9kaXY+IDwvc2VjdGlvbj4gPGZvb3RlciBjbGFzcz1cXFwiY3BzLWZvb3RlclxcXCI+IDx1bCBjbGFzcz1cXFwiY3BzLWZvb3Rlcl9fZm9vdGVyLWxpc3QgZm9vdGVyLWxpc3RcXFwiPiA8bGkgY2xhc3M9XFxcImZvb3Rlci1saXN0X19pdGVtIGZvb3Rlci1saXN0X193cmFwcFxcXCI+IDxzcGFuPiYjMTY5OyAyMDE5IENQUzwvc3Bhbj4gPHNwYW4+0KDQsNC30YDQsNCx0L7RgtCw0L3QviDQutC+0LzQsNC90LTQvtC5IDxhIGNsYXNzPVxcXCJmb290ZXItbGlzdF9fbGlua1xcXCIgaHJlZj1cXFwiaHR0cHM6Ly9hcGVzb25nLnJ1L1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkFwZXNvbmc8L2E+PC9zcGFuPiA8L2xpPiA8bGkgY2xhc3M9XFxcImZvb3Rlci1saXN0X19pdGVtXFxcIj4gPGEgY2xhc3M9XFxcImZvb3Rlci1saXN0X19saW5rXFxcIiBocmVmPVxcXCIjXFxcIj7Qn9C+0LvQuNGC0LjQutCwINC60L7QvdGE0LjQtNC10L3RhtC40LDQu9GM0L3QvtGB0YLQuDwvYT4gPC9saT4gPGxpIGNsYXNzPVxcXCJmb290ZXItbGlzdF9faXRlbVxcXCI+INCY0L3RhNC+0YDQvNCw0YbQuNGPLCDRgNCw0LfQvNC10YnQtdC90LAg0L3QsCDQtNCw0L3QvdC+0Lkg0YHRgtGA0LDQvdC40YbQtSwg0L3QtSDRj9Cy0LvRj9C10YLRgdGPINC/0YPQsdC70LjRh9C90L7QuSDQvtGE0LXRgNGC0L7QuSA8L2xpPiA8L3VsPiA8L2Zvb3Rlcj4gPC9ib2R5PiA8L2h0bWw+XCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsImltcG9ydCBTd2lwZXIgZnJvbSAnc3dpcGVyJztcclxuaW1wb3J0IFN3aXBlckNvcmUsIHsgTmF2aWdhdGlvbiwgUGFnaW5hdGlvbiB9IGZyb20gJ3N3aXBlci9jb3JlJztcclxuaW1wb3J0ICcuL2pzL2FwcC5qcyc7XHJcbmltcG9ydCAnLi9zY3NzL21haW4uc2Nzcyc7XHJcbmltcG9ydCAnL2luZGV4Lmh0bWwnO1xyXG5cclxuU3dpcGVyQ29yZS51c2UoW05hdmlnYXRpb24sIFBhZ2luYXRpb25dKTtcclxuXHJcbmNvbnN0IHN3aXBlclNlcnZpY2UgPSBuZXcgU3dpcGVyKCcuc3dpcGVyLWNvbnRhaW5lci0tc2VydmljZScsIHtcclxuXHR3aWR0aDogMjUwLFxyXG5cdHNwYWNlQmV0d2VlbjogMTAsXHJcblx0Y2VudGVyZWRTbGlkZXM6IHRydWUsXHJcblxyXG5cclxuXHQvLyBBbmQgaWYgd2UgbmVlZCBzY3JvbGxiYXJcclxuXHQvLyBzY3JvbGxiYXI6IHtcclxuXHQvLyBcdGVsOiAnLnN3aXBlci1zY3JvbGxiYXInXHRcclxuXHQvLyB9LFxyXG5cdC8vIGJyZWFrcG9pbnRzOiB7XHJcblx0Ly8gXHQxMTQwOiB7XHJcblx0Ly8gXHRcdHNjcm9sbGJhcjoge1xyXG5cdC8vIFx0XHRcdGVsOiAnJ1xyXG5cdC8vIFx0XHR9LFxyXG5cdC8vIFx0fVxyXG5cdC8vIH1cclxufSk7XHJcblxyXG5jb25zdCBzd2lwZXJCcmFuZHMgPSBuZXcgU3dpcGVyKCcuc3dpcGVyLWNvbnRhaW5lci0tYnJhbmRzJywge1xyXG5cdC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuXHQvLyBsb29wOiB0cnVlLFxyXG5cdHdpZHRoOiAyNDAsXHJcblx0c3BhY2VCZXR3ZWVuOiAxMCxcclxuXHRjZW50ZXJlZFNsaWRlczogdHJ1ZSxcclxuXHJcblxyXG5cdC8vIElmIHdlIG5lZWQgcGFnaW5hdGlvblxyXG5cdFx0cGFnaW5hdGlvbjoge1xyXG5cdFx0XHRlbDogJy5zd2lwZXItcGFnaW5hdGlvbicsXHJcblx0XHRcdHR5cGU6ICdidWxsZXRzJyxcclxuXHRcdFx0Y2xpY2thYmxlOiAndHJ1ZScsXHJcblx0XHR9LFxyXG5cclxuXHQvLyBBbmQgaWYgd2UgbmVlZCBzY3JvbGxiYXJcclxuXHRzY3JvbGxiYXI6IHtcclxuXHRcdGVsOiAnLnN3aXBlci1zY3JvbGxiYXInLFxyXG5cdH0sXHJcbn0pO1xyXG5cclxuY29uc3Qgc3dpcGVyVHlwZSA9IG5ldyBTd2lwZXIoJy5zd2lwZXItY29udGFpbmVyLS10eXBlJywge1xyXG5cdC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuXHQvLyBsb29wOiB0cnVlLFxyXG5cdHdpZHRoOiAyNDAsXHJcblx0c3BhY2VCZXR3ZWVuOiAxMCxcclxuXHRjZW50ZXJlZFNsaWRlczogdHJ1ZSxcclxuXHJcblxyXG5cdC8vIElmIHdlIG5lZWQgcGFnaW5hdGlvblxyXG5cdFx0cGFnaW5hdGlvbjoge1xyXG5cdFx0XHRlbDogJy5zd2lwZXItcGFnaW5hdGlvbicsXHJcblx0XHRcdHR5cGU6ICdidWxsZXRzJyxcclxuXHRcdFx0Y2xpY2thYmxlOiAndHJ1ZScsXHJcblx0XHR9LFxyXG5cclxuXHQvLyBBbmQgaWYgd2UgbmVlZCBzY3JvbGxiYXJcclxuXHRzY3JvbGxiYXI6IHtcclxuXHRcdGVsOiAnLnN3aXBlci1zY3JvbGxiYXInLFxyXG5cdH0sXHJcbn0pO1xyXG5cclxuY29uc3Qgc3dpcGVyUHJpY2UgPSBuZXcgU3dpcGVyKCcuc3dpcGVyLWNvbnRhaW5lci0tcHJpY2UnLCB7XHJcblx0Ly8gT3B0aW9uYWwgcGFyYW1ldGVyc1xyXG5cdC8vIGxvb3A6IHRydWUsXHJcblx0d2lkdGg6IDI2MCxcclxuXHRzcGFjZUJldHdlZW46IDQwLFxyXG5cdGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxyXG5cclxuXHJcblx0Ly8gSWYgd2UgbmVlZCBwYWdpbmF0aW9uXHJcblx0XHRwYWdpbmF0aW9uOiB7XHJcblx0XHRcdGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJyxcclxuXHRcdFx0dHlwZTogJ2J1bGxldHMnLFxyXG5cdFx0XHRjbGlja2FibGU6ICd0cnVlJyxcclxuXHRcdH0sXHJcblxyXG5cdC8vIEFuZCBpZiB3ZSBuZWVkIHNjcm9sbGJhclxyXG5cdHNjcm9sbGJhcjoge1xyXG5cdFx0ZWw6ICcuc3dpcGVyLXNjcm9sbGJhcicsXHJcblx0fSxcclxufSk7Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXNoIiwibWF5YmVOZWVkUXVvdGVzIiwidGVzdCIsImNvbmNhdCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwidGFic0J0biIsImV2ZW50IiwicGF0aCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0IiwidGFiQ29udGVudCIsImNsYXNzTGlzdCIsInJlbW92ZSIsInF1ZXJ5U2VsZWN0b3IiLCJhZGQiLCJnZXRBdHRyaWJ1dGUiLCJjbG9zZUVsZW0iLCJ0b2dnbGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIm4iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInAiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJsb2NhdGlvbiIsImhyZWYiLCJpc09iamVjdCIsImNvbnN0cnVjdG9yIiwiZXh0ZW5kIiwidGFyZ2V0Iiwic3JjIiwia2V5cyIsImxlbmd0aCIsInNzckRvY3VtZW50IiwiYm9keSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJzdHlsZSIsInNldEF0dHJpYnV0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY3JlYXRlRWxlbWVudE5TIiwiaW1wb3J0Tm9kZSIsImhvc3QiLCJob3N0bmFtZSIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJnZXREb2N1bWVudCIsImRvYyIsInNzcldpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJnbyIsImJhY2siLCJDdXN0b21FdmVudCIsInRoaXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIkltYWdlIiwiRGF0ZSIsInNjcmVlbiIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJtYXRjaE1lZGlhIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwid2luIiwid2luZG93IiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zZXRQcm90b3R5cGVPZiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwidG9TdHJpbmciLCJlIiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsImFyZ3MiLCJDbGFzcyIsInB1c2giLCJhcHBseSIsImluc3RhbmNlIiwiRnVuY3Rpb24iLCJiaW5kIiwiYXJndW1lbnRzIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsIk1hcCIsImZuIiwiaW5kZXhPZiIsIlR5cGVFcnJvciIsImhhcyIsInNldCIsIldyYXBwZXIiLCJjcmVhdGUiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiRG9tNyIsIl9BcnJheSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIml0ZW1zIiwiX3RoaXMiLCJwcm90byIsIlJlZmVyZW5jZUVycm9yIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIkFycmF5IiwiYXJyYXlGbGF0IiwiYXJyIiwicmVzIiwiZWwiLCJpc0FycmF5IiwiYXJyYXlGaWx0ZXIiLCJmaWx0ZXIiLCIkIiwic2VsZWN0b3IiLCJjb250ZXh0IiwiaHRtbCIsInRyaW0iLCJ0b0NyZWF0ZSIsInRlbXBQYXJlbnQiLCJpbm5lckhUTUwiLCJpIiwicXNhIiwibm9kZVR5cGUiLCJ1bmlxdWVBcnJheSIsImFycmF5VW5pcXVlIiwibm9UcmlnZ2VyIiwic3BsaXQiLCJzaG9ydGN1dCIsIm5hbWUiLCJfbGVuIiwiX2tleSIsInRyaWdnZXIiLCJvbiIsIk1ldGhvZHMiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjbGFzc05hbWVzIiwibWFwIiwiYyIsIl9lbCRjbGFzc0xpc3QiLCJyZW1vdmVDbGFzcyIsIl9sZW4yIiwiX2tleTIiLCJfZWwkY2xhc3NMaXN0MiIsImhhc0NsYXNzIiwiX2xlbjQiLCJfa2V5NCIsImNsYXNzTmFtZSIsImNvbnRhaW5zIiwidG9nZ2xlQ2xhc3MiLCJfbGVuMyIsIl9rZXkzIiwiYXR0ciIsImF0dHJzIiwiYXR0ck5hbWUiLCJyZW1vdmVBdHRyIiwicmVtb3ZlQXR0cmlidXRlIiwidHJhbnNmb3JtIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX2xlbjUiLCJfa2V5NSIsImV2ZW50VHlwZSIsInRhcmdldFNlbGVjdG9yIiwibGlzdGVuZXIiLCJjYXB0dXJlIiwiaGFuZGxlTGl2ZUV2ZW50IiwiZXZlbnREYXRhIiwiZG9tN0V2ZW50RGF0YSIsInVuc2hpZnQiLCJpcyIsIl9wYXJlbnRzIiwicGFyZW50cyIsImsiLCJoYW5kbGVFdmVudCIsImoiLCJldmVudHMiLCJfZXZlbnQiLCJkb203TGl2ZUxpc3RlbmVycyIsInByb3h5TGlzdGVuZXIiLCJkb203TGlzdGVuZXJzIiwib2ZmIiwiX2xlbjYiLCJfa2V5NiIsImhhbmRsZXJzIiwiaGFuZGxlciIsImRvbTdwcm94eSIsInNwbGljZSIsIl9sZW45IiwiX2tleTkiLCJldnQiLCJkZXRhaWwiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRhdGEiLCJkYXRhSW5kZXgiLCJkaXNwYXRjaEV2ZW50IiwidHJhbnNpdGlvbkVuZCIsImRvbSIsImZpcmVDYWxsQmFjayIsIm91dGVyV2lkdGgiLCJpbmNsdWRlTWFyZ2lucyIsIl9zdHlsZXMiLCJzdHlsZXMiLCJvZmZzZXRXaWR0aCIsInBhcnNlRmxvYXQiLCJvdXRlckhlaWdodCIsIl9zdHlsZXMyIiwib2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0IiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbFRvcCIsInNjcm9sbFkiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWCIsInRvcCIsImxlZnQiLCJjc3MiLCJwcm9wcyIsIl9wcm9wIiwiZWFjaCIsImluZGV4IiwidGV4dCIsInRleHRDb250ZW50IiwiY29tcGFyZVdpdGgiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsImVxIiwicmV0dXJuSW5kZXgiLCJhcHBlbmQiLCJuZXdDaGlsZCIsInRlbXBEaXYiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsIm5leHRFbGVtZW50U2libGluZyIsIm5leHRBbGwiLCJuZXh0RWxzIiwiX25leHQiLCJwcmV2IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXZBbGwiLCJwcmV2RWxzIiwiX3ByZXYiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiX3BhcmVudCIsImNsb3Nlc3QiLCJmaW5kIiwiZm91bmRFbGVtZW50cyIsImZvdW5kIiwicmVtb3ZlQ2hpbGQiLCJtZXRob2ROYW1lIiwibmV4dFRpY2siLCJkZWxheSIsIm5vdyIsInNsaWNlIiwiaXNOb2RlIiwibm9kZSIsIkhUTUxFbGVtZW50IiwidG8iLCJub0V4dGVuZCIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fc3dpcGVyX18iLCJiaW5kTW9kdWxlTWV0aG9kcyIsInN1YktleSIsImNsYXNzZXNUb1NlbGVjdG9yIiwicmVwbGFjZSIsImNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQiLCIkY29udGFpbmVyIiwicGFyYW1zIiwiY3JlYXRlRWxlbWVudHMiLCJjaGVja1Byb3BzIiwiYXV0byIsImVsZW1lbnQiLCJzdXBwb3J0IiwiZGV2aWNlIiwiYnJvd3NlciIsImdldFN1cHBvcnQiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJwb2ludGVyRXZlbnRzIiwiUG9pbnRlckV2ZW50IiwibWF4VG91Y2hQb2ludHMiLCJvYnNlcnZlciIsInBhc3NpdmVMaXN0ZW5lciIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJnZXN0dXJlcyIsImNhbGNTdXBwb3J0IiwiZ2V0RGV2aWNlIiwib3ZlcnJpZGVzIiwiX3RlbXAiLCJwbGF0Zm9ybSIsInVhIiwiaW9zIiwiYW5kcm9pZCIsInNjcmVlbldpZHRoIiwid2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJoZWlnaHQiLCJtYXRjaCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwib3MiLCJjYWxjRGV2aWNlIiwiZ2V0QnJvd3NlciIsImlzRWRnZSIsImlzU2FmYXJpIiwidG9Mb3dlckNhc2UiLCJpc1dlYlZpZXciLCJjYWxjQnJvd3NlciIsInN3aXBlciIsInJlc2l6ZSIsImNyZWF0ZU9ic2VydmVyIiwiZGVzdHJveWVkIiwiaW5pdGlhbGl6ZWQiLCJSZXNpemVPYnNlcnZlciIsImVudHJpZXMiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsIl9yZWYiLCJjb250ZW50Qm94U2l6ZSIsImNvbnRlbnRSZWN0IiwiaW5saW5lU2l6ZSIsImJsb2NrU2l6ZSIsInJlc2l6ZUhhbmRsZXIiLCJvYnNlcnZlIiwicmVtb3ZlT2JzZXJ2ZXIiLCJ1bm9ic2VydmUiLCJlbWl0Iiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiaW5pdCIsInJlc2l6ZU9ic2VydmVyIiwiZGVzdHJveSIsIl9leHRlbmRzIiwiYXNzaWduIiwic291cmNlIiwiT2JzZXJ2ZXIiLCJhdHRhY2giLCJNdXRhdGlvbk9ic2VydmVyIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm9ic2VydmVyVXBkYXRlIiwiYXR0cmlidXRlcyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJvYnNlcnZlcnMiLCJvYnNlcnZlUGFyZW50cyIsImNvbnRhaW5lclBhcmVudHMiLCIkZWwiLCJvYnNlcnZlU2xpZGVDaGlsZHJlbiIsIiR3cmFwcGVyRWwiLCJkaXNjb25uZWN0Iiwib25Ub3VjaFN0YXJ0IiwidG91Y2hFdmVudHNEYXRhIiwidG91Y2hlcyIsImVuYWJsZWQiLCJhbmltYXRpbmciLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJvcmlnaW5hbEV2ZW50IiwiJHRhcmdldEVsIiwidG91Y2hFdmVudHNUYXJnZXQiLCJ3cmFwcGVyRWwiLCJpc1RvdWNoRXZlbnQiLCJ0eXBlIiwid2hpY2giLCJidXR0b24iLCJpc1RvdWNoZWQiLCJpc01vdmVkIiwibm9Td2lwaW5nQ2xhc3MiLCJzaGFkb3dSb290Iiwibm9Td2lwaW5nU2VsZWN0b3IiLCJpc1RhcmdldFNoYWRvdyIsIm5vU3dpcGluZyIsImJhc2UiLCJfX2Nsb3Nlc3RGcm9tIiwiYXNzaWduZWRTbG90IiwiZ2V0Um9vdE5vZGUiLCJjbG9zZXN0RWxlbWVudCIsImFsbG93Q2xpY2siLCJzd2lwZUhhbmRsZXIiLCJjdXJyZW50WCIsInRhcmdldFRvdWNoZXMiLCJwYWdlWCIsImN1cnJlbnRZIiwicGFnZVkiLCJzdGFydFgiLCJzdGFydFkiLCJlZGdlU3dpcGVEZXRlY3Rpb24iLCJpT1NFZGdlU3dpcGVEZXRlY3Rpb24iLCJlZGdlU3dpcGVUaHJlc2hvbGQiLCJpT1NFZGdlU3dpcGVUaHJlc2hvbGQiLCJpbm5lcldpZHRoIiwicHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoQ2FsbGJhY2tzIiwiaXNTY3JvbGxpbmciLCJzdGFydE1vdmluZyIsInRvdWNoU3RhcnRUaW1lIiwidXBkYXRlU2l6ZSIsInN3aXBlRGlyZWN0aW9uIiwidGhyZXNob2xkIiwiYWxsb3dUaHJlc2hvbGRNb3ZlIiwiZm9jdXNhYmxlRWxlbWVudHMiLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsImFsbG93VG91Y2hNb3ZlIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsIm9uVG91Y2hNb3ZlIiwicnRsIiwicnRsVHJhbnNsYXRlIiwidGFyZ2V0VG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsImxvb3AiLCJpc1ZlcnRpY2FsIiwidHJhbnNsYXRlIiwibWF4VHJhbnNsYXRlIiwibWluVHJhbnNsYXRlIiwidG91Y2hBbmdsZSIsImRpZmZYIiwiZGlmZlkiLCJNYXRoIiwic3FydCIsInBvdyIsImlzSG9yaXpvbnRhbCIsImF0YW4yIiwiYWJzIiwiUEkiLCJjc3NNb2RlIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwibmVzdGVkIiwic3RvcFByb3BhZ2F0aW9uIiwibG9vcEZpeCIsInN0YXJ0VHJhbnNsYXRlIiwiZ2V0VHJhbnNsYXRlIiwic2V0VHJhbnNpdGlvbiIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJncmFiQ3Vyc29yIiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInNldEdyYWJDdXJzb3IiLCJkaWZmIiwidG91Y2hSYXRpbyIsImN1cnJlbnRUcmFuc2xhdGUiLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwicmVzaXN0YW5jZVJhdGlvIiwicmVzaXN0YW5jZSIsImZvbGxvd0ZpbmdlciIsImZyZWVNb2RlIiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsIndhdGNoU2xpZGVzVmlzaWJpbGl0eSIsInVwZGF0ZUFjdGl2ZUluZGV4IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsInZlbG9jaXRpZXMiLCJwb3NpdGlvbiIsInRpbWUiLCJ1cGRhdGVQcm9ncmVzcyIsInNldFRyYW5zbGF0ZSIsIm9uVG91Y2hFbmQiLCJzbGlkZXNHcmlkIiwic25hcEdyaWQiLCJjdXJyZW50UG9zIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJsYXN0Q2xpY2tUaW1lIiwic2xpZGVUbyIsImFjdGl2ZUluZGV4Iiwic2xpZGVzIiwiZnJlZU1vZGVNb21lbnR1bSIsImxhc3RNb3ZlRXZlbnQiLCJwb3AiLCJ2ZWxvY2l0eUV2ZW50IiwiZGlzdGFuY2UiLCJ2ZWxvY2l0eSIsImZyZWVNb2RlTWluaW11bVZlbG9jaXR5IiwiZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW8iLCJtb21lbnR1bUR1cmF0aW9uIiwiZnJlZU1vZGVNb21lbnR1bVJhdGlvIiwibW9tZW50dW1EaXN0YW5jZSIsIm5ld1Bvc2l0aW9uIiwiYWZ0ZXJCb3VuY2VQb3NpdGlvbiIsIm5lZWRzTG9vcEZpeCIsImRvQm91bmNlIiwiYm91bmNlQW1vdW50IiwiZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvIiwiZnJlZU1vZGVNb21lbnR1bUJvdW5jZSIsImNlbnRlcmVkU2xpZGVzIiwiZnJlZU1vZGVTdGlja3kiLCJuZXh0U2xpZGUiLCJvbmNlIiwibW92ZURpc3RhbmNlIiwiY3VycmVudFNsaWRlU2l6ZSIsInNsaWRlc1NpemVzR3JpZCIsInNwZWVkIiwic2xpZGVUb0Nsb3Nlc3QiLCJ0cmFuc2l0aW9uU3RhcnQiLCJsb25nU3dpcGVzTXMiLCJzdG9wSW5kZXgiLCJncm91cFNpemUiLCJzbGlkZXNQZXJHcm91cFNraXAiLCJzbGlkZXNQZXJHcm91cCIsIl9pbmNyZW1lbnQiLCJyYXRpbyIsImluY3JlbWVudCIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJzaG9ydFN3aXBlcyIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJvblJlc2l6ZSIsImJyZWFrcG9pbnRzIiwic2V0QnJlYWtwb2ludCIsInVwZGF0ZVNsaWRlcyIsInNsaWRlc1BlclZpZXciLCJpc0VuZCIsImlzQmVnaW5uaW5nIiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicGF1c2VkIiwicnVuIiwid2F0Y2hPdmVyZmxvdyIsImNoZWNrT3ZlcmZsb3ciLCJvbkNsaWNrIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uU2Nyb2xsIiwicHJldmlvdXNUcmFuc2xhdGUiLCJzY3JvbGxXaWR0aCIsInRyYW5zbGF0ZXNEaWZmIiwicHJvZ3Jlc3MiLCJkdW1teUV2ZW50QXR0YWNoZWQiLCJkdW1teUV2ZW50TGlzdGVuZXIiLCJkaXJlY3Rpb24iLCJpbml0aWFsU2xpZGUiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsImF1dG9IZWlnaHQiLCJzZXRXcmFwcGVyU2l6ZSIsInZpcnR1YWxUcmFuc2xhdGUiLCJlZmZlY3QiLCJicmVha3BvaW50c0Jhc2UiLCJzcGFjZUJldHdlZW4iLCJzbGlkZXNQZXJDb2x1bW4iLCJzbGlkZXNQZXJDb2x1bW5GaWxsIiwiY2VudGVyZWRTbGlkZXNCb3VuZHMiLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJzbGlkZXNPZmZzZXRBZnRlciIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJyb3VuZExlbmd0aHMiLCJzaW11bGF0ZVRvdWNoIiwidW5pcXVlTmF2RWxlbWVudHMiLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwicHJlbG9hZEltYWdlcyIsInVwZGF0ZU9uSW1hZ2VzUmVhZHkiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsImxvb3BlZFNsaWRlcyIsImxvb3BGaWxsR3JvdXBXaXRoQmxhbmsiLCJsb29wUHJldmVudHNTbGlkZSIsInBhc3NpdmVMaXN0ZW5lcnMiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwic2xpZGVDbGFzcyIsInNsaWRlQmxhbmtDbGFzcyIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzIiwic2xpZGVWaXNpYmxlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwic2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MiLCJ3cmFwcGVyQ2xhc3MiLCJydW5DYWxsYmFja3NPbkluaXQiLCJfZW1pdENsYXNzZXMiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b3R5cGVzIiwibW9kdWxhciIsInVzZVBhcmFtcyIsImluc3RhbmNlUGFyYW1zIiwibW9kdWxlcyIsIm1vZHVsZU5hbWUiLCJ1c2VNb2R1bGVzIiwibW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtcyIsIm1vZHVsZUV2ZW50TmFtZSIsImV2ZW50c0VtaXR0ZXIiLCJwcmlvcml0eSIsIm1ldGhvZCIsImV2ZW50c0xpc3RlbmVycyIsIm9uY2VIYW5kbGVyIiwiX19lbWl0dGVyUHJveHkiLCJvbkFueSIsImV2ZW50c0FueUxpc3RlbmVycyIsIm9mZkFueSIsImV2ZW50SGFuZGxlciIsImV2ZW50c0FycmF5IiwidXBkYXRlIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJwYXJzZUludCIsIk51bWJlciIsImlzTmFOIiwic2l6ZSIsImdldERpcmVjdGlvbkxhYmVsIiwicHJvcGVydHkiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibGFiZWwiLCJzd2lwZXJTaXplIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXNMZW5ndGgiLCJvZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInByZXZpb3VzU25hcEdyaWRMZW5ndGgiLCJwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgiLCJzbGlkZVBvc2l0aW9uIiwicHJldlNsaWRlU2l6ZSIsInNsaWRlc051bWJlckV2ZW5Ub1Jvd3MiLCJzbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsImZsb29yIiwiY2VpbCIsIm1heCIsIm5ld1NsaWRlc0dyaWQiLCJfJHdyYXBwZXJFbCRjc3MiLCJfJHdyYXBwZXJFbCRjc3MyIiwic2xpZGVzUGVyUm93IiwibnVtRnVsbENvbHVtbnMiLCJzbGlkZSIsIm5ld1NsaWRlT3JkZXJJbmRleCIsImNvbHVtbiIsInJvdyIsImdyb3VwSW5kZXgiLCJzbGlkZUluZGV4SW5Hcm91cCIsImNvbHVtbnNJbkdyb3VwIiwibWluIiwib3JkZXIiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJfc2xpZGUkIiwic3dpcGVyU2xpZGVTaXplIiwiX2kiLCJzbGlkZXNHcmlkSXRlbSIsIl9pMiIsIl9zbGlkZXNHcmlkSXRlbSIsIl9zbGlkZXMkZmlsdGVyJGNzcyIsIl8iLCJzbGlkZUluZGV4IiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJfYWxsU2xpZGVzU2l6ZSIsImFsbFNsaWRlc09mZnNldCIsInNuYXBJbmRleCIsInVwZGF0ZVNsaWRlc09mZnNldCIsInVwZGF0ZUF1dG9IZWlnaHQiLCJhY3RpdmVTbGlkZXMiLCJnZXRTbGlkZUJ5SW5kZXgiLCJ2aXNpYmxlU2xpZGVzIiwic3dpcGVyU2xpZGVPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJvZmZzZXRDZW50ZXIiLCJ2aXNpYmxlU2xpZGVzSW5kZXhlcyIsInNsaWRlUHJvZ3Jlc3MiLCJzbGlkZUJlZm9yZSIsInNsaWRlQWZ0ZXIiLCJtdWx0aXBsaWVyIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiYWN0aXZlU2xpZGUiLCJyZWFsSW5kZXgiLCJwcmV2U2xpZGUiLCJlbWl0U2xpZGVzQ2xhc3NlcyIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJza2lwIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsImN1cnJlbnRTdHlsZSIsIldlYktpdENTU01hdHJpeCIsImpvaW4iLCJNb3pUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsIm00MSIsIm00MiIsImJ5Q29udHJvbGxlciIsIngiLCJ5IiwidHJhbnNsYXRlVG8iLCJydW5DYWxsYmFja3MiLCJ0cmFuc2xhdGVCb3VuZHMiLCJpbnRlcm5hbCIsIm5ld1RyYW5zbGF0ZSIsIl93cmFwcGVyRWwkc2Nyb2xsVG8iLCJpc0giLCJzY3JvbGxUbyIsImJlaGF2aW9yIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwiZGlyIiwiaW5pdGlhbCIsIkVycm9yIiwiaW5kZXhBc051bWJlciIsImlzRmluaXRlIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRHaXJkIiwibm9ybWFsaXplZEdyaWROZXh0IiwidCIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsInNsaWRlTmV4dCIsIl9jbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwicHJldkluZGV4Iiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJzbGlkZVJlc2V0IiwiY3VycmVudFNuYXAiLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsInNsaWRlVG9JbmRleCIsImxvb3BDcmVhdGUiLCJibGFua1NsaWRlc051bSIsImJsYW5rTm9kZSIsInByZXBlbmRTbGlkZXMiLCJhcHBlbmRTbGlkZXMiLCJjbG9uZU5vZGUiLCJsb29wRGVzdHJveSIsIm1vdmluZyIsImlzTG9ja2VkIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwibWFuaXB1bGF0aW9uIiwiYXBwZW5kU2xpZGUiLCJwcmVwZW5kU2xpZGUiLCJhZGRTbGlkZSIsImFjdGl2ZUluZGV4QnVmZmVyIiwiYmFzZUxlbmd0aCIsInNsaWRlc0J1ZmZlciIsImN1cnJlbnRTbGlkZSIsInJlbW92ZVNsaWRlIiwic2xpZGVzSW5kZXhlcyIsImluZGV4VG9SZW1vdmUiLCJyZW1vdmVBbGxTbGlkZXMiLCJhdHRhY2hFdmVudHMiLCJ0b3VjaEV2ZW50cyIsInN0YXJ0IiwibW92ZSIsImVuZCIsInBhc3NpdmUiLCJjYW5jZWwiLCJkZXRhY2hFdmVudHMiLCJfc3dpcGVyJGxvb3BlZFNsaWRlcyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50T25seVBhcmFtcyIsInBhcmFtIiwicGFyYW1WYWx1ZSIsImJyZWFrcG9pbnRQYXJhbXMiLCJvcmlnaW5hbFBhcmFtcyIsIndhc011bHRpUm93IiwiaXNNdWx0aVJvdyIsIndhc0VuYWJsZWQiLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsImNoYW5nZURpcmVjdGlvbiIsImlzRW5hYmxlZCIsImRpc2FibGUiLCJlbmFibGUiLCJjb250YWluZXJFbCIsImN1cnJlbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsInBvaW50cyIsInBvaW50IiwibWluUmF0aW8iLCJzdWJzdHIiLCJzb3J0IiwiX3BvaW50cyRpIiwid2FzTG9ja2VkIiwibGFzdFNsaWRlUG9zaXRpb24iLCJhZGRDbGFzc2VzIiwicHJlZml4IiwicmVzdWx0Q2xhc3NlcyIsInN1ZmZpeGVzIiwiaXRlbSIsInJlbW92ZUNsYXNzZXMiLCJpbWFnZXMiLCJsb2FkSW1hZ2UiLCJpbWFnZUVsIiwic3Jjc2V0Iiwic2l6ZXMiLCJjaGVja0ZvckNvbXBsZXRlIiwiaW1hZ2UiLCJvblJlYWR5IiwiY29tcGxldGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiaW1hZ2VzTG9hZGVkIiwiaW1hZ2VzVG9Mb2FkIiwiY3VycmVudFNyYyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJzd2lwZXJzIiwibmV3UGFyYW1zIiwibW9kdWxlUGFyYW1OYW1lIiwiZGVza3RvcCIsInN3aXBlclBhcmFtcyIsImRlZmF1bHRzIiwicGFzc2VkUGFyYW1zIiwiZXZlbnROYW1lIiwidG91Y2hFdmVudHNUb3VjaCIsInRvdWNoRXZlbnRzRGVza3RvcCIsImNsaWNrVGltZW91dCIsIkNvbnN0cnVjdG9yIiwic3RhdGljUHJvcHMiLCJfcHJvdG8iLCJzZXRQcm9ncmVzcyIsImN1cnJlbnQiLCJnZXRTbGlkZUNsYXNzZXMiLCJzbGlkZUVsIiwidXBkYXRlcyIsInNwdiIsImJyZWFrTG9vcCIsInRyYW5zbGF0ZVZhbHVlIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJtb3VudCIsIm1vdW50ZWQiLCJnZXRXcmFwcGVyU2VsZWN0b3IiLCJnZXRXcmFwcGVyIiwid3JhcHBlciIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJvYmplY3QiLCJleHRlbmREZWZhdWx0cyIsIm5ld0RlZmF1bHRzIiwiaW5zdGFsbE1vZHVsZSIsInVzZSIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJOYXZpZ2F0aW9uIiwidG9nZ2xlRWwiLCJkaXNhYmxlZCIsImRpc2FibGVkQ2xhc3MiLCJ0YWdOYW1lIiwiX3N3aXBlciRuYXZpZ2F0aW9uIiwiJG5leHRFbCIsIiRwcmV2RWwiLCJsb2NrQ2xhc3MiLCJvblByZXZDbGljayIsIm9uTmV4dENsaWNrIiwiX3N3aXBlciRuYXZpZ2F0aW9uMiIsImhpZGVPbkNsaWNrIiwiaGlkZGVuQ2xhc3MiLCJ0b0VkZ2UiLCJmcm9tRWRnZSIsIl9zd2lwZXIkbmF2aWdhdGlvbjMiLCJjbGljayIsIl9zd2lwZXIkbmF2aWdhdGlvbjQiLCJ0YXJnZXRFbCIsInBhZ2luYXRpb24iLCJjbGlja2FibGUiLCJpc0hpZGRlbiIsIlBhZ2luYXRpb24iLCJ0b3RhbCIsInBhZ2luYXRpb25UeXBlIiwiYnVsbGV0cyIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJtaWRJbmRleCIsImR5bmFtaWNCdWxsZXRzIiwiYnVsbGV0U2l6ZSIsImR5bmFtaWNNYWluQnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImJ1bGxldEFjdGl2ZUNsYXNzIiwiYnVsbGV0IiwiJGJ1bGxldCIsImJ1bGxldEluZGV4IiwiJGZpcnN0RGlzcGxheWVkQnVsbGV0IiwiJGxhc3REaXNwbGF5ZWRCdWxsZXQiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJvZmZzZXRQcm9wIiwiY3VycmVudENsYXNzIiwiZm9ybWF0RnJhY3Rpb25DdXJyZW50IiwidG90YWxDbGFzcyIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwicmVuZGVyQ3VzdG9tIiwicmVuZGVyIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJyZW5kZXJCdWxsZXQiLCJidWxsZXRDbGFzcyIsImJ1bGxldEVsZW1lbnQiLCJyZW5kZXJGcmFjdGlvbiIsInJlbmRlclByb2dyZXNzYmFyIiwiY2xpY2thYmxlQ2xhc3MiLCJtb2RpZmllckNsYXNzIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzIiwibnVtYmVyIiwiYWN0aXZlSW5kZXhDaGFuZ2UiLCJzbmFwSW5kZXhDaGFuZ2UiLCJzbGlkZXNMZW5ndGhDaGFuZ2UiLCJzbmFwR3JpZExlbmd0aENoYW5nZSIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzFfX18iLCJfX19IVE1MX0xPQURFUl9JTVBPUlRfMl9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8zX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzRfX18iLCJfX19IVE1MX0xPQURFUl9JTVBPUlRfNV9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF82X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzdfX18iLCJfX19IVE1MX0xPQURFUl9JTVBPUlRfOF9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF85X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzEwX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzExX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzEyX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzEzX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzE0X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzE1X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzE2X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzE3X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzE4X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzE5X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzIwX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzIxX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzIyX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzIzX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzI0X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzI1X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzI2X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzI3X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzI4X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzI5X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzMwX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzMxX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzMyX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzMzX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzM0X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzM1X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzM2X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzM3X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzM4X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzM5X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQwX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQxX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQyX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQzX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQ0X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQ1X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQ2X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQ3X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQ4X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzQ5X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzUwX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzUxX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzUyX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzUzX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzU0X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzU1X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzU2X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzU3X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzU4X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzU5X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzYwX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzYxX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzYyX19fIiwic2Nyb2xsYmFyIl0sInNvdXJjZVJvb3QiOiIifQ==